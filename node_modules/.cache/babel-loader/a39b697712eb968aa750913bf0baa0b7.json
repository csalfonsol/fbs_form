{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport Cell from './Cell';\nimport { isFrozen } from './utils/columnUtils';\n\nvar Row =\n/** @class */\nfunction (_super) {\n  __extends(Row, _super);\n\n  function Row() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleDragEnter = function (e) {\n      // Prevent default to allow drop\n      e.preventDefault();\n      var _a = _this.props,\n          idx = _a.idx,\n          cellMetaData = _a.cellMetaData;\n      cellMetaData.onDragEnter(idx);\n    };\n\n    _this.handleDragOver = function (e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'copy';\n    };\n\n    _this.handleDrop = function (e) {\n      // The default in Firefox is to treat data in dataTransfer as a URL and perform navigation on it, even if the data type used is 'text'\n      // To bypass this, we need to capture and prevent the drop event.\n      e.preventDefault();\n    };\n\n    return _this;\n  }\n\n  Row.prototype.getCells = function () {\n    var _a = this.props,\n        cellMetaData = _a.cellMetaData,\n        colOverscanEndIdx = _a.colOverscanEndIdx,\n        colOverscanStartIdx = _a.colOverscanStartIdx,\n        columns = _a.columns,\n        idx = _a.idx,\n        isRowSelected = _a.isRowSelected,\n        lastFrozenColumnIndex = _a.lastFrozenColumnIndex,\n        onRowSelectionChange = _a.onRowSelectionChange,\n        row = _a.row,\n        scrollLeft = _a.scrollLeft,\n        isSummaryRow = _a.isSummaryRow;\n    var Renderer = this.props.cellRenderer;\n    var cellElements = [];\n\n    for (var colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      var column = columns[colIdx];\n      var colIsFrozen = isFrozen(column);\n      if (colIdx < colOverscanStartIdx && !colIsFrozen) continue;\n      var key = column.key;\n      cellElements.push(React.createElement(Renderer, {\n        key: key,\n        idx: colIdx,\n        rowIdx: idx,\n        column: column,\n        lastFrozenColumnIndex: lastFrozenColumnIndex,\n        cellMetaData: cellMetaData,\n        rowData: row,\n        expandableOptions: this.getExpandableOptions(key),\n        scrollLeft: colIsFrozen && typeof scrollLeft === 'number' ? scrollLeft : undefined,\n        isRowSelected: isRowSelected,\n        onRowSelectionChange: onRowSelectionChange,\n        isSummaryRow: isSummaryRow\n      }));\n    }\n\n    return cellElements;\n  };\n\n  Row.prototype.getExpandableOptions = function (columnKey) {\n    var subRowDetails = this.props.subRowDetails;\n    if (!subRowDetails) return;\n    var field = subRowDetails.field,\n        expanded = subRowDetails.expanded,\n        children = subRowDetails.children,\n        treeDepth = subRowDetails.treeDepth;\n    return {\n      canExpand: field === columnKey && (children && children.length > 0 || subRowDetails.group === true),\n      field: field,\n      expanded: expanded,\n      children: children,\n      treeDepth: treeDepth,\n      subRowDetails: subRowDetails\n    };\n  };\n\n  Row.prototype.render = function () {\n    var _a = this.props,\n        idx = _a.idx,\n        isRowSelected = _a.isRowSelected,\n        extraClasses = _a.extraClasses,\n        isSummaryRow = _a.isSummaryRow;\n    var className = classNames('rdg-row', \"rdg-row-\" + (idx % 2 === 0 ? 'even' : 'odd'), {\n      'rdg-row-selected': isRowSelected\n    }, extraClasses);\n    var events = !isSummaryRow && {\n      onDragEnter: this.handleDragEnter,\n      onDragOver: this.handleDragOver,\n      onDrop: this.handleDrop\n    };\n    return React.createElement(\"div\", __assign({\n      className: className,\n      style: {\n        width: this.props.width,\n        height: this.props.height\n      }\n    }, events), this.getCells());\n  };\n\n  Row.displayName = 'Row';\n  Row.defaultProps = {\n    cellRenderer: Cell\n  };\n  return Row;\n}(React.Component);\n\nexport default Row;","map":{"version":3,"sources":["../src/Row.tsx"],"names":[],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\n\nimport Cell from './Cell';\nimport { IRowRendererProps } from './common/types';\nimport { isFrozen } from './utils/columnUtils';\n\nexport default class Row<R> extends React.Component<IRowRendererProps<R>> {\n  static displayName = 'Row';\n\n  static defaultProps = {\n    cellRenderer: Cell\n  };\n\n  handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {\n    // Prevent default to allow drop\n    e.preventDefault();\n    const { idx, cellMetaData } = this.props;\n    cellMetaData.onDragEnter(idx);\n  };\n\n  handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'copy';\n  };\n\n  handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    // The default in Firefox is to treat data in dataTransfer as a URL and perform navigation on it, even if the data type used is 'text'\n    // To bypass this, we need to capture and prevent the drop event.\n    e.preventDefault();\n  };\n\n  getCells() {\n    const {\n      cellMetaData,\n      colOverscanEndIdx,\n      colOverscanStartIdx,\n      columns,\n      idx,\n      isRowSelected,\n      lastFrozenColumnIndex,\n      onRowSelectionChange,\n      row,\n      scrollLeft,\n      isSummaryRow\n    } = this.props;\n    const Renderer = this.props.cellRenderer!;\n    const cellElements = [];\n\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n      const colIsFrozen = isFrozen(column);\n\n      if (colIdx < colOverscanStartIdx && !colIsFrozen) continue;\n\n      const { key } = column;\n\n      cellElements.push(\n        <Renderer\n          key={key as string} // FIXME: fix key type\n          idx={colIdx}\n          rowIdx={idx}\n          column={column}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          cellMetaData={cellMetaData}\n          rowData={row}\n          expandableOptions={this.getExpandableOptions(key)}\n          scrollLeft={colIsFrozen && typeof scrollLeft === 'number' ? scrollLeft : undefined}\n          isRowSelected={isRowSelected}\n          onRowSelectionChange={onRowSelectionChange}\n          isSummaryRow={isSummaryRow}\n        />\n      );\n    }\n\n    return cellElements;\n  }\n\n  getExpandableOptions(columnKey: keyof R) {\n    const { subRowDetails } = this.props;\n    if (!subRowDetails) return;\n\n    const { field, expanded, children, treeDepth } = subRowDetails;\n    return {\n      canExpand: field === columnKey && ((children && children.length > 0) || subRowDetails.group === true),\n      field,\n      expanded,\n      children,\n      treeDepth,\n      subRowDetails\n    };\n  }\n\n  render() {\n    const { idx, isRowSelected, extraClasses, isSummaryRow } = this.props;\n    const className = classNames(\n      'rdg-row',\n      `rdg-row-${idx % 2 === 0 ? 'even' : 'odd'}`,\n      { 'rdg-row-selected': isRowSelected },\n      extraClasses\n    );\n\n    const events = !isSummaryRow && {\n      onDragEnter: this.handleDragEnter,\n      onDragOver: this.handleDragOver,\n      onDrop: this.handleDrop\n    };\n\n    return (\n      <div\n        className={className}\n        style={{ width: this.props.width, height: this.props.height }}\n        {...events}\n      >\n        {this.getCells()}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}