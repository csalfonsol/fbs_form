{"ast":null,"code":"import _slicedToArray from\"/home/snw/Documentos/React projects/fbs/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// Librerias\nimport React,{useState}from'react';import{useForm,FormContext}from'react-hook-form';import axios from'axios';// Layout\nimport Container from'react-bootstrap/Container';import Form from'react-bootstrap/Form';// Elementos\nimport Button from'react-bootstrap/Button';// Estilos\nimport'bootstrap/dist/css/bootstrap.min.css';import'../styles/app.css';// Componentes formulario\nimport InformacionPersonalFuncionario from'./section1';import ReferenciasFamiliares from'./section2';import InformacionLaboralFuncionario from'./section3';import InformacionSolicitudDelCredito from'./section4';import DeclaracionAutorizacionFirma from'./section5';// URL del servidor que recibirá los datos\nvar URL_envio='http://3.80.200.194/ords/snw_fonviv/solicitud/crear';// URL del servidor para obtener el monto máximo de una solicitud\nvar URL_monto_maximo='http://3.80.200.194/ords/snw_fonviv/solicitud/monto';function Main(){// Metodos principales de React-hook-form para capturar los datos, manejar validaciones y crear el contexto del formulario\nvar methods=useForm();var register=methods.register,errors=methods.errors,handleSubmit=methods.handleSubmit,watch=methods.watch;// Variables de estado (hooks) y sus Setters\nvar _useState=useState(),_useState2=_slicedToArray(_useState,2),fechaNacimiento=_useState2[0],setFechaNacimiento=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),fechaIngreso=_useState4[0],setFechaIngreso=_useState4[1];var _useState5=useState([// Datagrid de personas a cargo\n[,\"\",\"\"]]),_useState6=_slicedToArray(_useState5,2),personasaCargo=_useState6[0],setPersonasaCargo=_useState6[1];var _useState7=useState([// Datagrid de referencias familiares\n[,\"\",\"\"]]),_useState8=_slicedToArray(_useState7,2),referenciasFamiliares=_useState8[0],setReferenciasFamiliares=_useState8[1];var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),categoria=_useState10[0],setCategoria=_useState10[1];var _useState11=useState(),_useState12=_slicedToArray(_useState11,2),vez=_useState12[0],setVez=_useState12[1];var _useState13=useState(),_useState14=_slicedToArray(_useState13,2),subcategoria=_useState14[0],setSubcategoria=_useState14[1];var _useState15=useState(),_useState16=_slicedToArray(_useState15,2),cardinalidadVivienda=_useState16[0],setCardinalidadVivienda=_useState16[1];var _useState17=useState(),_useState18=_slicedToArray(_useState17,2),primas=_useState18[0],setPrimas=_useState18[1];var _useState19=useState(),_useState20=_slicedToArray(_useState19,2),montoEspecifico=_useState20[0],setMontoEspecifico=_useState20[1];var _useState21=useState(),_useState22=_slicedToArray(_useState21,2),montoMaximo=_useState22[0],setMontoMaximo=_useState22[1];// Funciones para llamar los Setters de los hooks de las variables de estado\nfunction cambiarFechaNacimiento(nuevaFecha){setFechaNacimiento(nuevaFecha);}function cambiarFechaIngreso(nuevaFecha){setFechaIngreso(nuevaFecha);}function cambiarPersonasaCargo(nuevasPersonas){setPersonasaCargo(nuevasPersonas);}// TODO: Buscar la manera de eliminar la primera posicion vacia (Se requiere para que encaje con las columnas del datagrid \nfunction cambiarReferenciasFamiliares(nuevasReferencias){setReferenciasFamiliares(nuevasReferencias);}function cambiarCategoria(nuevaCategoria){setCategoria(nuevaCategoria);recalcularMontoMaximo(nuevaCategoria);}function cambiarVez(nuevaVez){setVez(nuevaVez);}function cambiarSubcategoria(nuevaSubcategoria){setSubcategoria(nuevaSubcategoria);}function cambiarCardinalidadVivienda(nuevaCardinalidad){setCardinalidadVivienda(nuevaCardinalidad);}function cambiarPrimas(nuevaPrima){setPrimas(nuevaPrima);}function cambiarMontoEspecifico(nuevoMonto){setMontoEspecifico(nuevoMonto);}function cambiarMontoMaximo(nuevoMontoMaximo){setMontoMaximo(nuevoMontoMaximo);}// Funcion que intenta recalcular el monto máximo cada vez que cambia alguno de los campos que lo determinan\n// (Entidad, cargo y grado, o Categoria) \nfunction recalcularMontoMaximo(nuevaCategoria){if(nuevaCategoria===undefined){// Se verifica si se tienen los parámetros necesarios para hacer el cálculo\nif(watch('entidad')!=='0'&&watch('cargo_grado')!=='0'&&categoria!==undefined){var data=JSON.stringify({categoria:categoria,cargo_grado:watch('cargo_grado'),entidad:watch('entidad')});axios.post(URL_monto_maximo,data,{headers:{'Content-Type':'application/json'}}).then(function(response){cambiarMontoMaximo(response.data.monto);if(montoEspecifico>response.data.monto){cambiarMontoEspecifico(response.data.monto);}}).catch(function(error){cambiarMontoMaximo('No especificado');// console.log(error)\n});}}else{// Se verifica si se tienen los parámetros necesarios para hacer el cálculo (ya se tiene categoria)\nif(watch('entidad')!=='0'&&watch('cargo_grado')!=='0'){var _data=JSON.stringify({categoria:nuevaCategoria,cargo_grado:watch('cargo_grado'),entidad:watch('entidad')});axios.post(URL_monto_maximo,_data,{headers:{'Content-Type':'application/json'}}).then(function(response){cambiarMontoMaximo(response.data.monto);if(montoEspecifico>response.data.monto){cambiarMontoEspecifico(response.data.monto);}// console.log(response);\n}).catch(function(error){cambiarMontoMaximo('No especificado');// console.log(error)\n});}}}// Funcion que se ejecuta al enviar el formulario, si las validaciones son exitosas\nvar onSubmit=function onSubmit(data){var fechaFormateada=fechaNacimiento.getDate().toString()+'/'+(fechaNacimiento.getMonth()+1).toString()+'/'+fechaNacimiento.getFullYear().toString();data.fechaNacimiento=fechaFormateada;fechaFormateada=fechaIngreso.getDate().toString()+'/'+(fechaIngreso.getMonth()+1).toString()+'/'+fechaIngreso.getFullYear().toString();data.fechaIngreso=fechaFormateada;// Se acoplan los datos de los datagrids NO implícitos por el register de react-hook-form\ndata.personasaCargo=personasaCargo;data.referenciasFamiliares=referenciasFamiliares;data.categoria=categoria;data.vez=vez;data.subcategoria=subcategoria;data.cardinalidadvivienda=cardinalidadVivienda;data.primas=primas;data.montoEspecifico=montoEspecifico;console.log(data);axios.post(URL_envio,data).then(function(response){console.log(response);}).catch(function(error){console.log(error);});};return React.createElement(Container,{fluid:true},React.createElement(\"h2\",{className:\"text-center mb-5\"},\"SOLICITUD DE CR\\xC9DITO\"),\" \",React.createElement(FormContext,methods,React.createElement(Form,{onSubmit:handleSubmit(onSubmit)},React.createElement(InformacionPersonalFuncionario,{fechaNacimiento:fechaNacimiento,cambiarFechaNacimiento:cambiarFechaNacimiento,personasaCargo:personasaCargo,cambiarPersonasaCargo:cambiarPersonasaCargo}),React.createElement(ReferenciasFamiliares,{referenciasFamiliares:referenciasFamiliares,cambiarReferenciasFamiliares:cambiarReferenciasFamiliares}),React.createElement(InformacionLaboralFuncionario,{fechaIngreso:fechaIngreso,cambiarFechaIngreso:cambiarFechaIngreso,recalcularMontoMaximo:recalcularMontoMaximo}),React.createElement(InformacionSolicitudDelCredito,{categoria:categoria,cambiarCategoria:cambiarCategoria,vez:vez,cambiarVez:cambiarVez,subcategoria:subcategoria,cambiarSubcategoria:cambiarSubcategoria,cardinalidadVivienda:cardinalidadVivienda,cambiarCardinalidadVivienda:cambiarCardinalidadVivienda,primas:primas,cambiarPrimas:cambiarPrimas,montoEspecifico:montoEspecifico,cambiarMontoEspecifico:cambiarMontoEspecifico,montoMaximo:montoMaximo,cambiarMontoMaximo:cambiarMontoMaximo,recalcularMontoMaximo:recalcularMontoMaximo}),React.createElement(Button,{size:\"lg\",variant:\"primary\",type:\"submit\"},\"Enviar\"))));}export default Main;","map":{"version":3,"sources":["/home/snw/Documentos/React projects/fbs/src/form/main.js"],"names":["React","useState","useForm","FormContext","axios","Container","Form","Button","InformacionPersonalFuncionario","ReferenciasFamiliares","InformacionLaboralFuncionario","InformacionSolicitudDelCredito","DeclaracionAutorizacionFirma","URL_envio","URL_monto_maximo","Main","methods","register","errors","handleSubmit","watch","fechaNacimiento","setFechaNacimiento","fechaIngreso","setFechaIngreso","personasaCargo","setPersonasaCargo","referenciasFamiliares","setReferenciasFamiliares","categoria","setCategoria","vez","setVez","subcategoria","setSubcategoria","cardinalidadVivienda","setCardinalidadVivienda","primas","setPrimas","montoEspecifico","setMontoEspecifico","montoMaximo","setMontoMaximo","cambiarFechaNacimiento","nuevaFecha","cambiarFechaIngreso","cambiarPersonasaCargo","nuevasPersonas","cambiarReferenciasFamiliares","nuevasReferencias","cambiarCategoria","nuevaCategoria","recalcularMontoMaximo","cambiarVez","nuevaVez","cambiarSubcategoria","nuevaSubcategoria","cambiarCardinalidadVivienda","nuevaCardinalidad","cambiarPrimas","nuevaPrima","cambiarMontoEspecifico","nuevoMonto","cambiarMontoMaximo","nuevoMontoMaximo","undefined","data","JSON","stringify","cargo_grado","entidad","post","headers","then","response","monto","catch","error","onSubmit","fechaFormateada","getDate","toString","getMonth","getFullYear","cardinalidadvivienda","console","log"],"mappings":"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","sourcesContent":["// Librerias\nimport React, { useState } from 'react';\nimport { useForm, FormContext } from 'react-hook-form'\nimport axios from 'axios';\n\n// Layout\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\n\n// Elementos\nimport Button from 'react-bootstrap/Button';\n\n// Estilos\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../styles/app.css';\n\n// Componentes formulario\nimport InformacionPersonalFuncionario from './section1';\nimport ReferenciasFamiliares from './section2';\nimport InformacionLaboralFuncionario from './section3';\nimport InformacionSolicitudDelCredito from './section4';\nimport DeclaracionAutorizacionFirma from './section5';\n\n\n\n// URL del servidor que recibirá los datos\nconst URL_envio = 'http://3.80.200.194/ords/snw_fonviv/solicitud/crear'\n\n// URL del servidor para obtener el monto máximo de una solicitud\nconst URL_monto_maximo = 'http://3.80.200.194/ords/snw_fonviv/solicitud/monto'\n\n\nfunction Main() {\n\n  // Metodos principales de React-hook-form para capturar los datos, manejar validaciones y crear el contexto del formulario\n  const methods = useForm();\n  const { register, errors, handleSubmit, watch } = methods;\n  \n  // Variables de estado (hooks) y sus Setters\n  const [fechaNacimiento, setFechaNacimiento] = useState(); \n  const [fechaIngreso, setFechaIngreso] = useState(); \n  const [personasaCargo, setPersonasaCargo] = useState([ // Datagrid de personas a cargo\n    [,\"\", \"\",]\n  ]);\n  const [referenciasFamiliares, setReferenciasFamiliares] = useState([ // Datagrid de referencias familiares\n    [,\"\", \"\",]\n  ]);  \n  const [categoria, setCategoria] = useState();  \n  const [vez, setVez] = useState();  \n  const [subcategoria, setSubcategoria] = useState();  \n  const [cardinalidadVivienda, setCardinalidadVivienda] = useState();  \n  const [primas, setPrimas] = useState();  \n  const [montoEspecifico, setMontoEspecifico] = useState();\n  const [montoMaximo, setMontoMaximo] = useState();\n  \n \n  // Funciones para llamar los Setters de los hooks de las variables de estado\n  function cambiarFechaNacimiento(nuevaFecha) { setFechaNacimiento(nuevaFecha); }\n  function cambiarFechaIngreso(nuevaFecha) { setFechaIngreso(nuevaFecha); }\n  function cambiarPersonasaCargo(nuevasPersonas) { setPersonasaCargo(nuevasPersonas); } // TODO: Buscar la manera de eliminar la primera posicion vacia (Se requiere para que encaje con las columnas del datagrid \n  function cambiarReferenciasFamiliares(nuevasReferencias) { setReferenciasFamiliares(nuevasReferencias); } \n  function cambiarCategoria(nuevaCategoria) { setCategoria(nuevaCategoria); recalcularMontoMaximo(nuevaCategoria) }\n  function cambiarVez(nuevaVez) { setVez(nuevaVez); }\n  function cambiarSubcategoria(nuevaSubcategoria) { setSubcategoria(nuevaSubcategoria); } \n  function cambiarCardinalidadVivienda(nuevaCardinalidad) { setCardinalidadVivienda(nuevaCardinalidad); } \n  function cambiarPrimas(nuevaPrima) { setPrimas(nuevaPrima); }   \n  function cambiarMontoEspecifico(nuevoMonto) { setMontoEspecifico(nuevoMonto); } \n  function cambiarMontoMaximo(nuevoMontoMaximo) { setMontoMaximo(nuevoMontoMaximo); } \n  \n\n  // Funcion que intenta recalcular el monto máximo cada vez que cambia alguno de los campos que lo determinan\n  // (Entidad, cargo y grado, o Categoria) \n  function recalcularMontoMaximo(nuevaCategoria) { \n    if (nuevaCategoria === undefined){\n\n      // Se verifica si se tienen los parámetros necesarios para hacer el cálculo\n      if (watch('entidad') !== '0' && watch('cargo_grado') !== '0' && categoria !== undefined){\n        let data = JSON.stringify({\n          categoria: categoria,\n          cargo_grado: watch('cargo_grado'),\n          entidad: watch('entidad')\n        })\n\n        axios.post(URL_monto_maximo, data, {\n          headers: {\n              'Content-Type': 'application/json',\n          }\n        })\n        .then(response => {\n          cambiarMontoMaximo(response.data.monto)\n          if (montoEspecifico > response.data.monto){ \n            cambiarMontoEspecifico(response.data.monto)          \n          }\n        })\n        .catch(error => {          \n          cambiarMontoMaximo('No especificado')\n          // console.log(error)\n        });  \n      }      \n    }\n    else {\n\n      // Se verifica si se tienen los parámetros necesarios para hacer el cálculo (ya se tiene categoria)\n      if (watch('entidad') !== '0' && watch('cargo_grado') !== '0'){\n        let data = JSON.stringify({\n          categoria: nuevaCategoria,\n          cargo_grado: watch('cargo_grado'),\n          entidad: watch('entidad')\n        })\n\n        axios.post(URL_monto_maximo, data, {\n          headers: {\n              'Content-Type': 'application/json',\n          }\n        })\n        .then(response => {\n          cambiarMontoMaximo(response.data.monto)\n          if (montoEspecifico > response.data.monto){ \n            cambiarMontoEspecifico(response.data.monto)          \n          }\n          // console.log(response);\n        })\n        .catch(error => {          \n          cambiarMontoMaximo('No especificado')\n          // console.log(error)\n        });  \n      }      \n    }\n  } \n\n  \n\n  \n  // Funcion que se ejecuta al enviar el formulario, si las validaciones son exitosas\n  const onSubmit = data => {\n         \n    let fechaFormateada = \n      (fechaNacimiento.getDate()).toString() + '/' +\n      (fechaNacimiento.getMonth()+1).toString() + '/' + \n      (fechaNacimiento.getFullYear()).toString();\n\n    data.fechaNacimiento = fechaFormateada;\n      \n      fechaFormateada = \n      (fechaIngreso.getDate()).toString() + '/' +\n      (fechaIngreso.getMonth()+1).toString() + '/' + \n      (fechaIngreso.getFullYear()).toString();\n\n    data.fechaIngreso = fechaFormateada;\n\n    // Se acoplan los datos de los datagrids NO implícitos por el register de react-hook-form\n    data.personasaCargo = personasaCargo;\n    data.referenciasFamiliares = referenciasFamiliares;  \n    data.categoria = categoria\n    data.vez = vez\n    data.subcategoria = subcategoria\n    data.cardinalidadvivienda = cardinalidadVivienda\n    data.primas = primas\n    data.montoEspecifico = montoEspecifico\n\n\n    console.log(data);\n    \n    axios.post(URL_envio, data)\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => {          \n          console.log(error)\n        });         \n\n    \n  };   \n\n\n  return (    \n\n    <Container fluid>\n      \n      <h2 className=\"text-center mb-5\">SOLICITUD DE CRÉDITO</h2> {/*Encabezado del formulario*/}    \n    \n      <FormContext {...methods}>\n        <Form onSubmit = {handleSubmit(onSubmit)} >          \n                    \n          <InformacionPersonalFuncionario \n            fechaNacimiento={fechaNacimiento} cambiarFechaNacimiento={cambiarFechaNacimiento} \n            personasaCargo={personasaCargo} cambiarPersonasaCargo={cambiarPersonasaCargo}/>\n\n          <ReferenciasFamiliares \n            referenciasFamiliares={referenciasFamiliares} cambiarReferenciasFamiliares={cambiarReferenciasFamiliares}/>\n\n          <InformacionLaboralFuncionario             \n            fechaIngreso={fechaIngreso} cambiarFechaIngreso={cambiarFechaIngreso}\n            recalcularMontoMaximo={recalcularMontoMaximo}/>\n  \n          <InformacionSolicitudDelCredito \n            categoria={categoria} cambiarCategoria={cambiarCategoria}\n            vez={vez} cambiarVez={cambiarVez}\n            subcategoria={subcategoria} cambiarSubcategoria={cambiarSubcategoria}\n            cardinalidadVivienda={cardinalidadVivienda} cambiarCardinalidadVivienda={cambiarCardinalidadVivienda}\n            primas={primas} cambiarPrimas={cambiarPrimas}\n            montoEspecifico={montoEspecifico} cambiarMontoEspecifico={cambiarMontoEspecifico}\n            montoMaximo={montoMaximo} cambiarMontoMaximo={cambiarMontoMaximo}\n            recalcularMontoMaximo={recalcularMontoMaximo}/>\n\n\n          <Button size=\"lg\" variant=\"primary\" type=\"submit\">{/*Enviar formulario*/}\n            Enviar  \n          </Button>   \n\n          {/* Seccion de firma y autorizacion\n             <DeclaracionAutorizacionFirma />\n          */} \n          \n          {/*Aqui va el boton enviar */}                \n\n        </Form>\n      </FormContext>\n\n    </Container>\n  );\n}\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}