{"ast":null,"code":"import React from 'react';\nimport { SelectCellFormatter } from './formatters'; // TODO: fix type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport var SelectColumn = {\n  key: 'select-row',\n  name: '',\n  width: 60,\n  filterable: false,\n  frozen: true,\n  headerRenderer: function (props) {\n    return React.createElement(SelectCellFormatter, {\n      value: props.allRowsSelected,\n      onChange: props.onAllRowsSelectionChange\n    });\n  },\n  cellContentRenderer: function (props) {\n    return props.isSummaryRow ? null : React.createElement(SelectCellFormatter, {\n      value: props.isRowSelected,\n      onChange: function (value, isShiftClick) {\n        return props.onRowSelectionChange(props.rowIdx, props.rowData, value, isShiftClick);\n      }\n    });\n  }\n};","map":{"version":3,"sources":["../src/Columns.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,mBAAT,QAAoC,cAApC,C,CAGA;AACA;;AACA,OAAO,IAAM,YAAY,GAA0B;AACjD,EAAA,GAAG,EAAE,YAD4C;AAEjD,EAAA,IAAI,EAAE,EAF2C;AAGjD,EAAA,KAAK,EAAE,EAH0C;AAIjD,EAAA,UAAU,EAAE,KAJqC;AAKjD,EAAA,MAAM,EAAE,IALyC;AAMjD,EAAA,cAAc,EAAA,UAAC,KAAD,EAAM;AAClB,WACE,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAoB;AAClB,MAAA,KAAK,EAAE,KAAK,CAAC,eADK;AAElB,MAAA,QAAQ,EAAE,KAAK,CAAC;AAFE,KAApB,CADF;AAMD,GAbgD;AAcjD,EAAA,mBAAmB,EAAA,UAAC,KAAD,EAAM;AACvB,WAAO,KAAK,CAAC,YAAN,GAAqB,IAArB,GACL,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAoB;AAClB,MAAA,KAAK,EAAE,KAAK,CAAC,aADK;AAElB,MAAA,QAAQ,EAAE,UAAC,KAAD,EAAQ,YAAR,EAAoB;AAAK,eAAA,KAAK,CAAC,oBAAN,CAA2B,KAAK,CAAC,MAAjC,EAAyC,KAAK,CAAC,OAA/C,EAAwD,KAAxD,EAAA,YAAA,CAAA;AAA4E;AAF7F,KAApB,CADF;AAMD;AArBgD,CAA5C","sourcesContent":["import React from 'react';\nimport { SelectCellFormatter } from './formatters';\nimport { Column } from './common/types';\n\n// TODO: fix type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any, any> = {\n  key: 'select-row',\n  name: '',\n  width: 60,\n  filterable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  cellContentRenderer(props) {\n    return props.isSummaryRow ? null : (\n      <SelectCellFormatter\n        value={props.isRowSelected}\n        onChange={(value, isShiftClick) => props.onRowSelectionChange(props.rowIdx, props.rowData, value, isShiftClick)}\n      />\n    );\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}