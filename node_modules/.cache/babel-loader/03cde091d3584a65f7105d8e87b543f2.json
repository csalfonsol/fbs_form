{"ast":null,"code":"import React, { memo } from 'react';\nimport Row from './Row';\nimport { getScrollbarSize } from './utils';\n\nvar noop = function () {};\n\nfunction RowRenderer(_a) {\n  var cellMetaData = _a.cellMetaData,\n      colOverscanEndIdx = _a.colOverscanEndIdx,\n      colOverscanStartIdx = _a.colOverscanStartIdx,\n      columnMetrics = _a.columnMetrics,\n      idx = _a.idx,\n      rowData = _a.rowData,\n      rowHeight = _a.rowHeight,\n      scrollLeft = _a.scrollLeft;\n  return React.createElement(Row, {\n    idx: idx,\n    row: rowData,\n    width: columnMetrics.totalColumnWidth + getScrollbarSize(),\n    height: rowHeight,\n    columns: columnMetrics.columns,\n    isRowSelected: false,\n    onRowSelectionChange: noop,\n    cellMetaData: cellMetaData,\n    colOverscanStartIdx: colOverscanStartIdx,\n    colOverscanEndIdx: colOverscanEndIdx,\n    lastFrozenColumnIndex: columnMetrics.lastFrozenColumnIndex,\n    scrollLeft: scrollLeft,\n    isSummaryRow: true\n  });\n}\n\nexport default memo(RowRenderer);","map":{"version":3,"sources":["../src/SummaryRowRenderer.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,IAAgB,IAAhB,QAA4B,OAA5B;AAEA,OAAO,GAAP,MAAgB,OAAhB;AAEA,SAAS,gBAAT,QAAiC,SAAjC;;AAEA,IAAM,IAAI,GAAG,YAAA,CAAQ,CAArB;;AAaA,SAAS,WAAT,CAA2C,EAA3C,EASgC;MAR9B,YAAA,GAAA,EAAA,CAAA,Y;MACA,iBAAA,GAAA,EAAA,CAAA,iB;MACA,mBAAA,GAAA,EAAA,CAAA,mB;MACA,aAAA,GAAA,EAAA,CAAA,a;MACA,GAAA,GAAA,EAAA,CAAA,G;MACA,OAAA,GAAA,EAAA,CAAA,O;MACA,SAAA,GAAA,EAAA,CAAA,S;MACA,UAAA,GAAA,EAAA,CAAA,U;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AACF,IAAA,GAAG,EAAE,GADH;AAEF,IAAA,GAAG,EAAE,OAFH;AAGF,IAAA,KAAK,EAAE,aAAa,CAAC,gBAAd,GAAiC,gBAAgB,EAHtD;AAIF,IAAA,MAAM,EAAE,SAJN;AAKF,IAAA,OAAO,EAAE,aAAa,CAAC,OALrB;AAMF,IAAA,aAAa,EAAE,KANb;AAOF,IAAA,oBAAoB,EAAE,IAPpB;AAQF,IAAA,YAAY,EAAE,YARZ;AASF,IAAA,mBAAmB,EAAE,mBATnB;AAUF,IAAA,iBAAiB,EAAE,iBAVjB;AAWF,IAAA,qBAAqB,EAAE,aAAa,CAAC,qBAXnC;AAYF,IAAA,UAAU,EAAE,UAZV;AAaF,IAAA,YAAY,EAAA;AAbV,GAAJ,CADF;AAiBD;;AAED,eAAe,IAAI,CAAC,WAAD,CAAnB","sourcesContent":["import React, { memo } from 'react';\n\nimport Row from './Row';\nimport { RowRendererProps } from './RowRenderer';\nimport { getScrollbarSize } from './utils';\n\nconst noop = () => {};\n\ntype SummaryRowRendererProps<R, K extends keyof R> = Pick<RowRendererProps<R, K>,\n| 'idx'\n| 'rowData'\n| 'columnMetrics'\n| 'cellMetaData'\n| 'colOverscanEndIdx'\n| 'colOverscanStartIdx'\n| 'rowHeight'\n| 'scrollLeft'\n>;\n\nfunction RowRenderer<R, K extends keyof R>({\n  cellMetaData,\n  colOverscanEndIdx,\n  colOverscanStartIdx,\n  columnMetrics,\n  idx,\n  rowData,\n  rowHeight,\n  scrollLeft\n}: SummaryRowRendererProps<R, K>) {\n  return (\n    <Row<R>\n      idx={idx}\n      row={rowData}\n      width={columnMetrics.totalColumnWidth + getScrollbarSize()}\n      height={rowHeight}\n      columns={columnMetrics.columns}\n      isRowSelected={false}\n      onRowSelectionChange={noop}\n      cellMetaData={cellMetaData}\n      colOverscanStartIdx={colOverscanStartIdx}\n      colOverscanEndIdx={colOverscanEndIdx}\n      lastFrozenColumnIndex={columnMetrics.lastFrozenColumnIndex}\n      scrollLeft={scrollLeft}\n      isSummaryRow\n    />\n  );\n}\n\nexport default memo(RowRenderer) as <R, K extends keyof R>(props: SummaryRowRendererProps<R, K>) => JSX.Element;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}