{"ast":null,"code":"import * as React from 'react';\nimport { createContext, useContext, createElement, useState as useState$2, useRef as useRef$2, useEffect as useEffect$2, isValidElement, cloneElement, Fragment } from 'react';\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit'\n};\nconst RADIO_INPUT = 'radio';\nconst FILE_INPUT = 'file';\nconst VALUE = 'value';\nconst UNDEFINED = 'undefined';\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\n\nfunction attachEventListeners({\n  field,\n  handleChange,\n  isRadioOrCheckbox\n}) {\n  const {\n    ref\n  } = field;\n\n  if (ref.addEventListener) {\n    ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n\nvar isUndefined = val => val === undefined;\n\nvar isNullOrUndefined = value => value === null || isUndefined(value);\n\nvar isArray = value => Array.isArray(value);\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nconst isKey = value => !isArray(value) && (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nconst stringToPath = string => {\n  const result = [];\n  string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\n    result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\n  });\n  return result;\n};\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || isArray(objValue) ? objValue : !isNaN(tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar transformToNestObject = data => Object.entries(data).reduce((previous, [key, value]) => {\n  if (REGEX_IS_DEEP_PROP.test(key)) {\n    set(previous, key, value);\n    return previous;\n  }\n\n  return Object.assign(Object.assign({}, previous), {\n    [key]: value\n  });\n}, {});\n\nvar get = (obj, path, defaultValue) => {\n  const result = path.split(/[,[\\].]+?/).filter(Boolean).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? obj[path] || defaultValue : result;\n};\n\nvar focusErrorField = (fields, fieldErrors) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n          break;\n        }\n      }\n    }\n  }\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\n  if (ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n\nvar isRadioInput = type => type === RADIO_INPUT;\n\nvar isCheckBoxInput = type => type === 'checkbox';\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\n  if (!field) {\n    return;\n  }\n\n  const {\n    ref,\n    ref: {\n      name,\n      type\n    },\n    mutationWatcher\n  } = field;\n\n  if (!type) {\n    delete fields[name];\n    return;\n  }\n\n  const fieldValue = fields[name];\n\n  if ((isRadioInput(type) || isCheckBoxInput(type)) && fieldValue) {\n    const {\n      options\n    } = fieldValue;\n\n    if (isArray(options) && options.length) {\n      options.forEach(({\n        ref,\n        mutationWatcher\n      }, index) => {\n        if (ref && isDetached(ref) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          options.splice(index, 1);\n        }\n      });\n\n      if (options && !options.length) {\n        delete fields[name];\n      }\n    } else {\n      delete fields[name];\n    }\n  } else if (isDetached(ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n\nconst defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = options => isArray(options) ? options.reduce((previous, {\n  ref: {\n    checked,\n    value\n  }\n}) => checked ? {\n  isValid: true,\n  value\n} : previous, defaultReturn) : defaultReturn;\n\nvar getMultipleSelectValue = options => [...options].filter(({\n  selected\n}) => selected).map(({\n  value\n}) => value);\n\nvar isFileInput = type => type === FILE_INPUT;\n\nvar isMultipleSelect = type => type === 'select-multiple';\n\nvar isEmptyString = value => value === '';\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(({\n        ref: {\n          checked\n        }\n      }) => checked).map(({\n        ref: {\n          value\n        }\n      }) => value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    const {\n      checked,\n      value,\n      attributes\n    } = options[0].ref;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || isEmptyString(value) ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fields, ref) {\n  const {\n    type,\n    name,\n    options,\n    value,\n    files\n  } = ref;\n  const field = fields[name];\n\n  if (isFileInput(type)) {\n    return files;\n  }\n\n  if (isRadioInput(type)) {\n    return field ? getRadioValue(field.options).value : '';\n  }\n\n  if (isMultipleSelect(type)) {\n    return getMultipleSelectValue(options);\n  }\n\n  if (isCheckBoxInput(type)) {\n    return field ? getCheckboxValue(field.options).value : false;\n  }\n\n  return value;\n}\n\nvar isString = value => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\n  const output = {};\n  const isSearchString = isString(search);\n  const isSearchArray = isArray(search);\n  const isNest = search && search.nest;\n\n  for (const name in fields) {\n    if (isUndefined(search) || isNest || isSearchString && name.startsWith(search) || isSearchArray && search.find(data => name.startsWith(data))) {\n      output[name] = getFieldValue(fields, fields[name].ref);\n    }\n  }\n\n  return output;\n};\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nvar compareObject = (objectA = {}, objectB = {}) => Object.entries(objectA).reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true);\n\nvar isSameError = (error, {\n  type,\n  types,\n  message\n}) => {\n  return isObject(error) && error.type === type && error.message === message && compareObject(error.types, types);\n};\n\nfunction shouldUpdateWithError({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation\n}) {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name) || existFieldError && existFieldError.isManual) {\n    return false;\n  }\n\n  if (isFormValid !== isFieldValid || !isFormValid && !existFieldError || isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name)) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n\nvar isRegex = value => value instanceof RegExp;\n\nvar getValueAndMessage = validationData => {\n  const isPureObject = isObject(validationData) && !isRegex(validationData);\n  return {\n    value: isPureObject ? validationData.value : validationData,\n    message: isPureObject ? validationData.message : ''\n  };\n};\n\nvar isFunction = value => typeof value === 'function';\n\nvar isBoolean = value => typeof value === 'boolean';\n\nfunction getValidateError(result, ref, type = 'validate') {\n  const isStringValue = isString(result);\n\n  if (isStringValue || isBoolean(result) && !result) {\n    const message = isStringValue ? result : '';\n    return {\n      type,\n      message,\n      ref\n    };\n  }\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\n  if (!validateAllFieldCriteria) {\n    return {};\n  }\n\n  const error = errors[name];\n  return Object.assign(Object.assign({}, error), {\n    types: Object.assign(Object.assign({}, error && error.types ? error.types : {}), {\n      [type]: message || true\n    })\n  });\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, {\n  ref,\n  ref: {\n    type,\n    value,\n    name,\n    valueAsNumber,\n    valueAsDate\n  },\n  options,\n  required,\n  maxLength,\n  minLength,\n  min,\n  max,\n  pattern,\n  validate\n}) => {\n  const fields = fieldsRef.current;\n  const error = {};\n  const isRadio = isRadioInput(type);\n  const isCheckBox = isCheckBoxInput(type);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = isEmptyString(value);\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n\n    if (!validateAllFieldCriteria) {\n      return error;\n    }\n  };\n\n  if (required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid)) {\n    const message = isString(required) ? required : getValueAndMessage(required).message;\n    error[name] = Object.assign({\n      type: INPUT_VALIDATION_RULES.required,\n      message,\n      ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref\n    }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n    if (!validateAllFieldCriteria) {\n      return error;\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const {\n      value: maxValue,\n      message: maxMessage\n    } = getValueAndMessage(max);\n    const {\n      value: minValue,\n      message: minMessage\n    } = getValueAndMessage(min);\n\n    if (type === 'number' || !type && !isNaN(value)) {\n      const valueNumber = valueAsNumber || parseFloat(value);\n\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate = valueAsDate || new Date(value);\n\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax = maxLength && inputLength > maxLengthValue;\n    const exceedMin = minLength && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const {\n      value: patternValue,\n      message: patternMessage\n    } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldValue(fields, ref);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      const validateFunctions = Object.entries(validate);\n      const validationResult = await new Promise(resolve => {\n        validateFunctions.reduce(async (previous, [key, validate], index) => {\n          if (!isEmptyObject((await previous)) && !validateAllFieldCriteria || !isFunction(validate)) {\n            return resolve(previous);\n          }\n\n          let result;\n          const validateResult = await validate(fieldValue);\n          const validateError = getValidateError(validateResult, validateRef, key);\n\n          if (validateError) {\n            result = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              error[name] = result;\n            }\n          } else {\n            result = previous;\n          }\n\n          return validateFunctions.length - 1 === index ? resolve(result) : result;\n        }, {});\n      });\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: validateRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner) ? error.inner.reduce((previous, {\n  path,\n  message,\n  type\n}) => Object.assign(Object.assign({}, previous), previous[path] && validateAllFieldCriteria ? {\n  [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message)\n} : {\n  [path]: previous[path] || Object.assign({\n    message,\n    type\n  }, validateAllFieldCriteria ? {\n    types: {\n      [type]: message || true\n    }\n  } : {})\n}), {}) : {\n  [error.path]: {\n    message: error.message,\n    type: error.type\n  }\n};\n\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data) {\n  try {\n    return {\n      values: await validationSchema.validate(data, {\n        abortEarly: false\n      }),\n      errors: {}\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria))\n    };\n  }\n}\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name]) ? get(defaultValues, name, defaultValue) : defaultValues[name];\n\nfunction flatArray(list) {\n  return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\n  const getInnerPath = (value, key, isObject) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values) ? values.map((value, key) => getInnerPath(value, key)) : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\n};\n\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues, watchFieldArray) => {\n  let value;\n\n  if (isEmptyObject(fieldValues)) {\n    value = watchFieldArray ? watchFieldArray : undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    watchFields.add(fieldName);\n    value = fieldValues[fieldName];\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (isArray(watchFieldArray) && isArray(value) && value.length !== watchFieldArray.length) {\n      value = watchFieldArray;\n    }\n\n    if (!isUndefined(value)) {\n      getPath$1(fieldName, value).forEach(name => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value) ? isObject(combinedDefaultValues) ? getDefaultValue(combinedDefaultValues, fieldName) : combinedDefaultValues : value;\n};\n\nvar skipValidation = ({\n  hasError,\n  isBlurEvent,\n  isOnSubmit,\n  isReValidateOnSubmit,\n  isOnBlur,\n  isReValidateOnBlur,\n  isSubmitted\n}) => isOnSubmit && isReValidateOnSubmit || isOnSubmit && !isSubmitted || isOnBlur && !isBlurEvent && !hasError || isReValidateOnBlur && !isBlurEvent && hasError || isReValidateOnSubmit && isSubmitted;\n\nvar getFieldValueByName = (fields, name) => {\n  const results = transformToNestObject(getFieldsValues(fields));\n  return name ? get(results, name, results) : results;\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\n  let isMatch = false;\n\n  if (!isArray(referenceArray) || !isArray(differenceArray) || referenceArray.length !== differenceArray.length) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    if (isMatch) {\n      break;\n    }\n\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (!dataB || Object.keys(dataA).length !== Object.keys(dataB).length) {\n      isMatch = true;\n      break;\n    }\n\n    for (const key in dataA) {\n      if (!dataB[key] || dataA[key] !== dataB[key]) {\n        isMatch = true;\n        break;\n      }\n    }\n  }\n\n  return isMatch;\n}\n\nconst isMatchFieldArrayName = (name, searchName) => name.startsWith(`${searchName}[`);\n\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => isMatchFieldArrayName(name, current) ? true : prev, false);\n\nvar isFileListObject = data => typeof FileList !== UNDEFINED && data instanceof FileList;\n\nfunction onDomRemove(element, onDetachCallback) {\n  const observer = new MutationObserver(() => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nconst unsetObject = target => {\n  for (const key in target) {\n    const data = target[key];\n    const isArrayObject = isArray(data);\n\n    if ((isObject(data) || isArrayObject) && !data.ref) {\n      unsetObject(data);\n    }\n\n    if ((isUndefined(data) || isEmptyObject(data) || isArrayObject && !target[key].filter(Boolean).length) && !isFileListObject(target)) {\n      delete target[key];\n    }\n  }\n\n  return target;\n};\n\nconst unset = (target, paths) => {\n  paths.forEach(path => {\n    set(target, path, undefined);\n  });\n  return unsetObject(target);\n};\n\nvar modeChecker = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange\n});\n\nconst {\n  useRef,\n  useState,\n  useCallback,\n  useEffect\n} = React;\n\nfunction useForm({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  validationSchema,\n  defaultValues = {},\n  submitFocusError = true,\n  validateCriteriaMode\n} = {}) {\n  const fieldsRef = useRef({});\n  const validateAllFieldCriteria = validateCriteriaMode === 'all';\n  const errorsRef = useRef({});\n  const touchedFieldsRef = useRef({});\n  const watchFieldArrayRef = useRef({});\n  const watchFieldsRef = useRef(new Set());\n  const dirtyFieldsRef = useRef(new Set());\n  const fieldsWithValidationRef = useRef(new Set());\n  const validFieldsRef = useRef(new Set());\n  const isValidRef = useRef(true);\n  const defaultRenderValuesRef = useRef({});\n  const defaultValuesRef = useRef(defaultValues);\n  const isUnMount = useRef(false);\n  const isWatchAllRef = useRef(false);\n  const isSubmittedRef = useRef(false);\n  const isDirtyRef = useRef(false);\n  const submitCountRef = useRef(0);\n  const isSubmittingRef = useRef(false);\n  const handleChangeRef = useRef();\n  const resetFieldArrayFunctionRef = useRef({});\n  const fieldArrayNamesRef = useRef(new Set());\n  const [, render] = useState();\n  const {\n    isOnBlur,\n    isOnSubmit\n  } = useRef(modeChecker(mode)).current;\n  const isWindowUndefined = typeof window === UNDEFINED;\n  const isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(window.HTMLElement);\n  const isProxyEnabled = isWeb && 'Proxy' in window;\n  const readFormStateRef = useRef({\n    dirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnSubmit: isReValidateOnSubmit\n  } = useRef(modeChecker(reValidateMode)).current;\n  const reRender = useCallback(() => {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n  const shouldRenderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\n    let shouldReRender = shouldRender || shouldUpdateWithError({\n      errors: errorsRef.current,\n      error,\n      name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n\n    if (isEmptyObject(error)) {\n      if (fieldsWithValidationRef.current.has(name) || validationSchema) {\n        validFieldsRef.current.add(name);\n        shouldReRender = shouldReRender || get(errorsRef.current, name);\n      }\n\n      errorsRef.current = unset(errorsRef.current, [name]);\n    } else {\n      validFieldsRef.current.delete(name);\n      shouldReRender = shouldReRender || !get(errorsRef.current, name);\n      set(errorsRef.current, name, error[name]);\n    }\n\n    if (shouldReRender && !skipReRender) {\n      reRender();\n      return true;\n    }\n  }, [reRender, validationSchema]);\n  const setFieldValue = useCallback((name, rawValue) => {\n    const field = fieldsRef.current[name];\n\n    if (!field) {\n      return false;\n    }\n\n    const ref = field.ref;\n    const options = field.options;\n    const {\n      type\n    } = ref;\n    const value = isWeb && ref instanceof window.HTMLElement && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(type) && options) {\n      options.forEach(({\n        ref: radioRef\n      }) => radioRef.checked = radioRef.value === value);\n    } else if (isFileInput(type)) {\n      if (isEmptyString(value) || isFileListObject(value)) {\n        ref.files = value;\n      } else {\n        ref.value = value;\n      }\n    } else if (isMultipleSelect(type)) {\n      [...ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n    } else if (isCheckBoxInput(type) && options) {\n      options.length > 1 ? options.forEach(({\n        ref: checkboxRef\n      }) => checkboxRef.checked = value.includes(checkboxRef.value)) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n\n    return type;\n  }, [isWeb]);\n\n  const setDirty = name => {\n    if (!fieldsRef.current[name] || !readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields) {\n      return false;\n    }\n\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\n    let isDirty = defaultRenderValuesRef.current[name] !== getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\n\n    if (isFieldArray) {\n      const fieldArrayName = name.substring(0, name.indexOf('['));\n      isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\n    }\n\n    const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !== isDirty;\n\n    if (isDirty) {\n      dirtyFieldsRef.current.add(name);\n    } else {\n      dirtyFieldsRef.current.delete(name);\n    }\n\n    isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\n    return readFormStateRef.current.dirty ? isDirtyChanged : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\n  };\n\n  const setInternalValue = useCallback((name, value) => {\n    setFieldValue(name, value);\n\n    if (setDirty(name) || !get(touchedFieldsRef.current, name) && readFormStateRef.current.touched) {\n      return !!set(touchedFieldsRef.current, name, true);\n    }\n  }, [setFieldValue]);\n  const executeValidation = useCallback(async (name, skipReRender) => {\n    const field = fieldsRef.current[name];\n\n    if (!field) {\n      return false;\n    }\n\n    const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\n    shouldRenderBaseOnError(name, error, false, skipReRender);\n    return isEmptyObject(error);\n  }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\n  const executeSchemaValidation = useCallback(async payload => {\n    const {\n      errors\n    } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current));\n    const previousFormIsValid = isValidRef.current;\n    isValidRef.current = isEmptyObject(errors);\n\n    if (isArray(payload)) {\n      payload.forEach(name => {\n        const error = get(errors, name);\n\n        if (error) {\n          set(errorsRef.current, name, error);\n        } else {\n          unset(errorsRef.current, [name]);\n        }\n      });\n      reRender();\n    } else {\n      shouldRenderBaseOnError(payload, get(errors, payload) ? {\n        [payload]: get(errors, payload)\n      } : {}, previousFormIsValid !== isValidRef.current);\n    }\n\n    return isEmptyObject(errorsRef.current);\n  }, [reRender, shouldRenderBaseOnError, validateAllFieldCriteria, validationSchema]);\n  const triggerValidation = useCallback(async payload => {\n    const fields = payload || Object.keys(fieldsRef.current);\n\n    if (validationSchema) {\n      return executeSchemaValidation(fields);\n    }\n\n    if (isArray(fields)) {\n      const result = await Promise.all(fields.map(async data => await executeValidation(data, true)));\n      reRender();\n      return result.every(Boolean);\n    }\n\n    return await executeValidation(fields);\n  }, [executeSchemaValidation, executeValidation, reRender, validationSchema]);\n  const setValue = useCallback((name, value, shouldValidate) => {\n    const shouldRender = setInternalValue(name, value) || isWatchAllRef.current || watchFieldsRef.current.has(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (shouldValidate) {\n      triggerValidation(name);\n    }\n\n    return;\n  }, [reRender, setInternalValue, triggerValidation]);\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : async ({\n    type,\n    target\n  }) => {\n    const name = target ? target.name : '';\n    const fields = fieldsRef.current;\n    const errors = errorsRef.current;\n    const field = fields[name];\n    const currentError = get(errors, name);\n    let error;\n\n    if (!field) {\n      return;\n    }\n\n    const isBlurEvent = type === EVENTS.BLUR;\n    const shouldSkipValidation = skipValidation({\n      hasError: !!currentError,\n      isBlurEvent,\n      isOnSubmit,\n      isReValidateOnSubmit,\n      isOnBlur,\n      isReValidateOnBlur,\n      isSubmitted: isSubmittedRef.current\n    });\n    const shouldUpdateDirty = setDirty(name);\n    let shouldUpdateState = isWatchAllRef.current || watchFieldsRef.current.has(name) || shouldUpdateDirty;\n\n    if (isBlurEvent && !get(touchedFieldsRef.current, name) && readFormStateRef.current.touched) {\n      set(touchedFieldsRef.current, name, true);\n      shouldUpdateState = true;\n    }\n\n    if (shouldSkipValidation) {\n      return shouldUpdateState && reRender();\n    }\n\n    if (validationSchema) {\n      const {\n        errors\n      } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields));\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n      error = get(errors, name) ? {\n        [name]: get(errors, name)\n      } : {};\n\n      if (previousFormIsValid !== isValidRef.current) {\n        shouldUpdateState = true;\n      }\n    } else {\n      error = await validateField(fieldsRef, validateAllFieldCriteria, field);\n    }\n\n    if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\n      reRender();\n    }\n  };\n  const validateSchemaIsValid = useCallback(() => {\n    const fieldValues = isEmptyObject(defaultValuesRef.current) ? getFieldsValues(fieldsRef.current) : defaultValuesRef.current;\n    validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues)).then(({\n      errors\n    }) => {\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    });\n  }, [reRender, validateAllFieldCriteria, validationSchema]);\n  const resetFieldRef = useCallback(name => {\n    errorsRef.current = unset(errorsRef.current, [name]);\n    touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\n    defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [name]);\n    [dirtyFieldsRef, fieldsWithValidationRef, validFieldsRef, watchFieldsRef].forEach(data => data.current.delete(name));\n\n    if (readFormStateRef.current.isValid || readFormStateRef.current.touched) {\n      reRender();\n    }\n\n    if (validationSchema) {\n      validateSchemaIsValid();\n    }\n  }, [reRender]);\n\n  const removeFieldEventListener = (field, forceDelete) => {\n    if (!isUndefined(handleChangeRef.current) && field) {\n      findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\n    }\n  };\n\n  const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\n    if (!field || field && isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) && !forceDelete) {\n      return;\n    }\n\n    removeFieldEventListener(field, forceDelete);\n    resetFieldRef(field.ref.name);\n  }, [resetFieldRef]);\n\n  function clearError(name) {\n    if (isUndefined(name)) {\n      errorsRef.current = {};\n    } else {\n      unset(errorsRef.current, isArray(name) ? name : [name]);\n    }\n\n    reRender();\n  }\n\n  const setInternalError = ({\n    name,\n    type,\n    types,\n    message,\n    preventRender\n  }) => {\n    const field = fieldsRef.current[name];\n\n    if (!isSameError(errorsRef.current[name], {\n      type,\n      message,\n      types\n    })) {\n      set(errorsRef.current, name, {\n        type,\n        types,\n        message,\n        ref: field ? field.ref : {},\n        isManual: true\n      });\n\n      if (!preventRender) {\n        reRender();\n      }\n    }\n  };\n\n  function setError(name, type = '', message) {\n    if (isString(name)) {\n      setInternalError(Object.assign({\n        name\n      }, isObject(type) ? {\n        types: type,\n        type: ''\n      } : {\n        type,\n        message\n      }));\n    } else if (isArray(name)) {\n      name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), {\n        preventRender: true\n      })));\n      reRender();\n    }\n  }\n\n  function watch(fieldNames, defaultValue) {\n    const combinedDefaultValues = isUndefined(defaultValue) ? isUndefined(defaultValuesRef.current) ? {} : defaultValuesRef.current : defaultValue;\n    const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\n    const watchFields = watchFieldsRef.current;\n\n    if (isProxyEnabled) {\n      readFormStateRef.current.dirty = true;\n    }\n\n    if (isString(fieldNames)) {\n      return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues, fieldArrayNamesRef.current.has(fieldNames) ? watchFieldArrayRef.current[fieldNames] : undefined);\n    }\n\n    if (isArray(fieldNames)) {\n      return fieldNames.reduce((previous, name) => {\n        let value;\n\n        if (isEmptyObject(fieldsRef.current) && isObject(combinedDefaultValues)) {\n          value = getDefaultValue(combinedDefaultValues, name);\n        } else {\n          value = assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues);\n        }\n\n        return Object.assign(Object.assign({}, previous), {\n          [name]: value\n        });\n      }, {});\n    }\n\n    isWatchAllRef.current = true;\n    const result = !isEmptyObject(fieldValues) && fieldValues || defaultValue || defaultValuesRef.current;\n    return fieldNames && fieldNames.nest ? transformToNestObject(result) : result;\n  }\n\n  function unregister(names) {\n    if (!isEmptyObject(fieldsRef.current)) {\n      (isArray(names) ? names : [names]).forEach(fieldName => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\n    }\n  }\n\n  function registerFieldsRef(ref, validateOptions = {}) {\n    if (!ref.name) {\n      return console.warn('Missing name @', ref);\n    }\n\n    const {\n      name,\n      type,\n      value\n    } = ref;\n    const fieldAttributes = Object.assign({\n      ref\n    }, validateOptions);\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioInput(type) || isCheckBoxInput(type);\n    let currentField = fields[name];\n    let isEmptyDefaultValue = true;\n    let isFieldArray = false;\n    let defaultValue;\n\n    if (isRadioOrCheckbox ? currentField && isArray(currentField.options) && currentField.options.find(({\n      ref\n    }) => value === ref.value) : currentField) {\n      fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(fieldAttributes));\n      currentField = isRadioOrCheckbox ? Object.assign({\n        options: [...(currentField && currentField.options || []), {\n          ref,\n          mutationWatcher\n        }],\n        ref: {\n          type,\n          name\n        }\n      }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), {\n        mutationWatcher\n      });\n    } else {\n      currentField = fieldAttributes;\n    }\n\n    fields[name] = currentField;\n\n    if (!isEmptyObject(defaultValuesRef.current)) {\n      defaultValue = getDefaultValue(defaultValuesRef.current, name);\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (validationSchema && readFormStateRef.current.isValid) {\n      validateSchemaIsValid();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, validateAllFieldCriteria, currentField).then(error => {\n          const previousFormIsValid = isValidRef.current;\n\n          if (isEmptyObject(error)) {\n            validFieldsRef.current.add(name);\n          } else {\n            isValidRef.current = false;\n          }\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (!defaultRenderValuesRef.current[name] && !(isFieldArray && isEmptyDefaultValue)) {\n      defaultRenderValuesRef.current[name] = isEmptyDefaultValue ? getFieldValue(fields, currentField.ref) : defaultValue;\n    }\n\n    if (!type) {\n      return;\n    }\n\n    const fieldToAttachListener = isRadioOrCheckbox && currentField.options ? currentField.options[currentField.options.length - 1] : currentField;\n    attachEventListeners({\n      field: fieldToAttachListener,\n      isRadioOrCheckbox,\n      handleChange: handleChangeRef.current\n    });\n  }\n\n  function register(refOrValidationOptions, validationOptions) {\n    if (isWindowUndefined) {\n      return;\n    }\n\n    if (isString(refOrValidationOptions)) {\n      registerFieldsRef({\n        name: refOrValidationOptions\n      }, validationOptions);\n      return;\n    }\n\n    if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\n      registerFieldsRef(refOrValidationOptions, validationOptions);\n      return;\n    }\n\n    return ref => ref && registerFieldsRef(ref, refOrValidationOptions);\n  }\n\n  const handleSubmit = useCallback(callback => async e => {\n    if (e) {\n      e.preventDefault();\n      e.persist();\n    }\n\n    let fieldErrors;\n    let fieldValues;\n    const fields = fieldsRef.current;\n\n    if (readFormStateRef.current.isSubmitting) {\n      isSubmittingRef.current = true;\n      reRender();\n    }\n\n    try {\n      if (validationSchema) {\n        fieldValues = getFieldsValues(fields);\n        const {\n          errors,\n          values\n        } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues));\n        errorsRef.current = errors;\n        fieldErrors = errors;\n        fieldValues = values;\n      } else {\n        const {\n          errors,\n          values\n        } = await Object.values(fields).reduce(async (previous, field) => {\n          if (!field) {\n            return previous;\n          }\n\n          const resolvedPrevious = await previous;\n          const {\n            ref,\n            ref: {\n              name\n            }\n          } = field;\n\n          if (!fields[name]) {\n            return Promise.resolve(resolvedPrevious);\n          }\n\n          const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\n\n          if (fieldError[name]) {\n            set(resolvedPrevious.errors, name, fieldError[name]);\n            validFieldsRef.current.delete(name);\n            return Promise.resolve(resolvedPrevious);\n          }\n\n          if (fieldsWithValidationRef.current.has(name)) {\n            validFieldsRef.current.add(name);\n          }\n\n          resolvedPrevious.values[name] = getFieldValue(fields, ref);\n          return Promise.resolve(resolvedPrevious);\n        }, Promise.resolve({\n          errors: {},\n          values: {}\n        }));\n        fieldErrors = errors;\n        fieldValues = values;\n      }\n\n      if (isEmptyObject(fieldErrors)) {\n        errorsRef.current = {};\n        await callback(transformToNestObject(fieldValues), e);\n      } else {\n        if (submitFocusError) {\n          focusErrorField(fields, fieldErrors);\n        }\n\n        errorsRef.current = fieldErrors;\n      }\n    } finally {\n      isSubmittedRef.current = true;\n      isSubmittingRef.current = false;\n      submitCountRef.current = submitCountRef.current + 1;\n      reRender();\n    }\n  }, [reRender, submitFocusError, validateAllFieldCriteria, validationSchema]);\n\n  const resetRefs = () => {\n    errorsRef.current = {};\n    fieldsRef.current = {};\n    touchedFieldsRef.current = {};\n    validFieldsRef.current = new Set();\n    fieldsWithValidationRef.current = new Set();\n    defaultRenderValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    dirtyFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n    isSubmittedRef.current = false;\n    isDirtyRef.current = false;\n    isValidRef.current = true;\n    submitCountRef.current = 0;\n  };\n\n  const reset = values => {\n    for (const value of Object.values(fieldsRef.current)) {\n      if (value && value.ref && value.ref.closest) {\n        try {\n          value.ref.closest('form').reset();\n          break;\n        } catch (_a) {}\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n    }\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());\n    resetRefs();\n    reRender();\n  };\n\n  const getValues = payload => {\n    const fieldValues = getFieldsValues(fieldsRef.current);\n    const outputValues = isEmptyObject(fieldValues) ? defaultValuesRef.current : fieldValues;\n    return payload && payload.nest ? transformToNestObject(outputValues) : outputValues;\n  };\n\n  useEffect(() => () => {\n    isUnMount.current = true;\n    fieldsRef.current && Object.values(fieldsRef.current).forEach(field => removeFieldEventListenerAndRef(field, true));\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!validationSchema) {\n    isValidRef.current = validFieldsRef.current.size >= fieldsWithValidationRef.current.size && isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirty: isDirtyRef.current,\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit ? isSubmittedRef.current && isEmptyObject(errorsRef.current) : isEmptyObject(fieldsRef.current) || isValidRef.current\n  };\n  const control = {\n    register,\n    unregister,\n    removeFieldEventListener,\n    getValues,\n    setValue,\n    triggerValidation,\n    formState,\n    mode: {\n      isOnBlur,\n      isOnSubmit\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldArrayRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    readFormStateRef,\n    defaultValuesRef\n  };\n  return {\n    watch,\n    control,\n    handleSubmit,\n    setValue,\n    triggerValidation,\n    getValues: useCallback(getValues, []),\n    reset: useCallback(reset, []),\n    register: useCallback(register, [defaultValuesRef.current, defaultRenderValuesRef.current]),\n    unregister: useCallback(unregister, []),\n    clearError: useCallback(clearError, []),\n    setError: useCallback(setError, []),\n    errors: errorsRef.current,\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: (obj, prop) => {\n        if (prop in obj) {\n          readFormStateRef.current[prop] = true;\n          return obj[prop];\n        }\n\n        return {};\n      }\n    }) : formState\n  };\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nconst FormGlobalContext = createContext(null);\n\nfunction useFormContext() {\n  return useContext(FormGlobalContext);\n}\n\nfunction FormContext(_a) {\n  var {\n    children,\n    formState,\n    errors\n  } = _a,\n      restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\n\n  return createElement(FormGlobalContext.Provider, {\n    value: Object.assign(Object.assign({}, restMethods), {\n      formState,\n      errors\n    })\n  }, children);\n}\n\nvar generateId = () => {\n  const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nconst appendId = value => Object.assign(Object.assign({}, isObject(value) ? value : {\n  value\n}), {\n  id: generateId()\n});\n\nconst mapIds = data => (isArray(data) ? data : []).map(value => appendId(value));\n\nvar removeArrayAt = (data, index) => !isUndefined(index) && isArray(data) ? [...data.slice(0, index), ...data.slice(index + 1)] : [];\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (fields, indexA, indexB) => isArray(fields) && ([fields[indexA], fields[indexB]] = [fields[indexB], fields[indexA]]);\n\nvar prependAt = (data, value) => [...(isArray(value) ? value : [value || null]), ...data];\n\nvar insertAt = (data, index, value) => [...data.slice(0, index), ...(isArray(value) ? value : [value || null]), ...data.slice(index)];\n\nvar fillEmptyArray = value => isArray(value) ? Array(value.length).fill(null) : undefined;\n\nconst {\n  useEffect: useEffect$1,\n  useRef: useRef$1,\n  useState: useState$1\n} = React;\n\nfunction useFieldArray({\n  control,\n  name\n}) {\n  const methods = useFormContext();\n  const {\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    getValues,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldArrayRef\n  } = control || methods.control;\n  const memoizedDefaultValues = useRef$1(get(defaultValuesRef.current, name, []));\n  const [fields, setField] = useState$1(mapIds(memoizedDefaultValues.current));\n\n  const resetFields = flagOrFields => {\n    if (readFormStateRef.current.dirty) {\n      isDirtyRef.current = isUndefined(flagOrFields) ? true : getIsFieldsDifferent(flagOrFields, memoizedDefaultValues.current);\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key], true);\n      }\n    }\n  };\n\n  const mapCurrentFieldsValueWithState = () => {\n    const currentFieldsValue = getValues({\n      nest: true\n    })[name];\n\n    if (isArray(currentFieldsValue)) {\n      for (let i = 0; i < currentFieldsValue.length; i++) {\n        fields[i] = Object.assign(Object.assign({}, fields[i]), currentFieldsValue[i]);\n      }\n    }\n  };\n\n  const append = value => {\n    mapCurrentFieldsValueWithState();\n\n    if (readFormStateRef.current.dirty) {\n      isDirtyRef.current = true;\n    }\n\n    watchFieldArrayRef.current[name] = [...fields, ...(isArray(value) ? value.map(appendId) : [appendId(value)])];\n    setField(watchFieldArrayRef.current[name]);\n  };\n\n  const prepend = value => {\n    mapCurrentFieldsValueWithState();\n    resetFields();\n    watchFieldArrayRef.current[name] = prependAt(fields, isArray(value) ? value.map(appendId) : [appendId(value)]);\n    setField(watchFieldArrayRef.current[name]);\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = prependAt(errorsRef.current[name], fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prependAt(touchedFieldsRef.current[name], fillEmptyArray(value));\n    }\n  };\n\n  const remove = index => {\n    if (!isUndefined(index)) {\n      mapCurrentFieldsValueWithState();\n    }\n\n    resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\n    watchFieldArrayRef.current[name] = removeArrayAt(fields, index);\n    setField(watchFieldArrayRef.current[name]);\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\n    }\n  };\n\n  const insert = (index, value) => {\n    mapCurrentFieldsValueWithState();\n    resetFields(insertAt(getFieldValueByName(fieldsRef.current, name), index));\n    watchFieldArrayRef.current[name] = insertAt(fields, index, isArray(value) ? value.map(appendId) : [appendId(value)]);\n    setField(watchFieldArrayRef.current[name]);\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = insertAt(errorsRef.current[name], index, fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insertAt(touchedFieldsRef.current[name], index, fillEmptyArray(value));\n    }\n  };\n\n  const swap = (indexA, indexB) => {\n    mapCurrentFieldsValueWithState();\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    swapArrayAt(fields, indexA, indexB);\n    setField([...fields]);\n    watchFieldArrayRef.current[name] = fields;\n\n    if (errorsRef.current[name]) {\n      swapArrayAt(errorsRef.current[name], indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n    }\n  };\n\n  const move = (from, to) => {\n    mapCurrentFieldsValueWithState();\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    moveArrayAt(fields, from, to);\n    setField([...fields]);\n    watchFieldArrayRef.current[name] = fields;\n\n    if (errorsRef.current[name]) {\n      moveArrayAt(errorsRef.current[name], from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n    }\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = get(defaultValuesRef.current, name, []);\n    setField(mapIds(memoizedDefaultValues.current));\n  };\n\n  useEffect$1(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n    watchFieldArrayRef.current[name] = {};\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [name]);\n  return {\n    swap,\n    move,\n    prepend,\n    append,\n    remove,\n    insert,\n    fields\n  };\n}\n\nvar getInputValue = (target, isCheckbox) => {\n  if (isNullOrUndefined(target)) {\n    return target;\n  }\n\n  return isCheckbox ? isUndefined(target.checked) ? target : target.checked : isUndefined(target.value) ? target : target.value;\n};\n\nconst Controller = _a => {\n  var {\n    name,\n    rules,\n    as: InnerComponent,\n    onBlur,\n    onChange,\n    onChangeName = VALIDATION_MODE.onChange,\n    onBlurName = VALIDATION_MODE.onBlur,\n    valueName,\n    defaultValue,\n    control\n  } = _a,\n      rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\"]);\n\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    errorsRef,\n    removeFieldEventListener,\n    triggerValidation,\n    mode: {\n      isOnSubmit,\n      isOnBlur\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit\n    },\n    formState: {\n      isSubmitted\n    },\n    fieldsRef,\n    fieldArrayNamesRef\n  } = control || methods.control;\n  const [value, setInputStateValue] = useState$2(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue);\n  const valueRef = useRef$2(value);\n  const isCheckboxInput = isBoolean(value);\n\n  const shouldValidate = () => !skipValidation({\n    hasError: !!get(errorsRef.current, name),\n    isOnBlur,\n    isOnSubmit,\n    isReValidateOnBlur,\n    isReValidateOnSubmit,\n    isSubmitted\n  });\n\n  const commonTask = target => {\n    const data = getInputValue(target, isCheckboxInput);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const eventWrapper = event => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\n\n  const handleChange = e => {\n    const data = commonTask(e && e.target ? e.target : e);\n    setValue(name, data, shouldValidate());\n  };\n\n  const registerField = () => {\n    if (isNameInFieldArray(fieldArrayNamesRef.current, name) && fieldsRef.current[name]) {\n      removeFieldEventListener(fieldsRef.current[name], true);\n    }\n\n    register(Object.defineProperty({\n      name\n    }, VALUE, {\n      set(data) {\n        setInputStateValue(data);\n        valueRef.current = data;\n      },\n\n      get() {\n        return valueRef.current;\n      }\n\n    }), Object.assign({}, rules));\n  };\n\n  if (!fieldsRef.current[name]) {\n    registerField();\n  }\n\n  useEffect$2(() => {\n    registerField();\n    return () => {\n      if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\n        unregister(name);\n      }\n    };\n  }, [name]);\n  const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\n  const props = Object.assign(Object.assign(Object.assign(Object.assign({\n    name\n  }, rest), onChange ? {\n    [onChangeName]: eventWrapper(onChange)\n  } : {\n    [onChangeName]: handleChange\n  }), onBlur || shouldReValidateOnBlur ? {\n    [onBlurName]: (...args) => {\n      if (onBlur) {\n        onBlur(args);\n      }\n\n      if (shouldReValidateOnBlur) {\n        triggerValidation(name);\n      }\n    }\n  } : {}), {\n    [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value\n  });\n  return isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, Object.assign({}, props));\n};\n\nfunction ErrorMessage(_a) {\n  var {\n    as: InnerComponent,\n    errors,\n    name,\n    message,\n    children\n  } = _a,\n      rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\n\n  const methods = useFormContext();\n  const error = get(errors || methods.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  const {\n    message: messageFromRegister,\n    types\n  } = error;\n  const props = Object.assign(Object.assign({}, InnerComponent ? rest : {}), {\n    children: children ? children({\n      message: messageFromRegister || message,\n      messages: types\n    }) : messageFromRegister || message\n  });\n  return InnerComponent ? isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, props) : createElement(Fragment, Object.assign({}, props));\n}\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };","map":{"version":3,"sources":["/home/snw/Documentos/React projects/fbs/node_modules/react-hook-form/dist/react-hook-form.es.js"],"names":["React","createContext","useContext","createElement","useState","useState$2","useRef","useRef$2","useEffect","useEffect$2","isValidElement","cloneElement","Fragment","VALIDATION_MODE","onBlur","onChange","onSubmit","RADIO_INPUT","FILE_INPUT","VALUE","UNDEFINED","EVENTS","BLUR","CHANGE","INPUT","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","attachEventListeners","field","handleChange","isRadioOrCheckbox","ref","addEventListener","isUndefined","val","undefined","isNullOrUndefined","value","isArray","Array","isObjectType","isObject","isKey","test","stringToPath","string","result","replace","match","number","quote","push","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","assign","get","obj","defaultValue","split","filter","Boolean","focusErrorField","fields","fieldErrors","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","type","isCheckBoxInput","isDetached","element","HTMLElement","nodeType","Node","DOCUMENT_NODE","parentNode","findRemovedFieldAndRemoveListener","forceDelete","name","mutationWatcher","fieldValue","forEach","disconnect","splice","defaultReturn","isValid","getRadioValue","checked","getMultipleSelectValue","selected","map","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","attributes","getFieldValue","files","isString","getFieldsValues","search","output","isSearchString","isSearchArray","isNest","nest","startsWith","find","isEmptyObject","keys","compareObject","objectA","objectB","isSameError","error","types","message","shouldUpdateWithError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isPureObject","isFunction","isBoolean","getValidateError","isStringValue","appendErrors","validateAllFieldCriteria","validateField","fieldsRef","valueAsNumber","valueAsDate","current","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","parseFloat","valueDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validateFunctions","validationResult","Promise","resolve","validateResult","parseErrorSchema","inner","validateWithSchema","validationSchema","abortEarly","e","getDefaultValue","defaultValues","flatArray","list","a","b","concat","isPrimitive","getPath","getInnerPath","pathWithIndex","getPath$1","parentPath","assignWatchFields","fieldValues","fieldName","watchFields","combinedDefaultValues","watchFieldArray","add","skipValidation","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getFieldValueByName","results","getIsFieldsDifferent","referenceArray","differenceArray","isMatch","i","dataA","dataB","isMatchFieldArrayName","searchName","isNameInFieldArray","names","prev","isFileListObject","FileList","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","unsetObject","target","isArrayObject","unset","paths","modeChecker","mode","isOnChange","useCallback","useForm","reValidateMode","submitFocusError","validateCriteriaMode","errorsRef","touchedFieldsRef","watchFieldArrayRef","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultRenderValuesRef","defaultValuesRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","fieldArrayNamesRef","render","isWindowUndefined","isWeb","isProxyEnabled","readFormStateRef","dirty","dirtyFields","submitCount","touched","isSubmitting","reRender","shouldRenderBaseOnError","shouldRender","skipReRender","shouldReRender","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldArray","previousDirtyFieldsLength","size","isDirty","fieldArrayName","substring","indexOf","isDirtyChanged","setInternalValue","executeValidation","executeSchemaValidation","payload","previousFormIsValid","triggerValidation","all","every","setValue","shouldValidate","currentError","shouldSkipValidation","shouldUpdateDirty","shouldUpdateState","validateSchemaIsValid","then","resetFieldRef","removeFieldEventListener","removeFieldEventListenerAndRef","clearError","setInternalError","preventRender","setError","watch","fieldNames","unregister","registerFieldsRef","validateOptions","console","warn","fieldAttributes","currentField","isEmptyDefaultValue","fieldToAttachListener","register","refOrValidationOptions","validationOptions","handleSubmit","callback","preventDefault","persist","resolvedPrevious","fieldError","resetRefs","reset","closest","_a","resetFieldArray","getValues","outputValues","formState","control","Proxy","prop","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","propertyIsEnumerable","FormGlobalContext","useFormContext","FormContext","children","restMethods","Provider","generateId","d","performance","now","c","r","Math","random","appendId","id","mapIds","removeArrayAt","slice","moveArrayAt","from","to","swapArrayAt","indexA","indexB","prependAt","insertAt","fillEmptyArray","fill","useEffect$1","useRef$1","useState$1","useFieldArray","methods","memoizedDefaultValues","setField","resetFields","flagOrFields","mapCurrentFieldsValueWithState","currentFieldsValue","append","prepend","remove","insert","swap","move","resetFunctions","fieldArrayNames","getInputValue","isCheckbox","Controller","rules","as","InnerComponent","onChangeName","onBlurName","valueName","rest","setInputStateValue","valueRef","isCheckboxInput","commonTask","eventWrapper","event","arg","registerField","defineProperty","shouldReValidateOnBlur","props","args","ErrorMessage","messageFromRegister","messages"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,aAApC,EAAmDC,QAAQ,IAAIC,UAA/D,EAA2EC,MAAM,IAAIC,QAArF,EAA+FC,SAAS,IAAIC,WAA5G,EAAyHC,cAAzH,EAAyIC,YAAzI,EAAuJC,QAAvJ,QAAuK,OAAvK;AAEA,MAAMC,eAAe,GAAG;AACpBC,EAAAA,MAAM,EAAE,QADY;AAEpBC,EAAAA,QAAQ,EAAE,UAFU;AAGpBC,EAAAA,QAAQ,EAAE;AAHU,CAAxB;AAKA,MAAMC,WAAW,GAAG,OAApB;AACA,MAAMC,UAAU,GAAG,MAAnB;AACA,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,MAAM,GAAG;AACXC,EAAAA,IAAI,EAAE,MADK;AAEXC,EAAAA,MAAM,EAAE,QAFG;AAGXC,EAAAA,KAAK,EAAE;AAHI,CAAf;AAKA,MAAMC,sBAAsB,GAAG;AAC3BC,EAAAA,GAAG,EAAE,KADsB;AAE3BC,EAAAA,GAAG,EAAE,KAFsB;AAG3BC,EAAAA,SAAS,EAAE,WAHgB;AAI3BC,EAAAA,SAAS,EAAE,WAJgB;AAK3BC,EAAAA,OAAO,EAAE,SALkB;AAM3BC,EAAAA,QAAQ,EAAE,UANiB;AAO3BC,EAAAA,QAAQ,EAAE;AAPiB,CAA/B;AASA,MAAMC,kBAAkB,GAAG,kDAA3B;AACA,MAAMC,mBAAmB,GAAG,OAA5B;AACA,MAAMC,eAAe,GAAG,kGAAxB;AACA,MAAMC,iBAAiB,GAAG,UAA1B;;AAEA,SAASC,oBAAT,CAA8B;AAAEC,EAAAA,KAAF;AAASC,EAAAA,YAAT;AAAuBC,EAAAA;AAAvB,CAA9B,EAA2E;AACvE,QAAM;AAAEC,IAAAA;AAAF,MAAUH,KAAhB;;AACA,MAAIG,GAAG,CAACC,gBAAR,EAA0B;AACtBD,IAAAA,GAAG,CAACC,gBAAJ,CAAqBF,iBAAiB,GAAGnB,MAAM,CAACE,MAAV,GAAmBF,MAAM,CAACG,KAAhE,EAAuEe,YAAvE;AACAE,IAAAA,GAAG,CAACC,gBAAJ,CAAqBrB,MAAM,CAACC,IAA5B,EAAkCiB,YAAlC;AACH;AACJ;;AAED,IAAII,WAAW,GAAIC,GAAD,IAASA,GAAG,KAAKC,SAAnC;;AAEA,IAAIC,iBAAiB,GAAIC,KAAD,IAAWA,KAAK,KAAK,IAAV,IAAkBJ,WAAW,CAACI,KAAD,CAAhE;;AAEA,IAAIC,OAAO,GAAID,KAAD,IAAWE,KAAK,CAACD,OAAN,CAAcD,KAAd,CAAzB;;AAEA,MAAMG,YAAY,GAAIH,KAAD,IAAW,OAAOA,KAAP,KAAiB,QAAjD;;AACA,IAAII,QAAQ,GAAIJ,KAAD,IAAW,CAACD,iBAAiB,CAACC,KAAD,CAAlB,IAA6B,CAACC,OAAO,CAACD,KAAD,CAArC,IAAgDG,YAAY,CAACH,KAAD,CAAtF;;AAEA,MAAMK,KAAK,GAAIL,KAAD,IAAW,CAACC,OAAO,CAACD,KAAD,CAAR,KACpBb,mBAAmB,CAACmB,IAApB,CAAyBN,KAAzB,KAAmC,CAACd,kBAAkB,CAACoB,IAAnB,CAAwBN,KAAxB,CADhB,CAAzB;;AAEA,MAAMO,YAAY,GAAIC,MAAD,IAAY;AAC7B,QAAMC,MAAM,GAAG,EAAf;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAetB,eAAf,EAAgC,CAACuB,KAAD,EAAQC,MAAR,EAAgBC,KAAhB,EAAuBL,MAAvB,KAAkC;AAC9DC,IAAAA,MAAM,CAACK,IAAP,CAAYD,KAAK,GAAGL,MAAM,CAACE,OAAP,CAAerB,iBAAf,EAAkC,IAAlC,CAAH,GAA6CuB,MAAM,IAAID,KAAxE;AACH,GAFD;AAGA,SAAOF,MAAP;AACH,CAND;;AAOA,SAASM,GAAT,CAAaC,MAAb,EAAqBC,IAArB,EAA2BjB,KAA3B,EAAkC;AAC9B,MAAIkB,KAAK,GAAG,CAAC,CAAb;AACA,QAAMC,QAAQ,GAAGd,KAAK,CAACY,IAAD,CAAL,GAAc,CAACA,IAAD,CAAd,GAAuBV,YAAY,CAACU,IAAD,CAApD;AACA,QAAMG,MAAM,GAAGD,QAAQ,CAACC,MAAxB;AACA,QAAMC,SAAS,GAAGD,MAAM,GAAG,CAA3B;;AACA,SAAO,EAAEF,KAAF,GAAUE,MAAjB,EAAyB;AACrB,UAAME,GAAG,GAAGH,QAAQ,CAACD,KAAD,CAApB;AACA,QAAIK,QAAQ,GAAGvB,KAAf;;AACA,QAAIkB,KAAK,KAAKG,SAAd,EAAyB;AACrB,YAAMG,QAAQ,GAAGR,MAAM,CAACM,GAAD,CAAvB;AACAC,MAAAA,QAAQ,GACJnB,QAAQ,CAACoB,QAAD,CAAR,IAAsBvB,OAAO,CAACuB,QAAD,CAA7B,GACMA,QADN,GAEM,CAACC,KAAK,CAACN,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAT,CAAN,GACI,EADJ,GAEI,EALd;AAMH;;AACDF,IAAAA,MAAM,CAACM,GAAD,CAAN,GAAcC,QAAd;AACAP,IAAAA,MAAM,GAAGA,MAAM,CAACM,GAAD,CAAf;AACH;;AACD,SAAON,MAAP;AACH;;AAED,IAAIU,qBAAqB,GAAIC,IAAD,IAAUC,MAAM,CAACC,OAAP,CAAeF,IAAf,EAAqBG,MAArB,CAA4B,CAACC,QAAD,EAAW,CAACT,GAAD,EAAMtB,KAAN,CAAX,KAA4B;AAC1F,MAAId,kBAAkB,CAACoB,IAAnB,CAAwBgB,GAAxB,CAAJ,EAAkC;AAC9BP,IAAAA,GAAG,CAACgB,QAAD,EAAWT,GAAX,EAAgBtB,KAAhB,CAAH;AACA,WAAO+B,QAAP;AACH;;AACD,SAAOH,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBD,QAAlB,CAAd,EAA2C;AAAE,KAACT,GAAD,GAAOtB;AAAT,GAA3C,CAAP;AACH,CANqC,EAMnC,EANmC,CAAtC;;AAQA,IAAIiC,GAAG,GAAG,CAACC,GAAD,EAAMjB,IAAN,EAAYkB,YAAZ,KAA6B;AACnC,QAAM1B,MAAM,GAAGQ,IAAI,CACdmB,KADU,CACJ,WADI,EAEVC,MAFU,CAEHC,OAFG,EAGVR,MAHU,CAGH,CAACrB,MAAD,EAASa,GAAT,KAAkBvB,iBAAiB,CAACU,MAAD,CAAjB,GAA4BA,MAA5B,GAAqCA,MAAM,CAACa,GAAD,CAH1D,EAGkEY,GAHlE,CAAf;AAIA,SAAOtC,WAAW,CAACa,MAAD,CAAX,IAAuBA,MAAM,KAAKyB,GAAlC,GACDA,GAAG,CAACjB,IAAD,CAAH,IAAakB,YADZ,GAED1B,MAFN;AAGH,CARD;;AAUA,IAAI8B,eAAe,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAC3C,OAAK,MAAMnB,GAAX,IAAkBkB,MAAlB,EAA0B;AACtB,QAAIP,GAAG,CAACQ,WAAD,EAAcnB,GAAd,CAAP,EAA2B;AACvB,YAAM/B,KAAK,GAAGiD,MAAM,CAAClB,GAAD,CAApB;;AACA,UAAI/B,KAAJ,EAAW;AACP,YAAIA,KAAK,CAACG,GAAN,CAAUgD,KAAd,EAAqB;AACjBnD,UAAAA,KAAK,CAACG,GAAN,CAAUgD,KAAV;AACA;AACH,SAHD,MAIK,IAAInD,KAAK,CAACoD,OAAV,EAAmB;AACpBpD,UAAAA,KAAK,CAACoD,OAAN,CAAc,CAAd,EAAiBjD,GAAjB,CAAqBgD,KAArB;AACA;AACH;AACJ;AACJ;AACJ;AACJ,CAhBD;;AAkBA,IAAIE,uBAAuB,GAAG,CAAClD,GAAD,EAAMmD,uBAAN,KAAkC;AAC5D,MAAInD,GAAG,CAACoD,mBAAR,EAA6B;AACzBpD,IAAAA,GAAG,CAACoD,mBAAJ,CAAwBxE,MAAM,CAACG,KAA/B,EAAsCoE,uBAAtC;AACAnD,IAAAA,GAAG,CAACoD,mBAAJ,CAAwBxE,MAAM,CAACE,MAA/B,EAAuCqE,uBAAvC;AACAnD,IAAAA,GAAG,CAACoD,mBAAJ,CAAwBxE,MAAM,CAACC,IAA/B,EAAqCsE,uBAArC;AACH;AACJ,CAND;;AAQA,IAAIE,YAAY,GAAIC,IAAD,IAAUA,IAAI,KAAK9E,WAAtC;;AAEA,IAAI+E,eAAe,GAAID,IAAD,IAAUA,IAAI,KAAK,UAAzC;;AAEA,SAASE,UAAT,CAAoBC,OAApB,EAA6B;AACzB,MAAI,CAACA,OAAL,EAAc;AACV,WAAO,IAAP;AACH;;AACD,MAAI,EAAEA,OAAO,YAAYC,WAArB,KACAD,OAAO,CAACE,QAAR,KAAqBC,IAAI,CAACC,aAD9B,EAC6C;AACzC,WAAO,KAAP;AACH;;AACD,SAAOL,UAAU,CAACC,OAAO,CAACK,UAAT,CAAjB;AACH;;AAED,SAASC,iCAAT,CAA2CjB,MAA3C,EAAmDhD,YAAnD,EAAiED,KAAjE,EAAwEmE,WAAxE,EAAqF;AACjF,MAAI,CAACnE,KAAL,EAAY;AACR;AACH;;AACD,QAAM;AAAEG,IAAAA,GAAF;AAAOA,IAAAA,GAAG,EAAE;AAAEiE,MAAAA,IAAF;AAAQX,MAAAA;AAAR,KAAZ;AAA4BY,IAAAA;AAA5B,MAAiDrE,KAAvD;;AACA,MAAI,CAACyD,IAAL,EAAW;AACP,WAAOR,MAAM,CAACmB,IAAD,CAAb;AACA;AACH;;AACD,QAAME,UAAU,GAAGrB,MAAM,CAACmB,IAAD,CAAzB;;AACA,MAAI,CAACZ,YAAY,CAACC,IAAD,CAAZ,IAAsBC,eAAe,CAACD,IAAD,CAAtC,KAAiDa,UAArD,EAAiE;AAC7D,UAAM;AAAElB,MAAAA;AAAF,QAAckB,UAApB;;AACA,QAAI5D,OAAO,CAAC0C,OAAD,CAAP,IAAoBA,OAAO,CAACvB,MAAhC,EAAwC;AACpCuB,MAAAA,OAAO,CAACmB,OAAR,CAAgB,CAAC;AAAEpE,QAAAA,GAAF;AAAOkE,QAAAA;AAAP,OAAD,EAA2B1C,KAA3B,KAAqC;AACjD,YAAKxB,GAAG,IAAIwD,UAAU,CAACxD,GAAD,CAAlB,IAA4BgE,WAAhC,EAA6C;AACzCd,UAAAA,uBAAuB,CAAClD,GAAD,EAAMF,YAAN,CAAvB;;AACA,cAAIoE,eAAJ,EAAqB;AACjBA,YAAAA,eAAe,CAACG,UAAhB;AACH;;AACDpB,UAAAA,OAAO,CAACqB,MAAR,CAAe9C,KAAf,EAAsB,CAAtB;AACH;AACJ,OARD;;AASA,UAAIyB,OAAO,IAAI,CAACA,OAAO,CAACvB,MAAxB,EAAgC;AAC5B,eAAOoB,MAAM,CAACmB,IAAD,CAAb;AACH;AACJ,KAbD,MAcK;AACD,aAAOnB,MAAM,CAACmB,IAAD,CAAb;AACH;AACJ,GAnBD,MAoBK,IAAIT,UAAU,CAACxD,GAAD,CAAV,IAAmBgE,WAAvB,EAAoC;AACrCd,IAAAA,uBAAuB,CAAClD,GAAD,EAAMF,YAAN,CAAvB;;AACA,QAAIoE,eAAJ,EAAqB;AACjBA,MAAAA,eAAe,CAACG,UAAhB;AACH;;AACD,WAAOvB,MAAM,CAACmB,IAAD,CAAb;AACH;AACJ;;AAED,MAAMM,aAAa,GAAG;AAClBC,EAAAA,OAAO,EAAE,KADS;AAElBlE,EAAAA,KAAK,EAAE;AAFW,CAAtB;;AAIA,IAAImE,aAAa,GAAIxB,OAAD,IAAa1C,OAAO,CAAC0C,OAAD,CAAP,GAC3BA,OAAO,CAACb,MAAR,CAAe,CAACC,QAAD,EAAW;AAAErC,EAAAA,GAAG,EAAE;AAAE0E,IAAAA,OAAF;AAAWpE,IAAAA;AAAX;AAAP,CAAX,KAA2CoE,OAAO,GAC7D;AACEF,EAAAA,OAAO,EAAE,IADX;AAEElE,EAAAA;AAFF,CAD6D,GAK7D+B,QALJ,EAKckC,aALd,CAD2B,GAO3BA,aAPN;;AASA,IAAII,sBAAsB,GAAI1B,OAAD,IAAa,CAAC,GAAGA,OAAJ,EACrCN,MADqC,CAC9B,CAAC;AAAEiC,EAAAA;AAAF,CAAD,KAAkBA,QADY,EAErCC,GAFqC,CAEjC,CAAC;AAAEvE,EAAAA;AAAF,CAAD,KAAeA,KAFkB,CAA1C;;AAIA,IAAIwE,WAAW,GAAIxB,IAAD,IAAUA,IAAI,KAAK7E,UAArC;;AAEA,IAAIsG,gBAAgB,GAAIzB,IAAD,IAAUA,IAAI,KAAK,iBAA1C;;AAEA,IAAI0B,aAAa,GAAI1E,KAAD,IAAWA,KAAK,KAAK,EAAzC;;AAEA,MAAM2E,aAAa,GAAG;AAClB3E,EAAAA,KAAK,EAAE,KADW;AAElBkE,EAAAA,OAAO,EAAE;AAFS,CAAtB;AAIA,MAAMU,WAAW,GAAG;AAAE5E,EAAAA,KAAK,EAAE,IAAT;AAAekE,EAAAA,OAAO,EAAE;AAAxB,CAApB;;AACA,IAAIW,gBAAgB,GAAIlC,OAAD,IAAa;AAChC,MAAI1C,OAAO,CAAC0C,OAAD,CAAX,EAAsB;AAClB,QAAIA,OAAO,CAACvB,MAAR,GAAiB,CAArB,EAAwB;AACpB,YAAM0D,MAAM,GAAGnC,OAAO,CACjBN,MADU,CACH,CAAC;AAAE3C,QAAAA,GAAG,EAAE;AAAE0E,UAAAA;AAAF;AAAP,OAAD,KAA0BA,OADvB,EAEVG,GAFU,CAEN,CAAC;AAAE7E,QAAAA,GAAG,EAAE;AAAEM,UAAAA;AAAF;AAAP,OAAD,KAAwBA,KAFlB,CAAf;AAGA,aAAO;AAAEA,QAAAA,KAAK,EAAE8E,MAAT;AAAiBZ,QAAAA,OAAO,EAAE,CAAC,CAACY,MAAM,CAAC1D;AAAnC,OAAP;AACH;;AACD,UAAM;AAAEgD,MAAAA,OAAF;AAAWpE,MAAAA,KAAX;AAAkB+E,MAAAA;AAAlB,QAAiCpC,OAAO,CAAC,CAAD,CAAP,CAAWjD,GAAlD;AACA,WAAO0E,OAAO,GACRW,UAAU,IAAI,CAACnF,WAAW,CAACmF,UAAU,CAAC/E,KAAZ,CAA1B,GACIJ,WAAW,CAACI,KAAD,CAAX,IAAsB0E,aAAa,CAAC1E,KAAD,CAAnC,GACI4E,WADJ,GAEI;AAAE5E,MAAAA,KAAK,EAAEA,KAAT;AAAgBkE,MAAAA,OAAO,EAAE;AAAzB,KAHR,GAIIU,WALI,GAMRD,aANN;AAOH;;AACD,SAAOA,aAAP;AACH,CAlBD;;AAoBA,SAASK,aAAT,CAAuBxC,MAAvB,EAA+B9C,GAA/B,EAAoC;AAChC,QAAM;AAAEsD,IAAAA,IAAF;AAAQW,IAAAA,IAAR;AAAchB,IAAAA,OAAd;AAAuB3C,IAAAA,KAAvB;AAA8BiF,IAAAA;AAA9B,MAAwCvF,GAA9C;AACA,QAAMH,KAAK,GAAGiD,MAAM,CAACmB,IAAD,CAApB;;AACA,MAAIa,WAAW,CAACxB,IAAD,CAAf,EAAuB;AACnB,WAAOiC,KAAP;AACH;;AACD,MAAIlC,YAAY,CAACC,IAAD,CAAhB,EAAwB;AACpB,WAAOzD,KAAK,GAAG4E,aAAa,CAAC5E,KAAK,CAACoD,OAAP,CAAb,CAA6B3C,KAAhC,GAAwC,EAApD;AACH;;AACD,MAAIyE,gBAAgB,CAACzB,IAAD,CAApB,EAA4B;AACxB,WAAOqB,sBAAsB,CAAC1B,OAAD,CAA7B;AACH;;AACD,MAAIM,eAAe,CAACD,IAAD,CAAnB,EAA2B;AACvB,WAAOzD,KAAK,GAAGsF,gBAAgB,CAACtF,KAAK,CAACoD,OAAP,CAAhB,CAAgC3C,KAAnC,GAA2C,KAAvD;AACH;;AACD,SAAOA,KAAP;AACH;;AAED,IAAIkF,QAAQ,GAAIlF,KAAD,IAAW,OAAOA,KAAP,KAAiB,QAA3C;;AAEA,IAAImF,eAAe,GAAG,CAAC3C,MAAD,EAAS4C,MAAT,KAAoB;AACtC,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,cAAc,GAAGJ,QAAQ,CAACE,MAAD,CAA/B;AACA,QAAMG,aAAa,GAAGtF,OAAO,CAACmF,MAAD,CAA7B;AACA,QAAMI,MAAM,GAAGJ,MAAM,IAAIA,MAAM,CAACK,IAAhC;;AACA,OAAK,MAAM9B,IAAX,IAAmBnB,MAAnB,EAA2B;AACvB,QAAI5C,WAAW,CAACwF,MAAD,CAAX,IACAI,MADA,IAECF,cAAc,IAAI3B,IAAI,CAAC+B,UAAL,CAAgBN,MAAhB,CAFnB,IAGCG,aAAa,IACVH,MAAM,CAACO,IAAP,CAAahE,IAAD,IAAUgC,IAAI,CAAC+B,UAAL,CAAgB/D,IAAhB,CAAtB,CAJR,EAIuD;AACnD0D,MAAAA,MAAM,CAAC1B,IAAD,CAAN,GAAeqB,aAAa,CAACxC,MAAD,EAASA,MAAM,CAACmB,IAAD,CAAN,CAAajE,GAAtB,CAA5B;AACH;AACJ;;AACD,SAAO2F,MAAP;AACH,CAfD;;AAiBA,IAAIO,aAAa,GAAI5F,KAAD,IAAWI,QAAQ,CAACJ,KAAD,CAAR,IAAmB,CAAC4B,MAAM,CAACiE,IAAP,CAAY7F,KAAZ,EAAmBoB,MAAtE;;AAEA,IAAI0E,aAAa,GAAG,CAACC,OAAO,GAAG,EAAX,EAAeC,OAAO,GAAG,EAAzB,KAAgCpE,MAAM,CAACC,OAAP,CAAekE,OAAf,EAAwBjE,MAAxB,CAA+B,CAACC,QAAD,EAAW,CAACT,GAAD,EAAMtB,KAAN,CAAX,KAA4B+B,QAAQ,GAAGiE,OAAO,CAAC1E,GAAD,CAAP,IAAgB0E,OAAO,CAAC1E,GAAD,CAAP,KAAiBtB,KAApC,GAA4C,KAA/G,EAAsH,IAAtH,CAApD;;AAEA,IAAIiG,WAAW,GAAG,CAACC,KAAD,EAAQ;AAAElD,EAAAA,IAAF;AAAQmD,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAR,KAAsC;AACpD,SAAQhG,QAAQ,CAAC8F,KAAD,CAAR,IACJA,KAAK,CAAClD,IAAN,KAAeA,IADX,IAEJkD,KAAK,CAACE,OAAN,KAAkBA,OAFd,IAGJN,aAAa,CAACI,KAAK,CAACC,KAAP,EAAcA,KAAd,CAHjB;AAIH,CALD;;AAOA,SAASE,qBAAT,CAA+B;AAAEC,EAAAA,MAAF;AAAU3C,EAAAA,IAAV;AAAgBuC,EAAAA,KAAhB;AAAuBK,EAAAA,WAAvB;AAAoCC,EAAAA;AAApC,CAA/B,EAA4F;AACxF,QAAMC,YAAY,GAAGb,aAAa,CAACM,KAAD,CAAlC;AACA,QAAMQ,WAAW,GAAGd,aAAa,CAACU,MAAD,CAAjC;AACA,QAAMK,iBAAiB,GAAG1E,GAAG,CAACiE,KAAD,EAAQvC,IAAR,CAA7B;AACA,QAAMiD,eAAe,GAAG3E,GAAG,CAACqE,MAAD,EAAS3C,IAAT,CAA3B;;AACA,MAAK8C,YAAY,IAAIF,WAAW,CAACM,GAAZ,CAAgBlD,IAAhB,CAAjB,IACCiD,eAAe,IAAIA,eAAe,CAACE,QADxC,EACmD;AAC/C,WAAO,KAAP;AACH;;AACD,MAAIJ,WAAW,KAAKD,YAAhB,IACC,CAACC,WAAD,IAAgB,CAACE,eADlB,IAECH,YAAY,IAAID,oBAAoB,CAACK,GAArB,CAAyBlD,IAAzB,CAAhB,IAAkD,CAAC4C,WAAW,CAACM,GAAZ,CAAgBlD,IAAhB,CAFxD,EAEgF;AAC5E,WAAO,IAAP;AACH;;AACD,SAAOgD,iBAAiB,IAAI,CAACV,WAAW,CAACW,eAAD,EAAkBD,iBAAlB,CAAxC;AACH;;AAED,IAAII,OAAO,GAAI/G,KAAD,IAAWA,KAAK,YAAYgH,MAA1C;;AAEA,IAAIC,kBAAkB,GAAIC,cAAD,IAAoB;AACzC,QAAMC,YAAY,GAAG/G,QAAQ,CAAC8G,cAAD,CAAR,IAA4B,CAACH,OAAO,CAACG,cAAD,CAAzD;AACA,SAAO;AACHlH,IAAAA,KAAK,EAAEmH,YAAY,GACbD,cAAc,CAAClH,KADF,GAEbkH,cAHH;AAIHd,IAAAA,OAAO,EAAEe,YAAY,GACfD,cAAc,CAACd,OADA,GAEf;AANH,GAAP;AAQH,CAVD;;AAYA,IAAIgB,UAAU,GAAIpH,KAAD,IAAW,OAAOA,KAAP,KAAiB,UAA7C;;AAEA,IAAIqH,SAAS,GAAIrH,KAAD,IAAW,OAAOA,KAAP,KAAiB,SAA5C;;AAEA,SAASsH,gBAAT,CAA0B7G,MAA1B,EAAkCf,GAAlC,EAAuCsD,IAAI,GAAG,UAA9C,EAA0D;AACtD,QAAMuE,aAAa,GAAGrC,QAAQ,CAACzE,MAAD,CAA9B;;AACA,MAAI8G,aAAa,IAAKF,SAAS,CAAC5G,MAAD,CAAT,IAAqB,CAACA,MAA5C,EAAqD;AACjD,UAAM2F,OAAO,GAAGmB,aAAa,GAAG9G,MAAH,GAAY,EAAzC;AACA,WAAO;AACHuC,MAAAA,IADG;AAEHoD,MAAAA,OAFG;AAGH1G,MAAAA;AAHG,KAAP;AAKH;AACJ;;AAED,IAAI8H,YAAY,GAAG,CAAC7D,IAAD,EAAO8D,wBAAP,EAAiCnB,MAAjC,EAAyCtD,IAAzC,EAA+CoD,OAA/C,KAA2D;AAC1E,MAAI,CAACqB,wBAAL,EAA+B;AAC3B,WAAO,EAAP;AACH;;AACD,QAAMvB,KAAK,GAAGI,MAAM,CAAC3C,IAAD,CAApB;AACA,SAAO/B,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBkE,KAAlB,CAAd,EAAwC;AAAEC,IAAAA,KAAK,EAAEvE,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAmBkE,KAAK,IAAIA,KAAK,CAACC,KAAf,GAAuBD,KAAK,CAACC,KAA7B,GAAqC,EAAxD,CAAd,EAA4E;AAAE,OAACnD,IAAD,GAAQoD,OAAO,IAAI;AAArB,KAA5E;AAAT,GAAxC,CAAP;AACH,CAND;;AAQA,IAAIsB,aAAa,GAAG,OAAOC,SAAP,EAAkBF,wBAAlB,EAA4C;AAAE/H,EAAAA,GAAF;AAAOA,EAAAA,GAAG,EAAE;AAAEsD,IAAAA,IAAF;AAAQhD,IAAAA,KAAR;AAAe2D,IAAAA,IAAf;AAAqBiE,IAAAA,aAArB;AAAoCC,IAAAA;AAApC,GAAZ;AAA+DlF,EAAAA,OAA/D;AAAwE3D,EAAAA,QAAxE;AAAkFH,EAAAA,SAAlF;AAA6FC,EAAAA,SAA7F;AAAwGF,EAAAA,GAAxG;AAA6GD,EAAAA,GAA7G;AAAkHI,EAAAA,OAAlH;AAA2HE,EAAAA;AAA3H,CAA5C,KAAuL;AACvM,QAAMuD,MAAM,GAAGmF,SAAS,CAACG,OAAzB;AACA,QAAM5B,KAAK,GAAG,EAAd;AACA,QAAM6B,OAAO,GAAGhF,YAAY,CAACC,IAAD,CAA5B;AACA,QAAMgF,UAAU,GAAG/E,eAAe,CAACD,IAAD,CAAlC;AACA,QAAMvD,iBAAiB,GAAGsI,OAAO,IAAIC,UAArC;AACA,QAAMC,OAAO,GAAGvD,aAAa,CAAC1E,KAAD,CAA7B;AACA,QAAMkI,iBAAiB,GAAGV,YAAY,CAACW,IAAb,CAAkB,IAAlB,EAAwBxE,IAAxB,EAA8B8D,wBAA9B,EAAwDvB,KAAxD,CAA1B;;AACA,QAAMkC,gBAAgB,GAAG,CAACC,SAAD,EAAYC,gBAAZ,EAA8BC,gBAA9B,EAAgDC,OAAO,GAAG9J,sBAAsB,CAACG,SAAjF,EAA4F4J,OAAO,GAAG/J,sBAAsB,CAACI,SAA7H,KAA2I;AAChK,UAAMsH,OAAO,GAAGiC,SAAS,GAAGC,gBAAH,GAAsBC,gBAA/C;AACArC,IAAAA,KAAK,CAACvC,IAAD,CAAL,GAAc/B,MAAM,CAACI,MAAP,CAAc;AAAEgB,MAAAA,IAAI,EAAEqF,SAAS,GAAGG,OAAH,GAAaC,OAA9B;AAAuCrC,MAAAA,OAAvC;AACxB1G,MAAAA;AADwB,KAAd,EACF2I,SAAS,GACfH,iBAAiB,CAACM,OAAD,EAAUpC,OAAV,CADF,GAEf8B,iBAAiB,CAACO,OAAD,EAAUrC,OAAV,CAHT,CAAd;;AAIA,QAAI,CAACqB,wBAAL,EAA+B;AAC3B,aAAOvB,KAAP;AACH;AACJ,GATD;;AAUA,MAAIlH,QAAQ,KACN,CAAC+I,OAAD,IAAY,CAACC,UAAb,KAA4BC,OAAO,IAAIlI,iBAAiB,CAACC,KAAD,CAAxD,CAAD,IACIqH,SAAS,CAACrH,KAAD,CAAT,IAAoB,CAACA,KADzB,IAEIgI,UAAU,IAAI,CAACnD,gBAAgB,CAAClC,OAAD,CAAhB,CAA0BuB,OAF7C,IAGI6D,OAAO,IAAI,CAAC5D,aAAa,CAACxB,OAAD,CAAb,CAAuBuB,OAJhC,CAAZ,EAIuD;AACnD,UAAMkC,OAAO,GAAGlB,QAAQ,CAAClG,QAAD,CAAR,GACVA,QADU,GAEViI,kBAAkB,CAACjI,QAAD,CAAlB,CAA6BoH,OAFnC;AAGAF,IAAAA,KAAK,CAACvC,IAAD,CAAL,GAAc/B,MAAM,CAACI,MAAP,CAAc;AAAEgB,MAAAA,IAAI,EAAEtE,sBAAsB,CAACM,QAA/B;AAAyCoH,MAAAA,OAAzC;AAAkD1G,MAAAA,GAAG,EAAED,iBAAiB,GAAG+C,MAAM,CAACmB,IAAD,CAAN,CAAahB,OAAb,CAAqB,CAArB,EAAwBjD,GAA3B,GAAiCA;AAAzG,KAAd,EAA8HwI,iBAAiB,CAACxJ,sBAAsB,CAACM,QAAxB,EAAkCoH,OAAlC,CAA/I,CAAd;;AACA,QAAI,CAACqB,wBAAL,EAA+B;AAC3B,aAAOvB,KAAP;AACH;AACJ;;AACD,MAAI,CAACnG,iBAAiB,CAACnB,GAAD,CAAlB,IAA2B,CAACmB,iBAAiB,CAACpB,GAAD,CAAjD,EAAwD;AACpD,QAAI0J,SAAJ;AACA,QAAIK,SAAJ;AACA,UAAM;AAAE1I,MAAAA,KAAK,EAAE2I,QAAT;AAAmBvC,MAAAA,OAAO,EAAEwC;AAA5B,QAA2C3B,kBAAkB,CAACtI,GAAD,CAAnE;AACA,UAAM;AAAEqB,MAAAA,KAAK,EAAE6I,QAAT;AAAmBzC,MAAAA,OAAO,EAAE0C;AAA5B,QAA2C7B,kBAAkB,CAACrI,GAAD,CAAnE;;AACA,QAAIoE,IAAI,KAAK,QAAT,IAAsB,CAACA,IAAD,IAAS,CAACvB,KAAK,CAACzB,KAAD,CAAzC,EAAmD;AAC/C,YAAM+I,WAAW,GAAGnB,aAAa,IAAIoB,UAAU,CAAChJ,KAAD,CAA/C;;AACA,UAAI,CAACD,iBAAiB,CAAC4I,QAAD,CAAtB,EAAkC;AAC9BN,QAAAA,SAAS,GAAGU,WAAW,GAAGJ,QAA1B;AACH;;AACD,UAAI,CAAC5I,iBAAiB,CAAC8I,QAAD,CAAtB,EAAkC;AAC9BH,QAAAA,SAAS,GAAGK,WAAW,GAAGF,QAA1B;AACH;AACJ,KARD,MASK;AACD,YAAMI,SAAS,GAAGpB,WAAW,IAAI,IAAIqB,IAAJ,CAASlJ,KAAT,CAAjC;;AACA,UAAIkF,QAAQ,CAACyD,QAAD,CAAZ,EAAwB;AACpBN,QAAAA,SAAS,GAAGY,SAAS,GAAG,IAAIC,IAAJ,CAASP,QAAT,CAAxB;AACH;;AACD,UAAIzD,QAAQ,CAAC2D,QAAD,CAAZ,EAAwB;AACpBH,QAAAA,SAAS,GAAGO,SAAS,GAAG,IAAIC,IAAJ,CAASL,QAAT,CAAxB;AACH;AACJ;;AACD,QAAIR,SAAS,IAAIK,SAAjB,EAA4B;AACxBN,MAAAA,gBAAgB,CAAC,CAAC,CAACC,SAAH,EAAcO,UAAd,EAA0BE,UAA1B,EAAsCpK,sBAAsB,CAACC,GAA7D,EAAkED,sBAAsB,CAACE,GAAzF,CAAhB;;AACA,UAAI,CAAC6I,wBAAL,EAA+B;AAC3B,eAAOvB,KAAP;AACH;AACJ;AACJ;;AACD,MAAIhB,QAAQ,CAAClF,KAAD,CAAR,IAAmB,CAACiI,OAApB,KAAgCpJ,SAAS,IAAIC,SAA7C,CAAJ,EAA6D;AACzD,UAAM;AAAEkB,MAAAA,KAAK,EAAEmJ,cAAT;AAAyB/C,MAAAA,OAAO,EAAEkC;AAAlC,QAAwDrB,kBAAkB,CAACpI,SAAD,CAAhF;AACA,UAAM;AAAEmB,MAAAA,KAAK,EAAEoJ,cAAT;AAAyBhD,MAAAA,OAAO,EAAEmC;AAAlC,QAAwDtB,kBAAkB,CAACnI,SAAD,CAAhF;AACA,UAAMuK,WAAW,GAAGrJ,KAAK,CAACsJ,QAAN,GAAiBlI,MAArC;AACA,UAAMiH,SAAS,GAAGxJ,SAAS,IAAIwK,WAAW,GAAGF,cAA7C;AACA,UAAMT,SAAS,GAAG5J,SAAS,IAAIuK,WAAW,GAAGD,cAA7C;;AACA,QAAIf,SAAS,IAAIK,SAAjB,EAA4B;AACxBN,MAAAA,gBAAgB,CAAC,CAAC,CAACC,SAAH,EAAcC,gBAAd,EAAgCC,gBAAhC,CAAhB;;AACA,UAAI,CAACd,wBAAL,EAA+B;AAC3B,eAAOvB,KAAP;AACH;AACJ;AACJ;;AACD,MAAInH,OAAO,IAAI,CAACkJ,OAAhB,EAAyB;AACrB,UAAM;AAAEjI,MAAAA,KAAK,EAAEuJ,YAAT;AAAuBnD,MAAAA,OAAO,EAAEoD;AAAhC,QAAmDvC,kBAAkB,CAAClI,OAAD,CAA3E;;AACA,QAAIgI,OAAO,CAACwC,YAAD,CAAP,IAAyB,CAACA,YAAY,CAACjJ,IAAb,CAAkBN,KAAlB,CAA9B,EAAwD;AACpDkG,MAAAA,KAAK,CAACvC,IAAD,CAAL,GAAc/B,MAAM,CAACI,MAAP,CAAc;AAAEgB,QAAAA,IAAI,EAAEtE,sBAAsB,CAACK,OAA/B;AAAwCqH,QAAAA,OAAO,EAAEoD,cAAjD;AAAiE9J,QAAAA;AAAjE,OAAd,EAAsFwI,iBAAiB,CAACxJ,sBAAsB,CAACK,OAAxB,EAAiCyK,cAAjC,CAAvG,CAAd;;AACA,UAAI,CAAC/B,wBAAL,EAA+B;AAC3B,eAAOvB,KAAP;AACH;AACJ;AACJ;;AACD,MAAIjH,QAAJ,EAAc;AACV,UAAM4E,UAAU,GAAGmB,aAAa,CAACxC,MAAD,EAAS9C,GAAT,CAAhC;AACA,UAAM+J,WAAW,GAAGhK,iBAAiB,IAAIkD,OAArB,GAA+BA,OAAO,CAAC,CAAD,CAAP,CAAWjD,GAA1C,GAAgDA,GAApE;;AACA,QAAI0H,UAAU,CAACnI,QAAD,CAAd,EAA0B;AACtB,YAAMwB,MAAM,GAAG,MAAMxB,QAAQ,CAAC4E,UAAD,CAA7B;AACA,YAAM6F,aAAa,GAAGpC,gBAAgB,CAAC7G,MAAD,EAASgJ,WAAT,CAAtC;;AACA,UAAIC,aAAJ,EAAmB;AACfxD,QAAAA,KAAK,CAACvC,IAAD,CAAL,GAAc/B,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkB0H,aAAlB,CAAd,EAAgDxB,iBAAiB,CAACxJ,sBAAsB,CAACO,QAAxB,EAAkCyK,aAAa,CAACtD,OAAhD,CAAjE,CAAd;;AACA,YAAI,CAACqB,wBAAL,EAA+B;AAC3B,iBAAOvB,KAAP;AACH;AACJ;AACJ,KATD,MAUK,IAAI9F,QAAQ,CAACnB,QAAD,CAAZ,EAAwB;AACzB,YAAM0K,iBAAiB,GAAG/H,MAAM,CAACC,OAAP,CAAe5C,QAAf,CAA1B;AACA,YAAM2K,gBAAgB,GAAG,MAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACpDH,QAAAA,iBAAiB,CAAC7H,MAAlB,CAAyB,OAAOC,QAAP,EAAiB,CAACT,GAAD,EAAMrC,QAAN,CAAjB,EAAkCiC,KAAlC,KAA4C;AACjE,cAAK,CAAC0E,aAAa,EAAC,MAAM7D,QAAP,EAAd,IAAkC,CAAC0F,wBAApC,IACA,CAACL,UAAU,CAACnI,QAAD,CADf,EAC2B;AACvB,mBAAO6K,OAAO,CAAC/H,QAAD,CAAd;AACH;;AACD,cAAItB,MAAJ;AACA,gBAAMsJ,cAAc,GAAG,MAAM9K,QAAQ,CAAC4E,UAAD,CAArC;AACA,gBAAM6F,aAAa,GAAGpC,gBAAgB,CAACyC,cAAD,EAAiBN,WAAjB,EAA8BnI,GAA9B,CAAtC;;AACA,cAAIoI,aAAJ,EAAmB;AACfjJ,YAAAA,MAAM,GAAGmB,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkB0H,aAAlB,CAAd,EAAgDxB,iBAAiB,CAAC5G,GAAD,EAAMoI,aAAa,CAACtD,OAApB,CAAjE,CAAT;;AACA,gBAAIqB,wBAAJ,EAA8B;AAC1BvB,cAAAA,KAAK,CAACvC,IAAD,CAAL,GAAclD,MAAd;AACH;AACJ,WALD,MAMK;AACDA,YAAAA,MAAM,GAAGsB,QAAT;AACH;;AACD,iBAAO4H,iBAAiB,CAACvI,MAAlB,GAA2B,CAA3B,KAAiCF,KAAjC,GACD4I,OAAO,CAACrJ,MAAD,CADN,GAEDA,MAFN;AAGH,SApBD,EAoBG,EApBH;AAqBH,OAtB8B,CAA/B;;AAuBA,UAAI,CAACmF,aAAa,CAACgE,gBAAD,CAAlB,EAAsC;AAClC1D,QAAAA,KAAK,CAACvC,IAAD,CAAL,GAAc/B,MAAM,CAACI,MAAP,CAAc;AAAEtC,UAAAA,GAAG,EAAE+J;AAAP,SAAd,EAAoCG,gBAApC,CAAd;;AACA,YAAI,CAACnC,wBAAL,EAA+B;AAC3B,iBAAOvB,KAAP;AACH;AACJ;AACJ;AACJ;;AACD,SAAOA,KAAP;AACH,CAlID;;AAoIA,MAAM8D,gBAAgB,GAAG,CAAC9D,KAAD,EAAQuB,wBAAR,KAAqCxH,OAAO,CAACiG,KAAK,CAAC+D,KAAP,CAAP,GACxD/D,KAAK,CAAC+D,KAAN,CAAYnI,MAAZ,CAAmB,CAACC,QAAD,EAAW;AAAEd,EAAAA,IAAF;AAAQmF,EAAAA,OAAR;AAAiBpD,EAAAA;AAAjB,CAAX,KAAwCpB,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBD,QAAlB,CAAd,EAA4CA,QAAQ,CAACd,IAAD,CAAR,IAAkBwG,wBAAlB,GACnG;AACE,GAACxG,IAAD,GAAQuG,YAAY,CAACvG,IAAD,EAAOwG,wBAAP,EAAiC1F,QAAjC,EAA2CiB,IAA3C,EAAiDoD,OAAjD;AADtB,CADmG,GAInG;AACE,GAACnF,IAAD,GAAQc,QAAQ,CAACd,IAAD,CAAR,IAAkBW,MAAM,CAACI,MAAP,CAAc;AAAEoE,IAAAA,OAAF;AACpCpD,IAAAA;AADoC,GAAd,EACbyE,wBAAwB,GAC/B;AACEtB,IAAAA,KAAK,EAAE;AAAE,OAACnD,IAAD,GAAQoD,OAAO,IAAI;AAArB;AADT,GAD+B,GAI/B,EALoB;AAD5B,CAJuD,CAA3D,EAWQ,EAXR,CADwD,GAaxD;AACE,GAACF,KAAK,CAACjF,IAAP,GAAc;AAAEmF,IAAAA,OAAO,EAAEF,KAAK,CAACE,OAAjB;AAA0BpD,IAAAA,IAAI,EAAEkD,KAAK,CAAClD;AAAtC;AADhB,CAbN;;AAgBA,eAAekH,kBAAf,CAAkCC,gBAAlC,EAAoD1C,wBAApD,EAA8E9F,IAA9E,EAAoF;AAChF,MAAI;AACA,WAAO;AACHmD,MAAAA,MAAM,EAAE,MAAMqF,gBAAgB,CAAClL,QAAjB,CAA0B0C,IAA1B,EAAgC;AAAEyI,QAAAA,UAAU,EAAE;AAAd,OAAhC,CADX;AAEH9D,MAAAA,MAAM,EAAE;AAFL,KAAP;AAIH,GALD,CAMA,OAAO+D,CAAP,EAAU;AACN,WAAO;AACHvF,MAAAA,MAAM,EAAE,EADL;AAEHwB,MAAAA,MAAM,EAAE5E,qBAAqB,CAACsI,gBAAgB,CAACK,CAAD,EAAI5C,wBAAJ,CAAjB;AAF1B,KAAP;AAIH;AACJ;;AAED,IAAI6C,eAAe,GAAG,CAACC,aAAD,EAAgB5G,IAAhB,EAAsBxB,YAAtB,KAAuCvC,WAAW,CAAC2K,aAAa,CAAC5G,IAAD,CAAd,CAAX,GACvD1B,GAAG,CAACsI,aAAD,EAAgB5G,IAAhB,EAAsBxB,YAAtB,CADoD,GAEvDoI,aAAa,CAAC5G,IAAD,CAFnB;;AAIA,SAAS6G,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,SAAOA,IAAI,CAAC3I,MAAL,CAAY,CAAC4I,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,MAAF,CAAS3K,OAAO,CAAC0K,CAAD,CAAP,GAAaH,SAAS,CAACG,CAAD,CAAtB,GAA4BA,CAArC,CAAtB,EAA+D,EAA/D,CAAP;AACH;;AAED,IAAIE,WAAW,GAAI7K,KAAD,IAAWD,iBAAiB,CAACC,KAAD,CAAjB,IAA4B,CAACG,YAAY,CAACH,KAAD,CAAtE;;AAEA,MAAM8K,OAAO,GAAG,CAAC7J,IAAD,EAAO6D,MAAP,KAAkB;AAC9B,QAAMiG,YAAY,GAAG,CAAC/K,KAAD,EAAQsB,GAAR,EAAalB,QAAb,KAA0B;AAC3C,UAAM4K,aAAa,GAAG5K,QAAQ,GAAI,GAAEa,IAAK,IAAGK,GAAI,EAAlB,GAAuB,GAAEL,IAAK,IAAGK,GAAI,GAAnE;AACA,WAAOuJ,WAAW,CAAC7K,KAAD,CAAX,GAAqBgL,aAArB,GAAqCF,OAAO,CAACE,aAAD,EAAgBhL,KAAhB,CAAnD;AACH,GAHD;;AAIA,SAAOC,OAAO,CAAC6E,MAAD,CAAP,GACDA,MAAM,CAACP,GAAP,CAAW,CAACvE,KAAD,EAAQsB,GAAR,KAAgByJ,YAAY,CAAC/K,KAAD,EAAQsB,GAAR,CAAvC,CADC,GAEDM,MAAM,CAACC,OAAP,CAAeiD,MAAf,EAAuBP,GAAvB,CAA2B,CAAC,CAACjD,GAAD,EAAMtB,KAAN,CAAD,KAAkB+K,YAAY,CAAC/K,KAAD,EAAQsB,GAAR,EAAa,IAAb,CAAzD,CAFN;AAGH,CARD;;AASA,IAAI2J,SAAS,GAAG,CAACC,UAAD,EAAalL,KAAb,KAAuBwK,SAAS,CAACM,OAAO,CAACI,UAAD,EAAalL,KAAb,CAAR,CAAhD;;AAEA,IAAImL,iBAAiB,GAAG,CAACC,WAAD,EAAcC,SAAd,EAAyBC,WAAzB,EAAsCC,qBAAtC,EAA6DC,eAA7D,KAAiF;AACrG,MAAIxL,KAAJ;;AACA,MAAI4F,aAAa,CAACwF,WAAD,CAAjB,EAAgC;AAC5BpL,IAAAA,KAAK,GAAGwL,eAAe,GAAGA,eAAH,GAAqB1L,SAA5C;AACH,GAFD,MAGK,IAAI,CAACF,WAAW,CAACwL,WAAW,CAACC,SAAD,CAAZ,CAAhB,EAA0C;AAC3CC,IAAAA,WAAW,CAACG,GAAZ,CAAgBJ,SAAhB;AACArL,IAAAA,KAAK,GAAGoL,WAAW,CAACC,SAAD,CAAnB;AACH,GAHI,MAIA;AACDrL,IAAAA,KAAK,GAAGiC,GAAG,CAACP,qBAAqB,CAAC0J,WAAD,CAAtB,EAAqCC,SAArC,CAAX;;AACA,QAAIpL,OAAO,CAACuL,eAAD,CAAP,IACAvL,OAAO,CAACD,KAAD,CADP,IAEAA,KAAK,CAACoB,MAAN,KAAiBoK,eAAe,CAACpK,MAFrC,EAE6C;AACzCpB,MAAAA,KAAK,GAAGwL,eAAR;AACH;;AACD,QAAI,CAAC5L,WAAW,CAACI,KAAD,CAAhB,EAAyB;AACrBiL,MAAAA,SAAS,CAACI,SAAD,EAAYrL,KAAZ,CAAT,CAA4B8D,OAA5B,CAAoCH,IAAI,IAAI2H,WAAW,CAACG,GAAZ,CAAgB9H,IAAhB,CAA5C;AACH;AACJ;;AACD,SAAO/D,WAAW,CAACI,KAAD,CAAX,GACDI,QAAQ,CAACmL,qBAAD,CAAR,GACIjB,eAAe,CAACiB,qBAAD,EAAwBF,SAAxB,CADnB,GAEIE,qBAHH,GAIDvL,KAJN;AAKH,CAzBD;;AA2BA,IAAI0L,cAAc,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,WAAZ;AAAyBC,EAAAA,UAAzB;AAAqCC,EAAAA,oBAArC;AAA2DC,EAAAA,QAA3D;AAAqEC,EAAAA,kBAArE;AAAyFC,EAAAA;AAAzF,CAAD,KAA8GJ,UAAU,IAAIC,oBAAf,IAC7HD,UAAU,IAAI,CAACI,WAD8G,IAE7HF,QAAQ,IAAI,CAACH,WAAb,IAA4B,CAACD,QAFgG,IAG7HK,kBAAkB,IAAI,CAACJ,WAAvB,IAAsCD,QAHuF,IAI7HG,oBAAoB,IAAIG,WAJ7B;;AAMA,IAAIC,mBAAmB,GAAG,CAAC1J,MAAD,EAASmB,IAAT,KAAkB;AACxC,QAAMwI,OAAO,GAAGzK,qBAAqB,CAACyD,eAAe,CAAC3C,MAAD,CAAhB,CAArC;AACA,SAAOmB,IAAI,GAAG1B,GAAG,CAACkK,OAAD,EAAUxI,IAAV,EAAgBwI,OAAhB,CAAN,GAAiCA,OAA5C;AACH,CAHD;;AAKA,SAASC,oBAAT,CAA8BC,cAA9B,EAA8CC,eAA9C,EAA+D;AAC3D,MAAIC,OAAO,GAAG,KAAd;;AACA,MAAI,CAACtM,OAAO,CAACoM,cAAD,CAAR,IACA,CAACpM,OAAO,CAACqM,eAAD,CADR,IAEAD,cAAc,CAACjL,MAAf,KAA0BkL,eAAe,CAAClL,MAF9C,EAEsD;AAClD,WAAO,IAAP;AACH;;AACD,OAAK,IAAIoL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,cAAc,CAACjL,MAAnC,EAA2CoL,CAAC,EAA5C,EAAgD;AAC5C,QAAID,OAAJ,EAAa;AACT;AACH;;AACD,UAAME,KAAK,GAAGJ,cAAc,CAACG,CAAD,CAA5B;AACA,UAAME,KAAK,GAAGJ,eAAe,CAACE,CAAD,CAA7B;;AACA,QAAI,CAACE,KAAD,IAAU9K,MAAM,CAACiE,IAAP,CAAY4G,KAAZ,EAAmBrL,MAAnB,KAA8BQ,MAAM,CAACiE,IAAP,CAAY6G,KAAZ,EAAmBtL,MAA/D,EAAuE;AACnEmL,MAAAA,OAAO,GAAG,IAAV;AACA;AACH;;AACD,SAAK,MAAMjL,GAAX,IAAkBmL,KAAlB,EAAyB;AACrB,UAAI,CAACC,KAAK,CAACpL,GAAD,CAAN,IAAemL,KAAK,CAACnL,GAAD,CAAL,KAAeoL,KAAK,CAACpL,GAAD,CAAvC,EAA8C;AAC1CiL,QAAAA,OAAO,GAAG,IAAV;AACA;AACH;AACJ;AACJ;;AACD,SAAOA,OAAP;AACH;;AAED,MAAMI,qBAAqB,GAAG,CAAChJ,IAAD,EAAOiJ,UAAP,KAAsBjJ,IAAI,CAAC+B,UAAL,CAAiB,GAAEkH,UAAW,GAA9B,CAApD;;AACA,IAAIC,kBAAkB,GAAG,CAACC,KAAD,EAAQnJ,IAAR,KAAiB,CAAC,GAAGmJ,KAAJ,EAAWhL,MAAX,CAAkB,CAACiL,IAAD,EAAOjF,OAAP,KAAoB6E,qBAAqB,CAAChJ,IAAD,EAAOmE,OAAP,CAArB,GAAuC,IAAvC,GAA8CiF,IAApF,EAA2F,KAA3F,CAA1C;;AAEA,IAAIC,gBAAgB,GAAIrL,IAAD,IAAU,OAAOsL,QAAP,KAAoB5O,SAApB,IAAiCsD,IAAI,YAAYsL,QAAlF;;AAEA,SAASC,WAAT,CAAqB/J,OAArB,EAA8BgK,gBAA9B,EAAgD;AAC5C,QAAMC,QAAQ,GAAG,IAAIC,gBAAJ,CAAqB,MAAM;AACxC,QAAInK,UAAU,CAACC,OAAD,CAAd,EAAyB;AACrBiK,MAAAA,QAAQ,CAACrJ,UAAT;AACAoJ,MAAAA,gBAAgB;AACnB;AACJ,GALgB,CAAjB;AAMAC,EAAAA,QAAQ,CAACE,OAAT,CAAiBC,MAAM,CAACC,QAAxB,EAAkC;AAC9BC,IAAAA,SAAS,EAAE,IADmB;AAE9BC,IAAAA,OAAO,EAAE;AAFqB,GAAlC;AAIA,SAAON,QAAP;AACH;;AAED,MAAMO,WAAW,GAAIC,MAAD,IAAY;AAC5B,OAAK,MAAMtM,GAAX,IAAkBsM,MAAlB,EAA0B;AACtB,UAAMjM,IAAI,GAAGiM,MAAM,CAACtM,GAAD,CAAnB;AACA,UAAMuM,aAAa,GAAG5N,OAAO,CAAC0B,IAAD,CAA7B;;AACA,QAAI,CAACvB,QAAQ,CAACuB,IAAD,CAAR,IAAkBkM,aAAnB,KAAqC,CAAClM,IAAI,CAACjC,GAA/C,EAAoD;AAChDiO,MAAAA,WAAW,CAAChM,IAAD,CAAX;AACH;;AACD,QAAI,CAAC/B,WAAW,CAAC+B,IAAD,CAAX,IACDiE,aAAa,CAACjE,IAAD,CADZ,IAEAkM,aAAa,IAAI,CAACD,MAAM,CAACtM,GAAD,CAAN,CAAYe,MAAZ,CAAmBC,OAAnB,EAA4BlB,MAF/C,KAGA,CAAC4L,gBAAgB,CAACY,MAAD,CAHrB,EAG+B;AAC3B,aAAOA,MAAM,CAACtM,GAAD,CAAb;AACH;AACJ;;AACD,SAAOsM,MAAP;AACH,CAfD;;AAgBA,MAAME,KAAK,GAAG,CAACF,MAAD,EAASG,KAAT,KAAmB;AAC7BA,EAAAA,KAAK,CAACjK,OAAN,CAAc7C,IAAI,IAAI;AAClBF,IAAAA,GAAG,CAAC6M,MAAD,EAAS3M,IAAT,EAAenB,SAAf,CAAH;AACH,GAFD;AAGA,SAAO6N,WAAW,CAACC,MAAD,CAAlB;AACH,CALD;;AAOA,IAAII,WAAW,GAAIC,IAAD,KAAW;AACzBpC,EAAAA,UAAU,EAAE,CAACoC,IAAD,IAASA,IAAI,KAAKnQ,eAAe,CAACG,QADrB;AAEzB8N,EAAAA,QAAQ,EAAEkC,IAAI,KAAKnQ,eAAe,CAACC,MAFV;AAGzBmQ,EAAAA,UAAU,EAAED,IAAI,KAAKnQ,eAAe,CAACE;AAHZ,CAAX,CAAlB;;AAMA,MAAM;AAAET,EAAAA,MAAF;AAAUF,EAAAA,QAAV;AAAoB8Q,EAAAA,WAApB;AAAiC1Q,EAAAA;AAAjC,IAA+CR,KAArD;;AACA,SAASmR,OAAT,CAAiB;AAAEH,EAAAA,IAAI,GAAGnQ,eAAe,CAACG,QAAzB;AAAmCoQ,EAAAA,cAAc,GAAGvQ,eAAe,CAACE,QAApE;AAA8EmM,EAAAA,gBAA9E;AAAgGI,EAAAA,aAAa,GAAG,EAAhH;AAAoH+D,EAAAA,gBAAgB,GAAG,IAAvI;AAA6IC,EAAAA;AAA7I,IAAuK,EAAxL,EAA4L;AACxL,QAAM5G,SAAS,GAAGpK,MAAM,CAAC,EAAD,CAAxB;AACA,QAAMkK,wBAAwB,GAAG8G,oBAAoB,KAAK,KAA1D;AACA,QAAMC,SAAS,GAAGjR,MAAM,CAAC,EAAD,CAAxB;AACA,QAAMkR,gBAAgB,GAAGlR,MAAM,CAAC,EAAD,CAA/B;AACA,QAAMmR,kBAAkB,GAAGnR,MAAM,CAAC,EAAD,CAAjC;AACA,QAAMoR,cAAc,GAAGpR,MAAM,CAAC,IAAIqR,GAAJ,EAAD,CAA7B;AACA,QAAMC,cAAc,GAAGtR,MAAM,CAAC,IAAIqR,GAAJ,EAAD,CAA7B;AACA,QAAME,uBAAuB,GAAGvR,MAAM,CAAC,IAAIqR,GAAJ,EAAD,CAAtC;AACA,QAAMG,cAAc,GAAGxR,MAAM,CAAC,IAAIqR,GAAJ,EAAD,CAA7B;AACA,QAAMI,UAAU,GAAGzR,MAAM,CAAC,IAAD,CAAzB;AACA,QAAM0R,sBAAsB,GAAG1R,MAAM,CAAC,EAAD,CAArC;AACA,QAAM2R,gBAAgB,GAAG3R,MAAM,CAACgN,aAAD,CAA/B;AACA,QAAM4E,SAAS,GAAG5R,MAAM,CAAC,KAAD,CAAxB;AACA,QAAM6R,aAAa,GAAG7R,MAAM,CAAC,KAAD,CAA5B;AACA,QAAM8R,cAAc,GAAG9R,MAAM,CAAC,KAAD,CAA7B;AACA,QAAM+R,UAAU,GAAG/R,MAAM,CAAC,KAAD,CAAzB;AACA,QAAMgS,cAAc,GAAGhS,MAAM,CAAC,CAAD,CAA7B;AACA,QAAMiS,eAAe,GAAGjS,MAAM,CAAC,KAAD,CAA9B;AACA,QAAMkS,eAAe,GAAGlS,MAAM,EAA9B;AACA,QAAMmS,0BAA0B,GAAGnS,MAAM,CAAC,EAAD,CAAzC;AACA,QAAMoS,kBAAkB,GAAGpS,MAAM,CAAC,IAAIqR,GAAJ,EAAD,CAAjC;AACA,QAAM,GAAGgB,MAAH,IAAavS,QAAQ,EAA3B;AACA,QAAM;AAAE0O,IAAAA,QAAF;AAAYF,IAAAA;AAAZ,MAA2BtO,MAAM,CAACyQ,WAAW,CAACC,IAAD,CAAZ,CAAN,CAA0BnG,OAA3D;AACA,QAAM+H,iBAAiB,GAAG,OAAOtC,MAAP,KAAkBlP,SAA5C;AACA,QAAMyR,KAAK,GAAG,OAAOtC,QAAP,KAAoBnP,SAApB,IACV,CAACwR,iBADS,IAEV,CAACjQ,WAAW,CAAC2N,MAAM,CAACnK,WAAR,CAFhB;AAGA,QAAM2M,cAAc,GAAGD,KAAK,IAAI,WAAWvC,MAA3C;AACA,QAAMyC,gBAAgB,GAAGzS,MAAM,CAAC;AAC5B0S,IAAAA,KAAK,EAAE,CAACF,cADoB;AAE5BG,IAAAA,WAAW,EAAE,CAACH,cAFc;AAG5B9D,IAAAA,WAAW,EAAEJ,UAHe;AAI5BsE,IAAAA,WAAW,EAAE,CAACJ,cAJc;AAK5BK,IAAAA,OAAO,EAAE,CAACL,cALkB;AAM5BM,IAAAA,YAAY,EAAE,CAACN,cANa;AAO5B7L,IAAAA,OAAO,EAAE,CAAC6L;AAPkB,GAAD,CAA/B;AASA,QAAM;AAAEhE,IAAAA,QAAQ,EAAEC,kBAAZ;AAAgCH,IAAAA,UAAU,EAAEC;AAA5C,MAAsEvO,MAAM,CAACyQ,WAAW,CAACK,cAAD,CAAZ,CAAN,CAAoCvG,OAAhH;AACA,QAAMwI,QAAQ,GAAGnC,WAAW,CAAC,MAAM;AAC/B,QAAI,CAACgB,SAAS,CAACrH,OAAf,EAAwB;AACpB8H,MAAAA,MAAM,CAAC,EAAD,CAAN;AACH;AACJ,GAJ2B,EAIzB,EAJyB,CAA5B;AAKA,QAAMW,uBAAuB,GAAGpC,WAAW,CAAC,CAACxK,IAAD,EAAOuC,KAAP,EAAcsK,YAAd,EAA4BC,YAA5B,KAA6C;AACrF,QAAIC,cAAc,GAAGF,YAAY,IAC7BnK,qBAAqB,CAAC;AAClBC,MAAAA,MAAM,EAAEkI,SAAS,CAAC1G,OADA;AAElB5B,MAAAA,KAFkB;AAGlBvC,MAAAA,IAHkB;AAIlB4C,MAAAA,WAAW,EAAEwI,cAAc,CAACjH,OAJV;AAKlBtB,MAAAA,oBAAoB,EAAEsI,uBAAuB,CAAChH;AAL5B,KAAD,CADzB;;AAQA,QAAIlC,aAAa,CAACM,KAAD,CAAjB,EAA0B;AACtB,UAAI4I,uBAAuB,CAAChH,OAAxB,CAAgCjB,GAAhC,CAAoClD,IAApC,KAA6CwG,gBAAjD,EAAmE;AAC/D4E,QAAAA,cAAc,CAACjH,OAAf,CAAuB2D,GAAvB,CAA2B9H,IAA3B;AACA+M,QAAAA,cAAc,GAAGA,cAAc,IAAIzO,GAAG,CAACuM,SAAS,CAAC1G,OAAX,EAAoBnE,IAApB,CAAtC;AACH;;AACD6K,MAAAA,SAAS,CAAC1G,OAAV,GAAoBgG,KAAK,CAACU,SAAS,CAAC1G,OAAX,EAAoB,CAACnE,IAAD,CAApB,CAAzB;AACH,KAND,MAOK;AACDoL,MAAAA,cAAc,CAACjH,OAAf,CAAuB6I,MAAvB,CAA8BhN,IAA9B;AACA+M,MAAAA,cAAc,GAAGA,cAAc,IAAI,CAACzO,GAAG,CAACuM,SAAS,CAAC1G,OAAX,EAAoBnE,IAApB,CAAvC;AACA5C,MAAAA,GAAG,CAACyN,SAAS,CAAC1G,OAAX,EAAoBnE,IAApB,EAA0BuC,KAAK,CAACvC,IAAD,CAA/B,CAAH;AACH;;AACD,QAAI+M,cAAc,IAAI,CAACD,YAAvB,EAAqC;AACjCH,MAAAA,QAAQ;AACR,aAAO,IAAP;AACH;AACJ,GAzB0C,EAyBxC,CAACA,QAAD,EAAWnG,gBAAX,CAzBwC,CAA3C;AA0BA,QAAMyG,aAAa,GAAGzC,WAAW,CAAC,CAACxK,IAAD,EAAOkN,QAAP,KAAoB;AAClD,UAAMtR,KAAK,GAAGoI,SAAS,CAACG,OAAV,CAAkBnE,IAAlB,CAAd;;AACA,QAAI,CAACpE,KAAL,EAAY;AACR,aAAO,KAAP;AACH;;AACD,UAAMG,GAAG,GAAGH,KAAK,CAACG,GAAlB;AACA,UAAMiD,OAAO,GAAGpD,KAAK,CAACoD,OAAtB;AACA,UAAM;AAAEK,MAAAA;AAAF,QAAWtD,GAAjB;AACA,UAAMM,KAAK,GAAG8P,KAAK,IACfpQ,GAAG,YAAY6N,MAAM,CAACnK,WADZ,IAEVrD,iBAAiB,CAAC8Q,QAAD,CAFP,GAGR,EAHQ,GAIRA,QAJN;;AAKA,QAAI9N,YAAY,CAACC,IAAD,CAAZ,IAAsBL,OAA1B,EAAmC;AAC/BA,MAAAA,OAAO,CAACmB,OAAR,CAAgB,CAAC;AAAEpE,QAAAA,GAAG,EAAEoR;AAAP,OAAD,KAAwBA,QAAQ,CAAC1M,OAAT,GAAmB0M,QAAQ,CAAC9Q,KAAT,KAAmBA,KAA9E;AACH,KAFD,MAGK,IAAIwE,WAAW,CAACxB,IAAD,CAAf,EAAuB;AACxB,UAAI0B,aAAa,CAAC1E,KAAD,CAAb,IACAgN,gBAAgB,CAAChN,KAAD,CADpB,EAC6B;AACzBN,QAAAA,GAAG,CAACuF,KAAJ,GAAYjF,KAAZ;AACH,OAHD,MAIK;AACDN,QAAAA,GAAG,CAACM,KAAJ,GAAYA,KAAZ;AACH;AACJ,KARI,MASA,IAAIyE,gBAAgB,CAACzB,IAAD,CAApB,EAA4B;AAC7B,OAAC,GAAGtD,GAAG,CAACiD,OAAR,EAAiBmB,OAAjB,CAAyBiN,SAAS,IAAKA,SAAS,CAACzM,QAAV,GAAqBtE,KAAK,CAACgR,QAAN,CAAeD,SAAS,CAAC/Q,KAAzB,CAA5D;AACH,KAFI,MAGA,IAAIiD,eAAe,CAACD,IAAD,CAAf,IAAyBL,OAA7B,EAAsC;AACvCA,MAAAA,OAAO,CAACvB,MAAR,GAAiB,CAAjB,GACMuB,OAAO,CAACmB,OAAR,CAAgB,CAAC;AAAEpE,QAAAA,GAAG,EAAEuR;AAAP,OAAD,KAA2BA,WAAW,CAAC7M,OAAZ,GAAsBpE,KAAK,CAACgR,QAAN,CAAeC,WAAW,CAACjR,KAA3B,CAAjE,CADN,GAEO2C,OAAO,CAAC,CAAD,CAAP,CAAWjD,GAAX,CAAe0E,OAAf,GAAyB,CAAC,CAACpE,KAFlC;AAGH,KAJI,MAKA;AACDN,MAAAA,GAAG,CAACM,KAAJ,GAAYA,KAAZ;AACH;;AACD,WAAOgD,IAAP;AACH,GArCgC,EAqC9B,CAAC8M,KAAD,CArC8B,CAAjC;;AAsCA,QAAMoB,QAAQ,GAAIvN,IAAD,IAAU;AACvB,QAAI,CAACgE,SAAS,CAACG,OAAV,CAAkBnE,IAAlB,CAAD,IACC,CAACqM,gBAAgB,CAAClI,OAAjB,CAAyBmI,KAA1B,IAAmC,CAACD,gBAAgB,CAAClI,OAAjB,CAAyBoI,WADlE,EACgF;AAC5E,aAAO,KAAP;AACH;;AACD,UAAMiB,YAAY,GAAGtE,kBAAkB,CAAC8C,kBAAkB,CAAC7H,OAApB,EAA6BnE,IAA7B,CAAvC;AACA,UAAMyN,yBAAyB,GAAGvC,cAAc,CAAC/G,OAAf,CAAuBuJ,IAAzD;AACA,QAAIC,OAAO,GAAGrC,sBAAsB,CAACnH,OAAvB,CAA+BnE,IAA/B,MACVqB,aAAa,CAAC2C,SAAS,CAACG,OAAX,EAAoBH,SAAS,CAACG,OAAV,CAAkBnE,IAAlB,EAAwBjE,GAA5C,CADjB;;AAEA,QAAIyR,YAAJ,EAAkB;AACd,YAAMI,cAAc,GAAG5N,IAAI,CAAC6N,SAAL,CAAe,CAAf,EAAkB7N,IAAI,CAAC8N,OAAL,CAAa,GAAb,CAAlB,CAAvB;AACAH,MAAAA,OAAO,GAAGlF,oBAAoB,CAACF,mBAAmB,CAACvE,SAAS,CAACG,OAAX,EAAoByJ,cAApB,CAApB,EAAyDtP,GAAG,CAACiN,gBAAgB,CAACpH,OAAlB,EAA2ByJ,cAA3B,CAA5D,CAA9B;AACH;;AACD,UAAMG,cAAc,GAAG,CAACP,YAAY,GAAG7B,UAAU,CAACxH,OAAd,GAAwB+G,cAAc,CAAC/G,OAAf,CAAuBjB,GAAvB,CAA2BlD,IAA3B,CAArC,MACnB2N,OADJ;;AAEA,QAAIA,OAAJ,EAAa;AACTzC,MAAAA,cAAc,CAAC/G,OAAf,CAAuB2D,GAAvB,CAA2B9H,IAA3B;AACH,KAFD,MAGK;AACDkL,MAAAA,cAAc,CAAC/G,OAAf,CAAuB6I,MAAvB,CAA8BhN,IAA9B;AACH;;AACD2L,IAAAA,UAAU,CAACxH,OAAX,GAAqBqJ,YAAY,GAAGG,OAAH,GAAa,CAAC,CAACzC,cAAc,CAAC/G,OAAf,CAAuBuJ,IAAvE;AACA,WAAOrB,gBAAgB,CAAClI,OAAjB,CAAyBmI,KAAzB,GACDyB,cADC,GAEDN,yBAAyB,KAAKvC,cAAc,CAAC/G,OAAf,CAAuBuJ,IAF3D;AAGH,GAzBD;;AA0BA,QAAMM,gBAAgB,GAAGxD,WAAW,CAAC,CAACxK,IAAD,EAAO3D,KAAP,KAAiB;AAClD4Q,IAAAA,aAAa,CAACjN,IAAD,EAAO3D,KAAP,CAAb;;AACA,QAAIkR,QAAQ,CAACvN,IAAD,CAAR,IACC,CAAC1B,GAAG,CAACwM,gBAAgB,CAAC3G,OAAlB,EAA2BnE,IAA3B,CAAJ,IACGqM,gBAAgB,CAAClI,OAAjB,CAAyBsI,OAFjC,EAE2C;AACvC,aAAO,CAAC,CAACrP,GAAG,CAAC0N,gBAAgB,CAAC3G,OAAlB,EAA2BnE,IAA3B,EAAiC,IAAjC,CAAZ;AACH;AACJ,GAPmC,EAOjC,CAACiN,aAAD,CAPiC,CAApC;AAQA,QAAMgB,iBAAiB,GAAGzD,WAAW,CAAC,OAAOxK,IAAP,EAAa8M,YAAb,KAA8B;AAChE,UAAMlR,KAAK,GAAGoI,SAAS,CAACG,OAAV,CAAkBnE,IAAlB,CAAd;;AACA,QAAI,CAACpE,KAAL,EAAY;AACR,aAAO,KAAP;AACH;;AACD,UAAM2G,KAAK,GAAG,MAAMwB,aAAa,CAACC,SAAD,EAAYF,wBAAZ,EAAsClI,KAAtC,CAAjC;AACAgR,IAAAA,uBAAuB,CAAC5M,IAAD,EAAOuC,KAAP,EAAc,KAAd,EAAqBuK,YAArB,CAAvB;AACA,WAAO7K,aAAa,CAACM,KAAD,CAApB;AACH,GARoC,EAQlC,CAACqK,uBAAD,EAA0B9I,wBAA1B,CARkC,CAArC;AASA,QAAMoK,uBAAuB,GAAG1D,WAAW,CAAC,MAAO2D,OAAP,IAAmB;AAC3D,UAAM;AAAExL,MAAAA;AAAF,QAAa,MAAM4D,kBAAkB,CAACC,gBAAD,EAAmB1C,wBAAnB,EAA6CyE,mBAAmB,CAACvE,SAAS,CAACG,OAAX,CAAhE,CAA3C;AACA,UAAMiK,mBAAmB,GAAG/C,UAAU,CAAClH,OAAvC;AACAkH,IAAAA,UAAU,CAAClH,OAAX,GAAqBlC,aAAa,CAACU,MAAD,CAAlC;;AACA,QAAIrG,OAAO,CAAC6R,OAAD,CAAX,EAAsB;AAClBA,MAAAA,OAAO,CAAChO,OAAR,CAAgBH,IAAI,IAAI;AACpB,cAAMuC,KAAK,GAAGjE,GAAG,CAACqE,MAAD,EAAS3C,IAAT,CAAjB;;AACA,YAAIuC,KAAJ,EAAW;AACPnF,UAAAA,GAAG,CAACyN,SAAS,CAAC1G,OAAX,EAAoBnE,IAApB,EAA0BuC,KAA1B,CAAH;AACH,SAFD,MAGK;AACD4H,UAAAA,KAAK,CAACU,SAAS,CAAC1G,OAAX,EAAoB,CAACnE,IAAD,CAApB,CAAL;AACH;AACJ,OARD;AASA2M,MAAAA,QAAQ;AACX,KAXD,MAYK;AACDC,MAAAA,uBAAuB,CAACuB,OAAD,EAAW7P,GAAG,CAACqE,MAAD,EAASwL,OAAT,CAAH,GAC5B;AAAE,SAACA,OAAD,GAAW7P,GAAG,CAACqE,MAAD,EAASwL,OAAT;AAAhB,OAD4B,GAE5B,EAFiB,EAEZC,mBAAmB,KAAK/C,UAAU,CAAClH,OAFvB,CAAvB;AAGH;;AACD,WAAOlC,aAAa,CAAC4I,SAAS,CAAC1G,OAAX,CAApB;AACH,GAtB0C,EAsBxC,CACCwI,QADD,EAECC,uBAFD,EAGC9I,wBAHD,EAIC0C,gBAJD,CAtBwC,CAA3C;AA4BA,QAAM6H,iBAAiB,GAAG7D,WAAW,CAAC,MAAO2D,OAAP,IAAmB;AACrD,UAAMtP,MAAM,GAAGsP,OAAO,IAAIlQ,MAAM,CAACiE,IAAP,CAAY8B,SAAS,CAACG,OAAtB,CAA1B;;AACA,QAAIqC,gBAAJ,EAAsB;AAClB,aAAO0H,uBAAuB,CAACrP,MAAD,CAA9B;AACH;;AACD,QAAIvC,OAAO,CAACuC,MAAD,CAAX,EAAqB;AACjB,YAAM/B,MAAM,GAAG,MAAMoJ,OAAO,CAACoI,GAAR,CAAYzP,MAAM,CAAC+B,GAAP,CAAW,MAAO5C,IAAP,IAAgB,MAAMiQ,iBAAiB,CAACjQ,IAAD,EAAO,IAAP,CAAlD,CAAZ,CAArB;AACA2O,MAAAA,QAAQ;AACR,aAAO7P,MAAM,CAACyR,KAAP,CAAa5P,OAAb,CAAP;AACH;;AACD,WAAO,MAAMsP,iBAAiB,CAACpP,MAAD,CAA9B;AACH,GAXoC,EAWlC,CAACqP,uBAAD,EAA0BD,iBAA1B,EAA6CtB,QAA7C,EAAuDnG,gBAAvD,CAXkC,CAArC;AAYA,QAAMgI,QAAQ,GAAGhE,WAAW,CAAC,CAACxK,IAAD,EAAO3D,KAAP,EAAcoS,cAAd,KAAiC;AAC1D,UAAM5B,YAAY,GAAGmB,gBAAgB,CAAChO,IAAD,EAAO3D,KAAP,CAAhB,IACjBoP,aAAa,CAACtH,OADG,IAEjB6G,cAAc,CAAC7G,OAAf,CAAuBjB,GAAvB,CAA2BlD,IAA3B,CAFJ;;AAGA,QAAI6M,YAAJ,EAAkB;AACdF,MAAAA,QAAQ;AACX;;AACD,QAAI8B,cAAJ,EAAoB;AAChBJ,MAAAA,iBAAiB,CAACrO,IAAD,CAAjB;AACH;;AACD;AACH,GAX2B,EAWzB,CAAC2M,QAAD,EAAWqB,gBAAX,EAA6BK,iBAA7B,CAXyB,CAA5B;AAYAvC,EAAAA,eAAe,CAAC3H,OAAhB,GAA0B2H,eAAe,CAAC3H,OAAhB,GACpB2H,eAAe,CAAC3H,OADI,GAEpB,OAAO;AAAE9E,IAAAA,IAAF;AAAQ4K,IAAAA;AAAR,GAAP,KAA4B;AAC1B,UAAMjK,IAAI,GAAGiK,MAAM,GAAGA,MAAM,CAACjK,IAAV,GAAiB,EAApC;AACA,UAAMnB,MAAM,GAAGmF,SAAS,CAACG,OAAzB;AACA,UAAMxB,MAAM,GAAGkI,SAAS,CAAC1G,OAAzB;AACA,UAAMvI,KAAK,GAAGiD,MAAM,CAACmB,IAAD,CAApB;AACA,UAAM0O,YAAY,GAAGpQ,GAAG,CAACqE,MAAD,EAAS3C,IAAT,CAAxB;AACA,QAAIuC,KAAJ;;AACA,QAAI,CAAC3G,KAAL,EAAY;AACR;AACH;;AACD,UAAMqM,WAAW,GAAG5I,IAAI,KAAK1E,MAAM,CAACC,IAApC;AACA,UAAM+T,oBAAoB,GAAG5G,cAAc,CAAC;AACxCC,MAAAA,QAAQ,EAAE,CAAC,CAAC0G,YAD4B;AAExCzG,MAAAA,WAFwC;AAGxCC,MAAAA,UAHwC;AAIxCC,MAAAA,oBAJwC;AAKxCC,MAAAA,QALwC;AAMxCC,MAAAA,kBANwC;AAOxCC,MAAAA,WAAW,EAAEoD,cAAc,CAACvH;AAPY,KAAD,CAA3C;AASA,UAAMyK,iBAAiB,GAAGrB,QAAQ,CAACvN,IAAD,CAAlC;AACA,QAAI6O,iBAAiB,GAAGpD,aAAa,CAACtH,OAAd,IACpB6G,cAAc,CAAC7G,OAAf,CAAuBjB,GAAvB,CAA2BlD,IAA3B,CADoB,IAEpB4O,iBAFJ;;AAGA,QAAI3G,WAAW,IACX,CAAC3J,GAAG,CAACwM,gBAAgB,CAAC3G,OAAlB,EAA2BnE,IAA3B,CADJ,IAEAqM,gBAAgB,CAAClI,OAAjB,CAAyBsI,OAF7B,EAEsC;AAClCrP,MAAAA,GAAG,CAAC0N,gBAAgB,CAAC3G,OAAlB,EAA2BnE,IAA3B,EAAiC,IAAjC,CAAH;AACA6O,MAAAA,iBAAiB,GAAG,IAApB;AACH;;AACD,QAAIF,oBAAJ,EAA0B;AACtB,aAAOE,iBAAiB,IAAIlC,QAAQ,EAApC;AACH;;AACD,QAAInG,gBAAJ,EAAsB;AAClB,YAAM;AAAE7D,QAAAA;AAAF,UAAa,MAAM4D,kBAAkB,CAACC,gBAAD,EAAmB1C,wBAAnB,EAA6CyE,mBAAmB,CAAC1J,MAAD,CAAhE,CAA3C;AACA,YAAMuP,mBAAmB,GAAG/C,UAAU,CAAClH,OAAvC;AACAkH,MAAAA,UAAU,CAAClH,OAAX,GAAqBlC,aAAa,CAACU,MAAD,CAAlC;AACAJ,MAAAA,KAAK,GAAIjE,GAAG,CAACqE,MAAD,EAAS3C,IAAT,CAAH,GACH;AAAE,SAACA,IAAD,GAAQ1B,GAAG,CAACqE,MAAD,EAAS3C,IAAT;AAAb,OADG,GAEH,EAFN;;AAGA,UAAIoO,mBAAmB,KAAK/C,UAAU,CAAClH,OAAvC,EAAgD;AAC5C0K,QAAAA,iBAAiB,GAAG,IAApB;AACH;AACJ,KAVD,MAWK;AACDtM,MAAAA,KAAK,GAAG,MAAMwB,aAAa,CAACC,SAAD,EAAYF,wBAAZ,EAAsClI,KAAtC,CAA3B;AACH;;AACD,QAAI,CAACgR,uBAAuB,CAAC5M,IAAD,EAAOuC,KAAP,CAAxB,IAAyCsM,iBAA7C,EAAgE;AAC5DlC,MAAAA,QAAQ;AACX;AACJ,GApDL;AAqDA,QAAMmC,qBAAqB,GAAGtE,WAAW,CAAC,MAAM;AAC5C,UAAM/C,WAAW,GAAGxF,aAAa,CAACsJ,gBAAgB,CAACpH,OAAlB,CAAb,GACd3C,eAAe,CAACwC,SAAS,CAACG,OAAX,CADD,GAEdoH,gBAAgB,CAACpH,OAFvB;AAGAoC,IAAAA,kBAAkB,CAACC,gBAAD,EAAmB1C,wBAAnB,EAA6C/F,qBAAqB,CAAC0J,WAAD,CAAlE,CAAlB,CAAmGsH,IAAnG,CAAwG,CAAC;AAAEpM,MAAAA;AAAF,KAAD,KAAgB;AACpH,YAAMyL,mBAAmB,GAAG/C,UAAU,CAAClH,OAAvC;AACAkH,MAAAA,UAAU,CAAClH,OAAX,GAAqBlC,aAAa,CAACU,MAAD,CAAlC;;AACA,UAAIyL,mBAAmB,KAAK/C,UAAU,CAAClH,OAAvC,EAAgD;AAC5CwI,QAAAA,QAAQ;AACX;AACJ,KAND;AAOH,GAXwC,EAWtC,CAACA,QAAD,EAAW7I,wBAAX,EAAqC0C,gBAArC,CAXsC,CAAzC;AAYA,QAAMwI,aAAa,GAAGxE,WAAW,CAAExK,IAAD,IAAU;AACxC6K,IAAAA,SAAS,CAAC1G,OAAV,GAAoBgG,KAAK,CAACU,SAAS,CAAC1G,OAAX,EAAoB,CAACnE,IAAD,CAApB,CAAzB;AACA8K,IAAAA,gBAAgB,CAAC3G,OAAjB,GAA2BgG,KAAK,CAACW,gBAAgB,CAAC3G,OAAlB,EAA2B,CAACnE,IAAD,CAA3B,CAAhC;AACAsL,IAAAA,sBAAsB,CAACnH,OAAvB,GAAiCgG,KAAK,CAACmB,sBAAsB,CAACnH,OAAxB,EAAiC,CACnEnE,IADmE,CAAjC,CAAtC;AAGA,KACIkL,cADJ,EAEIC,uBAFJ,EAGIC,cAHJ,EAIIJ,cAJJ,EAKE7K,OALF,CAKUnC,IAAI,IAAIA,IAAI,CAACmG,OAAL,CAAa6I,MAAb,CAAoBhN,IAApB,CALlB;;AAMA,QAAIqM,gBAAgB,CAAClI,OAAjB,CAAyB5D,OAAzB,IACA8L,gBAAgB,CAAClI,OAAjB,CAAyBsI,OAD7B,EACsC;AAClCE,MAAAA,QAAQ;AACX;;AACD,QAAInG,gBAAJ,EAAsB;AAClBsI,MAAAA,qBAAqB;AACxB;AACJ,GAnBgC,EAmB9B,CAACnC,QAAD,CAnB8B,CAAjC;;AAoBA,QAAMsC,wBAAwB,GAAG,CAACrT,KAAD,EAAQmE,WAAR,KAAwB;AACrD,QAAI,CAAC9D,WAAW,CAAC6P,eAAe,CAAC3H,OAAjB,CAAZ,IAAyCvI,KAA7C,EAAoD;AAChDkE,MAAAA,iCAAiC,CAACkE,SAAS,CAACG,OAAX,EAAoB2H,eAAe,CAAC3H,OAApC,EAA6CvI,KAA7C,EAAoDmE,WAApD,CAAjC;AACH;AACJ,GAJD;;AAKA,QAAMmP,8BAA8B,GAAG1E,WAAW,CAAC,CAAC5O,KAAD,EAAQmE,WAAR,KAAwB;AACvE,QAAI,CAACnE,KAAD,IACCA,KAAK,IACFsN,kBAAkB,CAAC8C,kBAAkB,CAAC7H,OAApB,EAA6BvI,KAAK,CAACG,GAAN,CAAUiE,IAAvC,CADrB,IAEG,CAACD,WAHT,EAGuB;AACnB;AACH;;AACDkP,IAAAA,wBAAwB,CAACrT,KAAD,EAAQmE,WAAR,CAAxB;AACAiP,IAAAA,aAAa,CAACpT,KAAK,CAACG,GAAN,CAAUiE,IAAX,CAAb;AACH,GATiD,EAS/C,CAACgP,aAAD,CAT+C,CAAlD;;AAUA,WAASG,UAAT,CAAoBnP,IAApB,EAA0B;AACtB,QAAI/D,WAAW,CAAC+D,IAAD,CAAf,EAAuB;AACnB6K,MAAAA,SAAS,CAAC1G,OAAV,GAAoB,EAApB;AACH,KAFD,MAGK;AACDgG,MAAAA,KAAK,CAACU,SAAS,CAAC1G,OAAX,EAAoB7H,OAAO,CAAC0D,IAAD,CAAP,GAAgBA,IAAhB,GAAuB,CAACA,IAAD,CAA3C,CAAL;AACH;;AACD2M,IAAAA,QAAQ;AACX;;AACD,QAAMyC,gBAAgB,GAAG,CAAC;AAAEpP,IAAAA,IAAF;AAAQX,IAAAA,IAAR;AAAcmD,IAAAA,KAAd;AAAqBC,IAAAA,OAArB;AAA8B4M,IAAAA;AAA9B,GAAD,KAAoD;AACzE,UAAMzT,KAAK,GAAGoI,SAAS,CAACG,OAAV,CAAkBnE,IAAlB,CAAd;;AACA,QAAI,CAACsC,WAAW,CAACuI,SAAS,CAAC1G,OAAV,CAAkBnE,IAAlB,CAAD,EAA0B;AACtCX,MAAAA,IADsC;AAEtCoD,MAAAA,OAFsC;AAGtCD,MAAAA;AAHsC,KAA1B,CAAhB,EAII;AACApF,MAAAA,GAAG,CAACyN,SAAS,CAAC1G,OAAX,EAAoBnE,IAApB,EAA0B;AACzBX,QAAAA,IADyB;AAEzBmD,QAAAA,KAFyB;AAGzBC,QAAAA,OAHyB;AAIzB1G,QAAAA,GAAG,EAAEH,KAAK,GAAGA,KAAK,CAACG,GAAT,GAAe,EAJA;AAKzBoH,QAAAA,QAAQ,EAAE;AALe,OAA1B,CAAH;;AAOA,UAAI,CAACkM,aAAL,EAAoB;AAChB1C,QAAAA,QAAQ;AACX;AACJ;AACJ,GAlBD;;AAmBA,WAAS2C,QAAT,CAAkBtP,IAAlB,EAAwBX,IAAI,GAAG,EAA/B,EAAmCoD,OAAnC,EAA4C;AACxC,QAAIlB,QAAQ,CAACvB,IAAD,CAAZ,EAAoB;AAChBoP,MAAAA,gBAAgB,CAACnR,MAAM,CAACI,MAAP,CAAc;AAAE2B,QAAAA;AAAF,OAAd,EAAyBvD,QAAQ,CAAC4C,IAAD,CAAR,GACpC;AACEmD,QAAAA,KAAK,EAAEnD,IADT;AAEEA,QAAAA,IAAI,EAAE;AAFR,OADoC,GAKpC;AACEA,QAAAA,IADF;AAEEoD,QAAAA;AAFF,OALW,CAAD,CAAhB;AASH,KAVD,MAWK,IAAInG,OAAO,CAAC0D,IAAD,CAAX,EAAmB;AACpBA,MAAAA,IAAI,CAACG,OAAL,CAAaoC,KAAK,IAAI6M,gBAAgB,CAACnR,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBkE,KAAlB,CAAd,EAAwC;AAAE8M,QAAAA,aAAa,EAAE;AAAjB,OAAxC,CAAD,CAAtC;AACA1C,MAAAA,QAAQ;AACX;AACJ;;AACD,WAAS4C,KAAT,CAAeC,UAAf,EAA2BhR,YAA3B,EAAyC;AACrC,UAAMoJ,qBAAqB,GAAG3L,WAAW,CAACuC,YAAD,CAAX,GACxBvC,WAAW,CAACsP,gBAAgB,CAACpH,OAAlB,CAAX,GACI,EADJ,GAEIoH,gBAAgB,CAACpH,OAHG,GAIxB3F,YAJN;AAKA,UAAMiJ,WAAW,GAAGjG,eAAe,CAACwC,SAAS,CAACG,OAAX,EAAoBqL,UAApB,CAAnC;AACA,UAAM7H,WAAW,GAAGqD,cAAc,CAAC7G,OAAnC;;AACA,QAAIiI,cAAJ,EAAoB;AAChBC,MAAAA,gBAAgB,CAAClI,OAAjB,CAAyBmI,KAAzB,GAAiC,IAAjC;AACH;;AACD,QAAI/K,QAAQ,CAACiO,UAAD,CAAZ,EAA0B;AACtB,aAAOhI,iBAAiB,CAACC,WAAD,EAAc+H,UAAd,EAA0B7H,WAA1B,EAAuCC,qBAAvC,EAA8DoE,kBAAkB,CAAC7H,OAAnB,CAA2BjB,GAA3B,CAA+BsM,UAA/B,IAChFzE,kBAAkB,CAAC5G,OAAnB,CAA2BqL,UAA3B,CADgF,GAEhFrT,SAFkB,CAAxB;AAGH;;AACD,QAAIG,OAAO,CAACkT,UAAD,CAAX,EAAyB;AACrB,aAAOA,UAAU,CAACrR,MAAX,CAAkB,CAACC,QAAD,EAAW4B,IAAX,KAAoB;AACzC,YAAI3D,KAAJ;;AACA,YAAI4F,aAAa,CAAC+B,SAAS,CAACG,OAAX,CAAb,IACA1H,QAAQ,CAACmL,qBAAD,CADZ,EACqC;AACjCvL,UAAAA,KAAK,GAAGsK,eAAe,CAACiB,qBAAD,EAAwB5H,IAAxB,CAAvB;AACH,SAHD,MAIK;AACD3D,UAAAA,KAAK,GAAGmL,iBAAiB,CAACC,WAAD,EAAczH,IAAd,EAAoB2H,WAApB,EAAiCC,qBAAjC,CAAzB;AACH;;AACD,eAAO3J,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBD,QAAlB,CAAd,EAA2C;AAAE,WAAC4B,IAAD,GAAQ3D;AAAV,SAA3C,CAAP;AACH,OAVM,EAUJ,EAVI,CAAP;AAWH;;AACDoP,IAAAA,aAAa,CAACtH,OAAd,GAAwB,IAAxB;AACA,UAAMrH,MAAM,GAAI,CAACmF,aAAa,CAACwF,WAAD,CAAd,IAA+BA,WAAhC,IACXjJ,YADW,IAEX+M,gBAAgB,CAACpH,OAFrB;AAGA,WAAOqL,UAAU,IAAIA,UAAU,CAAC1N,IAAzB,GACD/D,qBAAqB,CAACjB,MAAD,CADpB,GAEDA,MAFN;AAGH;;AACD,WAAS2S,UAAT,CAAoBtG,KAApB,EAA2B;AACvB,QAAI,CAAClH,aAAa,CAAC+B,SAAS,CAACG,OAAX,CAAlB,EAAuC;AACnC,OAAC7H,OAAO,CAAC6M,KAAD,CAAP,GAAiBA,KAAjB,GAAyB,CAACA,KAAD,CAA1B,EAAmChJ,OAAnC,CAA2CuH,SAAS,IAAIwH,8BAA8B,CAAClL,SAAS,CAACG,OAAV,CAAkBuD,SAAlB,CAAD,EAA+B,IAA/B,CAAtF;AACH;AACJ;;AACD,WAASgI,iBAAT,CAA2B3T,GAA3B,EAAgC4T,eAAe,GAAG,EAAlD,EAAsD;AAClD,QAAI,CAAC5T,GAAG,CAACiE,IAAT,EAAe;AACX,aAAO4P,OAAO,CAACC,IAAR,CAAa,gBAAb,EAA+B9T,GAA/B,CAAP;AACH;;AACD,UAAM;AAAEiE,MAAAA,IAAF;AAAQX,MAAAA,IAAR;AAAchD,MAAAA;AAAd,QAAwBN,GAA9B;AACA,UAAM+T,eAAe,GAAG7R,MAAM,CAACI,MAAP,CAAc;AAAEtC,MAAAA;AAAF,KAAd,EAAuB4T,eAAvB,CAAxB;AACA,UAAM9Q,MAAM,GAAGmF,SAAS,CAACG,OAAzB;AACA,UAAMrI,iBAAiB,GAAGsD,YAAY,CAACC,IAAD,CAAZ,IAAsBC,eAAe,CAACD,IAAD,CAA/D;AACA,QAAI0Q,YAAY,GAAGlR,MAAM,CAACmB,IAAD,CAAzB;AACA,QAAIgQ,mBAAmB,GAAG,IAA1B;AACA,QAAIxC,YAAY,GAAG,KAAnB;AACA,QAAIhP,YAAJ;;AACA,QAAI1C,iBAAiB,GACfiU,YAAY,IACVzT,OAAO,CAACyT,YAAY,CAAC/Q,OAAd,CADT,IAEE+Q,YAAY,CAAC/Q,OAAb,CAAqBgD,IAArB,CAA0B,CAAC;AAAEjG,MAAAA;AAAF,KAAD,KAAaM,KAAK,KAAKN,GAAG,CAACM,KAArD,CAHa,GAIf0T,YAJN,EAIoB;AAChBlR,MAAAA,MAAM,CAACmB,IAAD,CAAN,GAAe/B,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkB0R,YAAlB,CAAd,EAA+CJ,eAA/C,CAAf;AACA;AACH;;AACD,QAAItQ,IAAJ,EAAU;AACN,YAAMY,eAAe,GAAGsJ,WAAW,CAACxN,GAAD,EAAM,MAAMmT,8BAA8B,CAACY,eAAD,CAA1C,CAAnC;AACAC,MAAAA,YAAY,GAAGjU,iBAAiB,GAC1BmC,MAAM,CAACI,MAAP,CAAc;AAAEW,QAAAA,OAAO,EAAE,CACnB,IAAK+Q,YAAY,IAAIA,YAAY,CAAC/Q,OAA9B,IAA0C,EAA9C,CADmB,EAEnB;AACIjD,UAAAA,GADJ;AAEIkE,UAAAA;AAFJ,SAFmB,CAAX;AAMTlE,QAAAA,GAAG,EAAE;AAAEsD,UAAAA,IAAF;AAAQW,UAAAA;AAAR;AANI,OAAd,EAM4B2P,eAN5B,CAD0B,GAOqB1R,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkByR,eAAlB,CAAd,EAAkD;AAAE7P,QAAAA;AAAF,OAAlD,CAPrD;AAQH,KAVD,MAWK;AACD8P,MAAAA,YAAY,GAAGD,eAAf;AACH;;AACDjR,IAAAA,MAAM,CAACmB,IAAD,CAAN,GAAe+P,YAAf;;AACA,QAAI,CAAC9N,aAAa,CAACsJ,gBAAgB,CAACpH,OAAlB,CAAlB,EAA8C;AAC1C3F,MAAAA,YAAY,GAAGmI,eAAe,CAAC4E,gBAAgB,CAACpH,OAAlB,EAA2BnE,IAA3B,CAA9B;AACAgQ,MAAAA,mBAAmB,GAAG/T,WAAW,CAACuC,YAAD,CAAjC;AACAgP,MAAAA,YAAY,GAAGtE,kBAAkB,CAAC8C,kBAAkB,CAAC7H,OAApB,EAA6BnE,IAA7B,CAAjC;;AACA,UAAI,CAACgQ,mBAAD,IAAwB,CAACxC,YAA7B,EAA2C;AACvCP,QAAAA,aAAa,CAACjN,IAAD,EAAOxB,YAAP,CAAb;AACH;AACJ;;AACD,QAAIgI,gBAAgB,IAAI6F,gBAAgB,CAAClI,OAAjB,CAAyB5D,OAAjD,EAA0D;AACtDuO,MAAAA,qBAAqB;AACxB,KAFD,MAGK,IAAI,CAAC7M,aAAa,CAAC0N,eAAD,CAAlB,EAAqC;AACtCxE,MAAAA,uBAAuB,CAAChH,OAAxB,CAAgC2D,GAAhC,CAAoC9H,IAApC;;AACA,UAAI,CAACkI,UAAD,IAAemE,gBAAgB,CAAClI,OAAjB,CAAyB5D,OAA5C,EAAqD;AACjDwD,QAAAA,aAAa,CAACC,SAAD,EAAYF,wBAAZ,EAAsCiM,YAAtC,CAAb,CAAiEhB,IAAjE,CAAsExM,KAAK,IAAI;AAC3E,gBAAM6L,mBAAmB,GAAG/C,UAAU,CAAClH,OAAvC;;AACA,cAAIlC,aAAa,CAACM,KAAD,CAAjB,EAA0B;AACtB6I,YAAAA,cAAc,CAACjH,OAAf,CAAuB2D,GAAvB,CAA2B9H,IAA3B;AACH,WAFD,MAGK;AACDqL,YAAAA,UAAU,CAAClH,OAAX,GAAqB,KAArB;AACH;;AACD,cAAIiK,mBAAmB,KAAK/C,UAAU,CAAClH,OAAvC,EAAgD;AAC5CwI,YAAAA,QAAQ;AACX;AACJ,SAXD;AAYH;AACJ;;AACD,QAAI,CAACrB,sBAAsB,CAACnH,OAAvB,CAA+BnE,IAA/B,CAAD,IACA,EAAEwN,YAAY,IAAIwC,mBAAlB,CADJ,EAC4C;AACxC1E,MAAAA,sBAAsB,CAACnH,OAAvB,CAA+BnE,IAA/B,IAAuCgQ,mBAAmB,GACpD3O,aAAa,CAACxC,MAAD,EAASkR,YAAY,CAAChU,GAAtB,CADuC,GAEpDyC,YAFN;AAGH;;AACD,QAAI,CAACa,IAAL,EAAW;AACP;AACH;;AACD,UAAM4Q,qBAAqB,GAAGnU,iBAAiB,IAAIiU,YAAY,CAAC/Q,OAAlC,GACxB+Q,YAAY,CAAC/Q,OAAb,CAAqB+Q,YAAY,CAAC/Q,OAAb,CAAqBvB,MAArB,GAA8B,CAAnD,CADwB,GAExBsS,YAFN;AAGApU,IAAAA,oBAAoB,CAAC;AACjBC,MAAAA,KAAK,EAAEqU,qBADU;AAEjBnU,MAAAA,iBAFiB;AAGjBD,MAAAA,YAAY,EAAEiQ,eAAe,CAAC3H;AAHb,KAAD,CAApB;AAKH;;AACD,WAAS+L,QAAT,CAAkBC,sBAAlB,EAA0CC,iBAA1C,EAA6D;AACzD,QAAIlE,iBAAJ,EAAuB;AACnB;AACH;;AACD,QAAI3K,QAAQ,CAAC4O,sBAAD,CAAZ,EAAsC;AAClCT,MAAAA,iBAAiB,CAAC;AAAE1P,QAAAA,IAAI,EAAEmQ;AAAR,OAAD,EAAmCC,iBAAnC,CAAjB;AACA;AACH;;AACD,QAAI3T,QAAQ,CAAC0T,sBAAD,CAAR,IAAoC,UAAUA,sBAAlD,EAA0E;AACtET,MAAAA,iBAAiB,CAACS,sBAAD,EAAyBC,iBAAzB,CAAjB;AACA;AACH;;AACD,WAAQrU,GAAD,IAASA,GAAG,IAAI2T,iBAAiB,CAAC3T,GAAD,EAAMoU,sBAAN,CAAxC;AACH;;AACD,QAAME,YAAY,GAAG7F,WAAW,CAAE8F,QAAD,IAAc,MAAO5J,CAAP,IAAa;AACxD,QAAIA,CAAJ,EAAO;AACHA,MAAAA,CAAC,CAAC6J,cAAF;AACA7J,MAAAA,CAAC,CAAC8J,OAAF;AACH;;AACD,QAAI1R,WAAJ;AACA,QAAI2I,WAAJ;AACA,UAAM5I,MAAM,GAAGmF,SAAS,CAACG,OAAzB;;AACA,QAAIkI,gBAAgB,CAAClI,OAAjB,CAAyBuI,YAA7B,EAA2C;AACvCb,MAAAA,eAAe,CAAC1H,OAAhB,GAA0B,IAA1B;AACAwI,MAAAA,QAAQ;AACX;;AACD,QAAI;AACA,UAAInG,gBAAJ,EAAsB;AAClBiB,QAAAA,WAAW,GAAGjG,eAAe,CAAC3C,MAAD,CAA7B;AACA,cAAM;AAAE8D,UAAAA,MAAF;AAAUxB,UAAAA;AAAV,YAAqB,MAAMoF,kBAAkB,CAACC,gBAAD,EAAmB1C,wBAAnB,EAA6C/F,qBAAqB,CAAC0J,WAAD,CAAlE,CAAnD;AACAoD,QAAAA,SAAS,CAAC1G,OAAV,GAAoBxB,MAApB;AACA7D,QAAAA,WAAW,GAAG6D,MAAd;AACA8E,QAAAA,WAAW,GAAGtG,MAAd;AACH,OAND,MAOK;AACD,cAAM;AAAEwB,UAAAA,MAAF;AAAUxB,UAAAA;AAAV,YAAsB,MAAMlD,MAAM,CAACkD,MAAP,CAActC,MAAd,EAAsBV,MAAtB,CAA6B,OAAOC,QAAP,EAAiBxC,KAAjB,KAA2B;AACtF,cAAI,CAACA,KAAL,EAAY;AACR,mBAAOwC,QAAP;AACH;;AACD,gBAAMqS,gBAAgB,GAAG,MAAMrS,QAA/B;AACA,gBAAM;AAAErC,YAAAA,GAAF;AAAOA,YAAAA,GAAG,EAAE;AAAEiE,cAAAA;AAAF;AAAZ,cAA0BpE,KAAhC;;AACA,cAAI,CAACiD,MAAM,CAACmB,IAAD,CAAX,EAAmB;AACf,mBAAOkG,OAAO,CAACC,OAAR,CAAgBsK,gBAAhB,CAAP;AACH;;AACD,gBAAMC,UAAU,GAAG,MAAM3M,aAAa,CAACC,SAAD,EAAYF,wBAAZ,EAAsClI,KAAtC,CAAtC;;AACA,cAAI8U,UAAU,CAAC1Q,IAAD,CAAd,EAAsB;AAClB5C,YAAAA,GAAG,CAACqT,gBAAgB,CAAC9N,MAAlB,EAA0B3C,IAA1B,EAAgC0Q,UAAU,CAAC1Q,IAAD,CAA1C,CAAH;AACAoL,YAAAA,cAAc,CAACjH,OAAf,CAAuB6I,MAAvB,CAA8BhN,IAA9B;AACA,mBAAOkG,OAAO,CAACC,OAAR,CAAgBsK,gBAAhB,CAAP;AACH;;AACD,cAAItF,uBAAuB,CAAChH,OAAxB,CAAgCjB,GAAhC,CAAoClD,IAApC,CAAJ,EAA+C;AAC3CoL,YAAAA,cAAc,CAACjH,OAAf,CAAuB2D,GAAvB,CAA2B9H,IAA3B;AACH;;AACDyQ,UAAAA,gBAAgB,CAACtP,MAAjB,CAAwBnB,IAAxB,IAAgCqB,aAAa,CAACxC,MAAD,EAAS9C,GAAT,CAA7C;AACA,iBAAOmK,OAAO,CAACC,OAAR,CAAgBsK,gBAAhB,CAAP;AACH,SApBiC,EAoB/BvK,OAAO,CAACC,OAAR,CAAgB;AACfxD,UAAAA,MAAM,EAAE,EADO;AAEfxB,UAAAA,MAAM,EAAE;AAFO,SAAhB,CApB+B,CAAlC;AAwBArC,QAAAA,WAAW,GAAG6D,MAAd;AACA8E,QAAAA,WAAW,GAAGtG,MAAd;AACH;;AACD,UAAIc,aAAa,CAACnD,WAAD,CAAjB,EAAgC;AAC5B+L,QAAAA,SAAS,CAAC1G,OAAV,GAAoB,EAApB;AACA,cAAMmM,QAAQ,CAACvS,qBAAqB,CAAC0J,WAAD,CAAtB,EAAqCf,CAArC,CAAd;AACH,OAHD,MAIK;AACD,YAAIiE,gBAAJ,EAAsB;AAClB/L,UAAAA,eAAe,CAACC,MAAD,EAASC,WAAT,CAAf;AACH;;AACD+L,QAAAA,SAAS,CAAC1G,OAAV,GAAoBrF,WAApB;AACH;AACJ,KA9CD,SA+CQ;AACJ4M,MAAAA,cAAc,CAACvH,OAAf,GAAyB,IAAzB;AACA0H,MAAAA,eAAe,CAAC1H,OAAhB,GAA0B,KAA1B;AACAyH,MAAAA,cAAc,CAACzH,OAAf,GAAyByH,cAAc,CAACzH,OAAf,GAAyB,CAAlD;AACAwI,MAAAA,QAAQ;AACX;AACJ,GAjE+B,EAiE7B,CAACA,QAAD,EAAWhC,gBAAX,EAA6B7G,wBAA7B,EAAuD0C,gBAAvD,CAjE6B,CAAhC;;AAkEA,QAAMmK,SAAS,GAAG,MAAM;AACpB9F,IAAAA,SAAS,CAAC1G,OAAV,GAAoB,EAApB;AACAH,IAAAA,SAAS,CAACG,OAAV,GAAoB,EAApB;AACA2G,IAAAA,gBAAgB,CAAC3G,OAAjB,GAA2B,EAA3B;AACAiH,IAAAA,cAAc,CAACjH,OAAf,GAAyB,IAAI8G,GAAJ,EAAzB;AACAE,IAAAA,uBAAuB,CAAChH,OAAxB,GAAkC,IAAI8G,GAAJ,EAAlC;AACAK,IAAAA,sBAAsB,CAACnH,OAAvB,GAAiC,EAAjC;AACA6G,IAAAA,cAAc,CAAC7G,OAAf,GAAyB,IAAI8G,GAAJ,EAAzB;AACAC,IAAAA,cAAc,CAAC/G,OAAf,GAAyB,IAAI8G,GAAJ,EAAzB;AACAQ,IAAAA,aAAa,CAACtH,OAAd,GAAwB,KAAxB;AACAuH,IAAAA,cAAc,CAACvH,OAAf,GAAyB,KAAzB;AACAwH,IAAAA,UAAU,CAACxH,OAAX,GAAqB,KAArB;AACAkH,IAAAA,UAAU,CAAClH,OAAX,GAAqB,IAArB;AACAyH,IAAAA,cAAc,CAACzH,OAAf,GAAyB,CAAzB;AACH,GAdD;;AAeA,QAAMyM,KAAK,GAAIzP,MAAD,IAAY;AACtB,SAAK,MAAM9E,KAAX,IAAoB4B,MAAM,CAACkD,MAAP,CAAc6C,SAAS,CAACG,OAAxB,CAApB,EAAsD;AAClD,UAAI9H,KAAK,IAAIA,KAAK,CAACN,GAAf,IAAsBM,KAAK,CAACN,GAAN,CAAU8U,OAApC,EAA6C;AACzC,YAAI;AACAxU,UAAAA,KAAK,CAACN,GAAN,CAAU8U,OAAV,CAAkB,MAAlB,EAA0BD,KAA1B;AACA;AACH,SAHD,CAIA,OAAOE,EAAP,EAAW,CAAG;AACjB;AACJ;;AACD,QAAI3P,MAAJ,EAAY;AACRoK,MAAAA,gBAAgB,CAACpH,OAAjB,GAA2BhD,MAA3B;AACH;;AACDlD,IAAAA,MAAM,CAACkD,MAAP,CAAc4K,0BAA0B,CAAC5H,OAAzC,EAAkDhE,OAAlD,CAA0D4Q,eAAe,IAAItN,UAAU,CAACsN,eAAD,CAAV,IAA+BA,eAAe,EAA3H;AACAJ,IAAAA,SAAS;AACThE,IAAAA,QAAQ;AACX,GAhBD;;AAiBA,QAAMqE,SAAS,GAAI7C,OAAD,IAAa;AAC3B,UAAM1G,WAAW,GAAGjG,eAAe,CAACwC,SAAS,CAACG,OAAX,CAAnC;AACA,UAAM8M,YAAY,GAAGhP,aAAa,CAACwF,WAAD,CAAb,GACf8D,gBAAgB,CAACpH,OADF,GAEfsD,WAFN;AAGA,WAAO0G,OAAO,IAAIA,OAAO,CAACrM,IAAnB,GACD/D,qBAAqB,CAACkT,YAAD,CADpB,GAEDA,YAFN;AAGH,GARD;;AASAnX,EAAAA,SAAS,CAAC,MAAM,MAAM;AAClB0R,IAAAA,SAAS,CAACrH,OAAV,GAAoB,IAApB;AACAH,IAAAA,SAAS,CAACG,OAAV,IACIlG,MAAM,CAACkD,MAAP,CAAc6C,SAAS,CAACG,OAAxB,EAAiChE,OAAjC,CAA0CvE,KAAD,IAAWsT,8BAA8B,CAACtT,KAAD,EAAQ,IAAR,CAAlF,CADJ;AAEH,GAJQ,EAIN,CAACsT,8BAAD,CAJM,CAAT;;AAKA,MAAI,CAAC1I,gBAAL,EAAuB;AACnB6E,IAAAA,UAAU,CAAClH,OAAX,GACIiH,cAAc,CAACjH,OAAf,CAAuBuJ,IAAvB,IAA+BvC,uBAAuB,CAAChH,OAAxB,CAAgCuJ,IAA/D,IACIzL,aAAa,CAAC4I,SAAS,CAAC1G,OAAX,CAFrB;AAGH;;AACD,QAAM+M,SAAS,GAAG;AACd5E,IAAAA,KAAK,EAAEX,UAAU,CAACxH,OADJ;AAEdoI,IAAAA,WAAW,EAAErB,cAAc,CAAC/G,OAFd;AAGdmE,IAAAA,WAAW,EAAEoD,cAAc,CAACvH,OAHd;AAIdqI,IAAAA,WAAW,EAAEZ,cAAc,CAACzH,OAJd;AAKdsI,IAAAA,OAAO,EAAE3B,gBAAgB,CAAC3G,OALZ;AAMduI,IAAAA,YAAY,EAAEb,eAAe,CAAC1H,OANhB;AAOd5D,IAAAA,OAAO,EAAE2H,UAAU,GACbwD,cAAc,CAACvH,OAAf,IAA0BlC,aAAa,CAAC4I,SAAS,CAAC1G,OAAX,CAD1B,GAEblC,aAAa,CAAC+B,SAAS,CAACG,OAAX,CAAb,IAAoCkH,UAAU,CAAClH;AATvC,GAAlB;AAWA,QAAMgN,OAAO,GAAG;AACZjB,IAAAA,QADY;AAEZT,IAAAA,UAFY;AAGZR,IAAAA,wBAHY;AAIZ+B,IAAAA,SAJY;AAKZxC,IAAAA,QALY;AAMZH,IAAAA,iBANY;AAOZ6C,IAAAA,SAPY;AAQZ5G,IAAAA,IAAI,EAAE;AACFlC,MAAAA,QADE;AAEFF,MAAAA;AAFE,KARM;AAYZwC,IAAAA,cAAc,EAAE;AACZrC,MAAAA,kBADY;AAEZF,MAAAA;AAFY,KAZJ;AAgBZ0C,IAAAA,SAhBY;AAiBZC,IAAAA,gBAjBY;AAkBZ9G,IAAAA,SAlBY;AAmBZ+H,IAAAA,0BAnBY;AAoBZhB,IAAAA,kBApBY;AAqBZiB,IAAAA,kBArBY;AAsBZL,IAAAA,UAtBY;AAuBZU,IAAAA,gBAvBY;AAwBZd,IAAAA;AAxBY,GAAhB;AA0BA,SAAO;AACHgE,IAAAA,KADG;AAEH4B,IAAAA,OAFG;AAGHd,IAAAA,YAHG;AAIH7B,IAAAA,QAJG;AAKHH,IAAAA,iBALG;AAMH2C,IAAAA,SAAS,EAAExG,WAAW,CAACwG,SAAD,EAAY,EAAZ,CANnB;AAOHJ,IAAAA,KAAK,EAAEpG,WAAW,CAACoG,KAAD,EAAQ,EAAR,CAPf;AAQHV,IAAAA,QAAQ,EAAE1F,WAAW,CAAC0F,QAAD,EAAW,CAC5B3E,gBAAgB,CAACpH,OADW,EAE5BmH,sBAAsB,CAACnH,OAFK,CAAX,CARlB;AAYHsL,IAAAA,UAAU,EAAEjF,WAAW,CAACiF,UAAD,EAAa,EAAb,CAZpB;AAaHN,IAAAA,UAAU,EAAE3E,WAAW,CAAC2E,UAAD,EAAa,EAAb,CAbpB;AAcHG,IAAAA,QAAQ,EAAE9E,WAAW,CAAC8E,QAAD,EAAW,EAAX,CAdlB;AAeH3M,IAAAA,MAAM,EAAEkI,SAAS,CAAC1G,OAff;AAgBH+M,IAAAA,SAAS,EAAE9E,cAAc,GACnB,IAAIgF,KAAJ,CAAUF,SAAV,EAAqB;AACnB5S,MAAAA,GAAG,EAAE,CAACC,GAAD,EAAM8S,IAAN,KAAe;AAChB,YAAIA,IAAI,IAAI9S,GAAZ,EAAiB;AACb8N,UAAAA,gBAAgB,CAAClI,OAAjB,CAAyBkN,IAAzB,IAAiC,IAAjC;AACA,iBAAO9S,GAAG,CAAC8S,IAAD,CAAV;AACH;;AACD,eAAO,EAAP;AACH;AAPkB,KAArB,CADmB,GAUnBH;AA1BH,GAAP;AA4BH;AAED;;;;;;;;;;;;;;;;AAeA,SAASI,MAAT,CAAgBC,CAAhB,EAAmB7K,CAAnB,EAAsB;AAClB,MAAI8K,CAAC,GAAG,EAAR;;AACA,OAAK,IAAIC,CAAT,IAAcF,CAAd,EAAiB,IAAItT,MAAM,CAACyT,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,CAArC,EAAwCE,CAAxC,KAA8C/K,CAAC,CAACoH,OAAF,CAAU2D,CAAV,IAAe,CAAjE,EACbD,CAAC,CAACC,CAAD,CAAD,GAAOF,CAAC,CAACE,CAAD,CAAR;;AACJ,MAAIF,CAAC,IAAI,IAAL,IAAa,OAAOtT,MAAM,CAAC4T,qBAAd,KAAwC,UAAzD,EACI,KAAK,IAAIhJ,CAAC,GAAG,CAAR,EAAW4I,CAAC,GAAGxT,MAAM,CAAC4T,qBAAP,CAA6BN,CAA7B,CAApB,EAAqD1I,CAAC,GAAG4I,CAAC,CAAChU,MAA3D,EAAmEoL,CAAC,EAApE,EAAwE;AACpE,QAAInC,CAAC,CAACoH,OAAF,CAAU2D,CAAC,CAAC5I,CAAD,CAAX,IAAkB,CAAlB,IAAuB5K,MAAM,CAACyT,SAAP,CAAiBI,oBAAjB,CAAsCF,IAAtC,CAA2CL,CAA3C,EAA8CE,CAAC,CAAC5I,CAAD,CAA/C,CAA3B,EACI2I,CAAC,CAACC,CAAC,CAAC5I,CAAD,CAAF,CAAD,GAAU0I,CAAC,CAACE,CAAC,CAAC5I,CAAD,CAAF,CAAX;AACP;AACL,SAAO2I,CAAP;AACH;;AAED,MAAMO,iBAAiB,GAAGxY,aAAa,CAAC,IAAD,CAAvC;;AACA,SAASyY,cAAT,GAA0B;AACtB,SAAOxY,UAAU,CAACuY,iBAAD,CAAjB;AACH;;AACD,SAASE,WAAT,CAAqBnB,EAArB,EAAyB;AACrB,MAAI;AAAEoB,IAAAA,QAAF;AAAYhB,IAAAA,SAAZ;AAAuBvO,IAAAA;AAAvB,MAAkCmO,EAAtC;AAAA,MAA0CqB,WAAW,GAAGb,MAAM,CAACR,EAAD,EAAK,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,CAAL,CAA9D;;AACA,SAAQrX,aAAa,CAACsY,iBAAiB,CAACK,QAAnB,EAA6B;AAAE/V,IAAAA,KAAK,EAAE4B,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkB8T,WAAlB,CAAd,EAA8C;AAAEjB,MAAAA,SAAF;AAAavO,MAAAA;AAAb,KAA9C;AAAT,GAA7B,EAA8GuP,QAA9G,CAArB;AACH;;AAED,IAAIG,UAAU,GAAG,MAAM;AACnB,QAAMC,CAAC,GAAG,OAAOC,WAAP,KAAuB7X,SAAvB,GAAmC6K,IAAI,CAACiN,GAAL,EAAnC,GAAgDD,WAAW,CAACC,GAAZ,KAAoB,IAA9E;AACA,SAAO,uCAAuCzV,OAAvC,CAA+C,OAA/C,EAAwD,UAAU0V,CAAV,EAAa;AACxE,UAAMC,CAAC,GAAG,CAACC,IAAI,CAACC,MAAL,KAAgB,EAAhB,GAAqBN,CAAtB,IAA2B,EAA3B,GAAgC,CAA1C;AACA,WAAO,CAACG,CAAC,IAAI,GAAL,GAAWC,CAAX,GAAgBA,CAAC,GAAG,GAAL,GAAY,GAA5B,EAAiC/M,QAAjC,CAA0C,EAA1C,CAAP;AACH,GAHM,CAAP;AAIH,CAND;;AAQA,MAAMkN,QAAQ,GAAIxW,KAAD,IAAY4B,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAmB5B,QAAQ,CAACJ,KAAD,CAAR,GAAkBA,KAAlB,GAA0B;AAAEA,EAAAA;AAAF,CAA7C,CAAd,EAAwE;AAAEyW,EAAAA,EAAE,EAAET,UAAU;AAAhB,CAAxE,CAA7B;;AACA,MAAMU,MAAM,GAAI/U,IAAD,IAAU,CAAC1B,OAAO,CAAC0B,IAAD,CAAP,GAAgBA,IAAhB,GAAuB,EAAxB,EAA4B4C,GAA5B,CAAgCvE,KAAK,IAAIwW,QAAQ,CAACxW,KAAD,CAAjD,CAAzB;;AAEA,IAAI2W,aAAa,GAAG,CAAChV,IAAD,EAAOT,KAAP,KAAiB,CAACtB,WAAW,CAACsB,KAAD,CAAZ,IAAuBjB,OAAO,CAAC0B,IAAD,CAA9B,GAC/B,CAAC,GAAGA,IAAI,CAACiV,KAAL,CAAW,CAAX,EAAc1V,KAAd,CAAJ,EAA0B,GAAGS,IAAI,CAACiV,KAAL,CAAW1V,KAAK,GAAG,CAAnB,CAA7B,CAD+B,GAE/B,EAFN;;AAIA,IAAI2V,WAAW,GAAG,CAAClV,IAAD,EAAOmV,IAAP,EAAaC,EAAb,KAAoB9W,OAAO,CAAC0B,IAAD,CAAP,GAAgBA,IAAI,CAACqC,MAAL,CAAY+S,EAAZ,EAAgB,CAAhB,EAAmBpV,IAAI,CAACqC,MAAL,CAAY8S,IAAZ,EAAkB,CAAlB,EAAqB,CAArB,CAAnB,CAAhB,GAA8D,EAApG;;AAEA,IAAIE,WAAW,GAAG,CAACxU,MAAD,EAASyU,MAAT,EAAiBC,MAAjB,KAA4BjX,OAAO,CAACuC,MAAD,CAAP,KACzC,CAACA,MAAM,CAACyU,MAAD,CAAP,EAAiBzU,MAAM,CAAC0U,MAAD,CAAvB,IAAmC,CAAC1U,MAAM,CAAC0U,MAAD,CAAP,EAAiB1U,MAAM,CAACyU,MAAD,CAAvB,CADM,CAA9C;;AAGA,IAAIE,SAAS,GAAG,CAACxV,IAAD,EAAO3B,KAAP,KAAiB,CAC7B,IAAIC,OAAO,CAACD,KAAD,CAAP,GAAiBA,KAAjB,GAAyB,CAACA,KAAK,IAAI,IAAV,CAA7B,CAD6B,EAE7B,GAAG2B,IAF0B,CAAjC;;AAKA,IAAIyV,QAAQ,GAAG,CAACzV,IAAD,EAAOT,KAAP,EAAclB,KAAd,KAAwB,CACnC,GAAG2B,IAAI,CAACiV,KAAL,CAAW,CAAX,EAAc1V,KAAd,CADgC,EAEnC,IAAIjB,OAAO,CAACD,KAAD,CAAP,GAAiBA,KAAjB,GAAyB,CAACA,KAAK,IAAI,IAAV,CAA7B,CAFmC,EAGnC,GAAG2B,IAAI,CAACiV,KAAL,CAAW1V,KAAX,CAHgC,CAAvC;;AAMA,IAAImW,cAAc,GAAIrX,KAAD,IAAWC,OAAO,CAACD,KAAD,CAAP,GAAiBE,KAAK,CAACF,KAAK,CAACoB,MAAP,CAAL,CAAoBkW,IAApB,CAAyB,IAAzB,CAAjB,GAAkDxX,SAAlF;;AAEA,MAAM;AAAErC,EAAAA,SAAS,EAAE8Z,WAAb;AAA0Bha,EAAAA,MAAM,EAAEia,QAAlC;AAA4Cna,EAAAA,QAAQ,EAAEoa;AAAtD,IAAqExa,KAA3E;;AACA,SAASya,aAAT,CAAuB;AAAE5C,EAAAA,OAAF;AAAWnR,EAAAA;AAAX,CAAvB,EAA0C;AACtC,QAAMgU,OAAO,GAAGhC,cAAc,EAA9B;AACA,QAAM;AAAEjG,IAAAA,0BAAF;AAA8BC,IAAAA,kBAA9B;AAAkDhI,IAAAA,SAAlD;AAA6DgN,IAAAA,SAA7D;AAAwEzF,IAAAA,gBAAxE;AAA0F0D,IAAAA,wBAA1F;AAAoHpE,IAAAA,SAApH;AAA+Hc,IAAAA,UAA/H;AAA2Ib,IAAAA,gBAA3I;AAA6JuB,IAAAA,gBAA7J;AAA+KtB,IAAAA;AAA/K,MAAuMoG,OAAO,IAAI6C,OAAO,CAAC7C,OAAhO;AACA,QAAM8C,qBAAqB,GAAGJ,QAAQ,CAACvV,GAAG,CAACiN,gBAAgB,CAACpH,OAAlB,EAA2BnE,IAA3B,EAAiC,EAAjC,CAAJ,CAAtC;AACA,QAAM,CAACnB,MAAD,EAASqV,QAAT,IAAqBJ,UAAU,CAACf,MAAM,CAACkB,qBAAqB,CAAC9P,OAAvB,CAAP,CAArC;;AACA,QAAMgQ,WAAW,GAAIC,YAAD,IAAkB;AAClC,QAAI/H,gBAAgB,CAAClI,OAAjB,CAAyBmI,KAA7B,EAAoC;AAChCX,MAAAA,UAAU,CAACxH,OAAX,GAAqBlI,WAAW,CAACmY,YAAD,CAAX,GACf,IADe,GAEf3L,oBAAoB,CAAC2L,YAAD,EAAeH,qBAAqB,CAAC9P,OAArC,CAF1B;AAGH;;AACD,SAAK,MAAMxG,GAAX,IAAkBqG,SAAS,CAACG,OAA5B,EAAqC;AACjC,UAAI6E,qBAAqB,CAACrL,GAAD,EAAMqC,IAAN,CAArB,IAAoCgE,SAAS,CAACG,OAAV,CAAkBxG,GAAlB,CAAxC,EAAgE;AAC5DsR,QAAAA,wBAAwB,CAACjL,SAAS,CAACG,OAAV,CAAkBxG,GAAlB,CAAD,EAAyB,IAAzB,CAAxB;AACH;AACJ;AACJ,GAXD;;AAYA,QAAM0W,8BAA8B,GAAG,MAAM;AACzC,UAAMC,kBAAkB,GAAGtD,SAAS,CAAC;AAAElP,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAT,CAA0B9B,IAA1B,CAA3B;;AACA,QAAI1D,OAAO,CAACgY,kBAAD,CAAX,EAAiC;AAC7B,WAAK,IAAIzL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyL,kBAAkB,CAAC7W,MAAvC,EAA+CoL,CAAC,EAAhD,EAAoD;AAChDhK,QAAAA,MAAM,CAACgK,CAAD,CAAN,GAAY5K,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBQ,MAAM,CAACgK,CAAD,CAAxB,CAAd,EAA4CyL,kBAAkB,CAACzL,CAAD,CAA9D,CAAZ;AACH;AACJ;AACJ,GAPD;;AAQA,QAAM0L,MAAM,GAAIlY,KAAD,IAAW;AACtBgY,IAAAA,8BAA8B;;AAC9B,QAAIhI,gBAAgB,CAAClI,OAAjB,CAAyBmI,KAA7B,EAAoC;AAChCX,MAAAA,UAAU,CAACxH,OAAX,GAAqB,IAArB;AACH;;AACD4G,IAAAA,kBAAkB,CAAC5G,OAAnB,CAA2BnE,IAA3B,IAAmC,CAC/B,GAAGnB,MAD4B,EAE/B,IAAIvC,OAAO,CAACD,KAAD,CAAP,GAAiBA,KAAK,CAACuE,GAAN,CAAUiS,QAAV,CAAjB,GAAuC,CAACA,QAAQ,CAACxW,KAAD,CAAT,CAA3C,CAF+B,CAAnC;AAIA6X,IAAAA,QAAQ,CAACnJ,kBAAkB,CAAC5G,OAAnB,CAA2BnE,IAA3B,CAAD,CAAR;AACH,GAVD;;AAWA,QAAMwU,OAAO,GAAInY,KAAD,IAAW;AACvBgY,IAAAA,8BAA8B;AAC9BF,IAAAA,WAAW;AACXpJ,IAAAA,kBAAkB,CAAC5G,OAAnB,CAA2BnE,IAA3B,IAAmCwT,SAAS,CAAC3U,MAAD,EAASvC,OAAO,CAACD,KAAD,CAAP,GAAiBA,KAAK,CAACuE,GAAN,CAAUiS,QAAV,CAAjB,GAAuC,CAACA,QAAQ,CAACxW,KAAD,CAAT,CAAhD,CAA5C;AACA6X,IAAAA,QAAQ,CAACnJ,kBAAkB,CAAC5G,OAAnB,CAA2BnE,IAA3B,CAAD,CAAR;;AACA,QAAI6K,SAAS,CAAC1G,OAAV,CAAkBnE,IAAlB,CAAJ,EAA6B;AACzB6K,MAAAA,SAAS,CAAC1G,OAAV,CAAkBnE,IAAlB,IAA0BwT,SAAS,CAAC3I,SAAS,CAAC1G,OAAV,CAAkBnE,IAAlB,CAAD,EAA0B0T,cAAc,CAACrX,KAAD,CAAxC,CAAnC;AACH;;AACD,QAAIgQ,gBAAgB,CAAClI,OAAjB,CAAyBsI,OAAzB,IAAoC3B,gBAAgB,CAAC3G,OAAjB,CAAyBnE,IAAzB,CAAxC,EAAwE;AACpE8K,MAAAA,gBAAgB,CAAC3G,OAAjB,CAAyBnE,IAAzB,IAAiCwT,SAAS,CAAC1I,gBAAgB,CAAC3G,OAAjB,CAAyBnE,IAAzB,CAAD,EAAiC0T,cAAc,CAACrX,KAAD,CAA/C,CAA1C;AACH;AACJ,GAXD;;AAYA,QAAMoY,MAAM,GAAIlX,KAAD,IAAW;AACtB,QAAI,CAACtB,WAAW,CAACsB,KAAD,CAAhB,EAAyB;AACrB8W,MAAAA,8BAA8B;AACjC;;AACDF,IAAAA,WAAW,CAACnB,aAAa,CAACzK,mBAAmB,CAACvE,SAAS,CAACG,OAAX,EAAoBnE,IAApB,CAApB,EAA+CzC,KAA/C,CAAd,CAAX;AACAwN,IAAAA,kBAAkB,CAAC5G,OAAnB,CAA2BnE,IAA3B,IAAmCgT,aAAa,CAACnU,MAAD,EAAStB,KAAT,CAAhD;AACA2W,IAAAA,QAAQ,CAACnJ,kBAAkB,CAAC5G,OAAnB,CAA2BnE,IAA3B,CAAD,CAAR;;AACA,QAAI6K,SAAS,CAAC1G,OAAV,CAAkBnE,IAAlB,CAAJ,EAA6B;AACzB6K,MAAAA,SAAS,CAAC1G,OAAV,CAAkBnE,IAAlB,IAA0BgT,aAAa,CAACnI,SAAS,CAAC1G,OAAV,CAAkBnE,IAAlB,CAAD,EAA0BzC,KAA1B,CAAvC;AACH;;AACD,QAAI8O,gBAAgB,CAAClI,OAAjB,CAAyBsI,OAAzB,IAAoC3B,gBAAgB,CAAC3G,OAAjB,CAAyBnE,IAAzB,CAAxC,EAAwE;AACpE8K,MAAAA,gBAAgB,CAAC3G,OAAjB,CAAyBnE,IAAzB,IAAiCgT,aAAa,CAAClI,gBAAgB,CAAC3G,OAAjB,CAAyBnE,IAAzB,CAAD,EAAiCzC,KAAjC,CAA9C;AACH;AACJ,GAbD;;AAcA,QAAMmX,MAAM,GAAG,CAACnX,KAAD,EAAQlB,KAAR,KAAkB;AAC7BgY,IAAAA,8BAA8B;AAC9BF,IAAAA,WAAW,CAACV,QAAQ,CAAClL,mBAAmB,CAACvE,SAAS,CAACG,OAAX,EAAoBnE,IAApB,CAApB,EAA+CzC,KAA/C,CAAT,CAAX;AACAwN,IAAAA,kBAAkB,CAAC5G,OAAnB,CAA2BnE,IAA3B,IAAmCyT,QAAQ,CAAC5U,MAAD,EAAStB,KAAT,EAAgBjB,OAAO,CAACD,KAAD,CAAP,GAAiBA,KAAK,CAACuE,GAAN,CAAUiS,QAAV,CAAjB,GAAuC,CAACA,QAAQ,CAACxW,KAAD,CAAT,CAAvD,CAA3C;AACA6X,IAAAA,QAAQ,CAACnJ,kBAAkB,CAAC5G,OAAnB,CAA2BnE,IAA3B,CAAD,CAAR;;AACA,QAAI6K,SAAS,CAAC1G,OAAV,CAAkBnE,IAAlB,CAAJ,EAA6B;AACzB6K,MAAAA,SAAS,CAAC1G,OAAV,CAAkBnE,IAAlB,IAA0ByT,QAAQ,CAAC5I,SAAS,CAAC1G,OAAV,CAAkBnE,IAAlB,CAAD,EAA0BzC,KAA1B,EAAiCmW,cAAc,CAACrX,KAAD,CAA/C,CAAlC;AACH;;AACD,QAAIgQ,gBAAgB,CAAClI,OAAjB,CAAyBsI,OAAzB,IAAoC3B,gBAAgB,CAAC3G,OAAjB,CAAyBnE,IAAzB,CAAxC,EAAwE;AACpE8K,MAAAA,gBAAgB,CAAC3G,OAAjB,CAAyBnE,IAAzB,IAAiCyT,QAAQ,CAAC3I,gBAAgB,CAAC3G,OAAjB,CAAyBnE,IAAzB,CAAD,EAAiCzC,KAAjC,EAAwCmW,cAAc,CAACrX,KAAD,CAAtD,CAAzC;AACH;AACJ,GAXD;;AAYA,QAAMsY,IAAI,GAAG,CAACrB,MAAD,EAASC,MAAT,KAAoB;AAC7Bc,IAAAA,8BAA8B;AAC9B,UAAM5M,WAAW,GAAGc,mBAAmB,CAACvE,SAAS,CAACG,OAAX,EAAoBnE,IAApB,CAAvC;AACAqT,IAAAA,WAAW,CAAC5L,WAAD,EAAc6L,MAAd,EAAsBC,MAAtB,CAAX;AACAY,IAAAA,WAAW,CAAC1M,WAAD,CAAX;AACA4L,IAAAA,WAAW,CAACxU,MAAD,EAASyU,MAAT,EAAiBC,MAAjB,CAAX;AACAW,IAAAA,QAAQ,CAAC,CAAC,GAAGrV,MAAJ,CAAD,CAAR;AACAkM,IAAAA,kBAAkB,CAAC5G,OAAnB,CAA2BnE,IAA3B,IAAmCnB,MAAnC;;AACA,QAAIgM,SAAS,CAAC1G,OAAV,CAAkBnE,IAAlB,CAAJ,EAA6B;AACzBqT,MAAAA,WAAW,CAACxI,SAAS,CAAC1G,OAAV,CAAkBnE,IAAlB,CAAD,EAA0BsT,MAA1B,EAAkCC,MAAlC,CAAX;AACH;;AACD,QAAIlH,gBAAgB,CAAClI,OAAjB,CAAyBsI,OAAzB,IAAoC3B,gBAAgB,CAAC3G,OAAjB,CAAyBnE,IAAzB,CAAxC,EAAwE;AACpEqT,MAAAA,WAAW,CAACvI,gBAAgB,CAAC3G,OAAjB,CAAyBnE,IAAzB,CAAD,EAAiCsT,MAAjC,EAAyCC,MAAzC,CAAX;AACH;AACJ,GAdD;;AAeA,QAAMqB,IAAI,GAAG,CAACzB,IAAD,EAAOC,EAAP,KAAc;AACvBiB,IAAAA,8BAA8B;AAC9B,UAAM5M,WAAW,GAAGc,mBAAmB,CAACvE,SAAS,CAACG,OAAX,EAAoBnE,IAApB,CAAvC;AACAkT,IAAAA,WAAW,CAACzL,WAAD,EAAc0L,IAAd,EAAoBC,EAApB,CAAX;AACAe,IAAAA,WAAW,CAAC1M,WAAD,CAAX;AACAyL,IAAAA,WAAW,CAACrU,MAAD,EAASsU,IAAT,EAAeC,EAAf,CAAX;AACAc,IAAAA,QAAQ,CAAC,CAAC,GAAGrV,MAAJ,CAAD,CAAR;AACAkM,IAAAA,kBAAkB,CAAC5G,OAAnB,CAA2BnE,IAA3B,IAAmCnB,MAAnC;;AACA,QAAIgM,SAAS,CAAC1G,OAAV,CAAkBnE,IAAlB,CAAJ,EAA6B;AACzBkT,MAAAA,WAAW,CAACrI,SAAS,CAAC1G,OAAV,CAAkBnE,IAAlB,CAAD,EAA0BmT,IAA1B,EAAgCC,EAAhC,CAAX;AACH;;AACD,QAAI/G,gBAAgB,CAAClI,OAAjB,CAAyBsI,OAAzB,IAAoC3B,gBAAgB,CAAC3G,OAAjB,CAAyBnE,IAAzB,CAAxC,EAAwE;AACpEkT,MAAAA,WAAW,CAACpI,gBAAgB,CAAC3G,OAAjB,CAAyBnE,IAAzB,CAAD,EAAiCmT,IAAjC,EAAuCC,EAAvC,CAAX;AACH;AACJ,GAdD;;AAeA,QAAMxC,KAAK,GAAG,MAAM;AAChBuD,IAAAA,WAAW;AACXF,IAAAA,qBAAqB,CAAC9P,OAAtB,GAAgC7F,GAAG,CAACiN,gBAAgB,CAACpH,OAAlB,EAA2BnE,IAA3B,EAAiC,EAAjC,CAAnC;AACAkU,IAAAA,QAAQ,CAACnB,MAAM,CAACkB,qBAAqB,CAAC9P,OAAvB,CAAP,CAAR;AACH,GAJD;;AAKAyP,EAAAA,WAAW,CAAC,MAAM;AACd,UAAMiB,cAAc,GAAG9I,0BAA0B,CAAC5H,OAAlD;AACA,UAAM2Q,eAAe,GAAG9I,kBAAkB,CAAC7H,OAA3C;AACA2Q,IAAAA,eAAe,CAAChN,GAAhB,CAAoB9H,IAApB;AACA6U,IAAAA,cAAc,CAAC7U,IAAD,CAAd,GAAuB4Q,KAAvB;AACA7F,IAAAA,kBAAkB,CAAC5G,OAAnB,CAA2BnE,IAA3B,IAAmC,EAAnC;AACA,WAAO,MAAM;AACTmU,MAAAA,WAAW;AACX,aAAOU,cAAc,CAAC7U,IAAD,CAArB;AACA8U,MAAAA,eAAe,CAAC9H,MAAhB,CAAuBhN,IAAvB;AACH,KAJD,CANc,CAWd;AACH,GAZU,EAYR,CAACA,IAAD,CAZQ,CAAX;AAaA,SAAO;AACH2U,IAAAA,IADG;AAEHC,IAAAA,IAFG;AAGHJ,IAAAA,OAHG;AAIHD,IAAAA,MAJG;AAKHE,IAAAA,MALG;AAMHC,IAAAA,MANG;AAOH7V,IAAAA;AAPG,GAAP;AASH;;AAED,IAAIkW,aAAa,GAAG,CAAC9K,MAAD,EAAS+K,UAAT,KAAwB;AACxC,MAAI5Y,iBAAiB,CAAC6N,MAAD,CAArB,EAA+B;AAC3B,WAAOA,MAAP;AACH;;AACD,SAAO+K,UAAU,GACX/Y,WAAW,CAACgO,MAAM,CAACxJ,OAAR,CAAX,GACIwJ,MADJ,GAEIA,MAAM,CAACxJ,OAHA,GAIXxE,WAAW,CAACgO,MAAM,CAAC5N,KAAR,CAAX,GACI4N,MADJ,GAEIA,MAAM,CAAC5N,KANjB;AAOH,CAXD;;AAaA,MAAM4Y,UAAU,GAAInE,EAAD,IAAQ;AACvB,MAAI;AAAE9Q,IAAAA,IAAF;AAAQkV,IAAAA,KAAR;AAAeC,IAAAA,EAAE,EAAEC,cAAnB;AAAmChb,IAAAA,MAAnC;AAA2CC,IAAAA,QAA3C;AAAqDgb,IAAAA,YAAY,GAAGlb,eAAe,CAACE,QAApF;AAA8Fib,IAAAA,UAAU,GAAGnb,eAAe,CAACC,MAA3H;AAAmImb,IAAAA,SAAnI;AAA8I/W,IAAAA,YAA9I;AAA4J2S,IAAAA;AAA5J,MAAwKL,EAA5K;AAAA,MAAgL0E,IAAI,GAAGlE,MAAM,CAACR,EAAD,EAAK,CAAC,MAAD,EAAS,OAAT,EAAkB,IAAlB,EAAwB,QAAxB,EAAkC,UAAlC,EAA8C,cAA9C,EAA8D,YAA9D,EAA4E,WAA5E,EAAyF,cAAzF,EAAyG,SAAzG,CAAL,CAA7L;;AACA,QAAMkD,OAAO,GAAGhC,cAAc,EAA9B;AACA,QAAM;AAAEzG,IAAAA,gBAAF;AAAoBiD,IAAAA,QAApB;AAA8B0B,IAAAA,QAA9B;AAAwCT,IAAAA,UAAxC;AAAoD5E,IAAAA,SAApD;AAA+DoE,IAAAA,wBAA/D;AAAyFZ,IAAAA,iBAAzF;AAA4G/D,IAAAA,IAAI,EAAE;AAAEpC,MAAAA,UAAF;AAAcE,MAAAA;AAAd,KAAlH;AAA4IsC,IAAAA,cAAc,EAAE;AAAErC,MAAAA,kBAAF;AAAsBF,MAAAA;AAAtB,KAA5J;AAA0M+I,IAAAA,SAAS,EAAE;AAAE5I,MAAAA;AAAF,KAArN;AAAsOtE,IAAAA,SAAtO;AAAiPgI,IAAAA;AAAjP,MAAyQmF,OAAO,IAAI6C,OAAO,CAAC7C,OAAlS;AACA,QAAM,CAAC9U,KAAD,EAAQoZ,kBAAR,IAA8B9b,UAAU,CAACsC,WAAW,CAACuC,YAAD,CAAX,GACzCF,GAAG,CAACiN,gBAAgB,CAACpH,OAAlB,EAA2BnE,IAA3B,CADsC,GAEzCxB,YAFwC,CAA9C;AAGA,QAAMkX,QAAQ,GAAG7b,QAAQ,CAACwC,KAAD,CAAzB;AACA,QAAMsZ,eAAe,GAAGjS,SAAS,CAACrH,KAAD,CAAjC;;AACA,QAAMoS,cAAc,GAAG,MAAM,CAAC1G,cAAc,CAAC;AACzCC,IAAAA,QAAQ,EAAE,CAAC,CAAC1J,GAAG,CAACuM,SAAS,CAAC1G,OAAX,EAAoBnE,IAApB,CAD0B;AAEzCoI,IAAAA,QAFyC;AAGzCF,IAAAA,UAHyC;AAIzCG,IAAAA,kBAJyC;AAKzCF,IAAAA,oBALyC;AAMzCG,IAAAA;AANyC,GAAD,CAA5C;;AAQA,QAAMsN,UAAU,GAAI3L,MAAD,IAAY;AAC3B,UAAMjM,IAAI,GAAG+W,aAAa,CAAC9K,MAAD,EAAS0L,eAAT,CAA1B;AACAF,IAAAA,kBAAkB,CAACzX,IAAD,CAAlB;AACA0X,IAAAA,QAAQ,CAACvR,OAAT,GAAmBnG,IAAnB;AACA,WAAOA,IAAP;AACH,GALD;;AAMA,QAAM6X,YAAY,GAAIC,KAAD,IAAW,CAAC,GAAGC,GAAJ,KAAYvH,QAAQ,CAACxO,IAAD,EAAO4V,UAAU,CAACE,KAAK,CAACC,GAAD,CAAN,CAAjB,EAA+BtH,cAAc,EAA7C,CAApD;;AACA,QAAM5S,YAAY,GAAI6K,CAAD,IAAO;AACxB,UAAM1I,IAAI,GAAG4X,UAAU,CAAClP,CAAC,IAAIA,CAAC,CAACuD,MAAP,GAAgBvD,CAAC,CAACuD,MAAlB,GAA2BvD,CAA5B,CAAvB;AACA8H,IAAAA,QAAQ,CAACxO,IAAD,EAAOhC,IAAP,EAAayQ,cAAc,EAA3B,CAAR;AACH,GAHD;;AAIA,QAAMuH,aAAa,GAAG,MAAM;AACxB,QAAI9M,kBAAkB,CAAC8C,kBAAkB,CAAC7H,OAApB,EAA6BnE,IAA7B,CAAlB,IACAgE,SAAS,CAACG,OAAV,CAAkBnE,IAAlB,CADJ,EAC6B;AACzBiP,MAAAA,wBAAwB,CAACjL,SAAS,CAACG,OAAV,CAAkBnE,IAAlB,CAAD,EAA0B,IAA1B,CAAxB;AACH;;AACDkQ,IAAAA,QAAQ,CAACjS,MAAM,CAACgY,cAAP,CAAsB;AAC3BjW,MAAAA;AAD2B,KAAtB,EAENvF,KAFM,EAEC;AACN2C,MAAAA,GAAG,CAACY,IAAD,EAAO;AACNyX,QAAAA,kBAAkB,CAACzX,IAAD,CAAlB;AACA0X,QAAAA,QAAQ,CAACvR,OAAT,GAAmBnG,IAAnB;AACH,OAJK;;AAKNM,MAAAA,GAAG,GAAG;AACF,eAAOoX,QAAQ,CAACvR,OAAhB;AACH;;AAPK,KAFD,CAAD,EAUJlG,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkB6W,KAAlB,CAVI,CAAR;AAWH,GAhBD;;AAiBA,MAAI,CAAClR,SAAS,CAACG,OAAV,CAAkBnE,IAAlB,CAAL,EAA8B;AAC1BgW,IAAAA,aAAa;AAChB;;AACDjc,EAAAA,WAAW,CAAC,MAAM;AACdic,IAAAA,aAAa;AACb,WAAO,MAAM;AACT,UAAI,CAAC9M,kBAAkB,CAAC8C,kBAAkB,CAAC7H,OAApB,EAA6BnE,IAA7B,CAAvB,EAA2D;AACvDyP,QAAAA,UAAU,CAACzP,IAAD,CAAV;AACH;AACJ,KAJD;AAKH,GAPU,EAOR,CAACA,IAAD,CAPQ,CAAX;AAQA,QAAMkW,sBAAsB,GAAG9N,QAAQ,IAAIC,kBAA3C;AACA,QAAM8N,KAAK,GAAGlY,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc;AAAE2B,IAAAA;AAAF,GAAd,EAAwBwV,IAAxB,CAAd,EAA8Cnb,QAAQ,GAC1F;AAAE,KAACgb,YAAD,GAAgBQ,YAAY,CAACxb,QAAD;AAA9B,GAD0F,GAE1F;AAAE,KAACgb,YAAD,GAAgBxZ;AAAlB,GAFoC,CAAd,EAEezB,MAAM,IAAI8b,sBAAV,GACrC;AACE,KAACZ,UAAD,GAAc,CAAC,GAAGc,IAAJ,KAAa;AACvB,UAAIhc,MAAJ,EAAY;AACRA,QAAAA,MAAM,CAACgc,IAAD,CAAN;AACH;;AACD,UAAIF,sBAAJ,EAA4B;AACxB7H,QAAAA,iBAAiB,CAACrO,IAAD,CAAjB;AACH;AACJ;AARH,GADqC,GAWrC,EAbsB,CAAd,EAaF;AAAE,KAACuV,SAAS,KAAKI,eAAe,GAAG,SAAH,GAAelb,KAAnC,CAAV,GAAsD4B;AAAxD,GAbE,CAAd;AAcA,SAAOrC,cAAc,CAACob,cAAD,CAAd,GAAkCnb,YAAY,CAACmb,cAAD,EAAiBe,KAAjB,CAA9C,GAA0E1c,aAAa,CAAC2b,cAAD,EAAiBnX,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkB8X,KAAlB,CAAjB,CAA9F;AACH,CAxED;;AA0EA,SAASE,YAAT,CAAsBvF,EAAtB,EAA0B;AACtB,MAAI;AAAEqE,IAAAA,EAAE,EAAEC,cAAN;AAAsBzS,IAAAA,MAAtB;AAA8B3C,IAAAA,IAA9B;AAAoCyC,IAAAA,OAApC;AAA6CyP,IAAAA;AAA7C,MAA0DpB,EAA9D;AAAA,MAAkE0E,IAAI,GAAGlE,MAAM,CAACR,EAAD,EAAK,CAAC,IAAD,EAAO,QAAP,EAAiB,MAAjB,EAAyB,SAAzB,EAAoC,UAApC,CAAL,CAA/E;;AACA,QAAMkD,OAAO,GAAGhC,cAAc,EAA9B;AACA,QAAMzP,KAAK,GAAGjE,GAAG,CAACqE,MAAM,IAAIqR,OAAO,CAACrR,MAAnB,EAA2B3C,IAA3B,CAAjB;;AACA,MAAI,CAACuC,KAAL,EAAY;AACR,WAAO,IAAP;AACH;;AACD,QAAM;AAAEE,IAAAA,OAAO,EAAE6T,mBAAX;AAAgC9T,IAAAA;AAAhC,MAA0CD,KAAhD;AACA,QAAM4T,KAAK,GAAGlY,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAmB+W,cAAc,GAAGI,IAAH,GAAU,EAA3C,CAAd,EAA+D;AAAEtD,IAAAA,QAAQ,EAAEA,QAAQ,GACvFA,QAAQ,CAAC;AAAEzP,MAAAA,OAAO,EAAE6T,mBAAmB,IAAI7T,OAAlC;AAA2C8T,MAAAA,QAAQ,EAAE/T;AAArD,KAAD,CAD+E,GAEvF8T,mBAAmB,IAAI7T;AAF4C,GAA/D,CAAd;AAGA,SAAO2S,cAAc,GAAIpb,cAAc,CAACob,cAAD,CAAd,GAAkCnb,YAAY,CAACmb,cAAD,EAAiBe,KAAjB,CAA9C,GAA0E1c,aAAa,CAAC2b,cAAD,EAAiBe,KAAjB,CAA3F,GAAwH1c,aAAa,CAACS,QAAD,EAAW+D,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkB8X,KAAlB,CAAX,CAA1J;AACH;;AAED,SAASlB,UAAT,EAAqBoB,YAArB,EAAmCpE,WAAnC,EAAgD8B,aAAhD,EAA+DtJ,OAA/D,EAAwEuH,cAAxE","sourcesContent":["import * as React from 'react';\nimport { createContext, useContext, createElement, useState as useState$2, useRef as useRef$2, useEffect as useEffect$2, isValidElement, cloneElement, Fragment } from 'react';\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst RADIO_INPUT = 'radio';\r\nconst FILE_INPUT = 'file';\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\n\nfunction attachEventListeners({ field, handleChange, isRadioOrCheckbox, }) {\r\n    const { ref } = field;\r\n    if (ref.addEventListener) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isUndefined = (val) => val === undefined;\n\nvar isNullOrUndefined = (value) => value === null || isUndefined(value);\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nconst isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\r\nconst stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\r\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (REGEX_IS_DEEP_PROP.test(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? obj[path] || defaultValue\r\n        : result;\r\n};\n\nvar focusErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (type) => type === RADIO_INPUT;\n\nvar isCheckBoxInput = (type) => type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    if (!field) {\r\n        return;\r\n    }\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    if (!type) {\r\n        delete fields[name];\r\n        return;\r\n    }\r\n    const fieldValue = fields[name];\r\n    if ((isRadioInput(type) || isCheckBoxInput(type)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options.forEach(({ ref, mutationWatcher }, index) => {\r\n                if ((ref && isDetached(ref)) || forceDelete) {\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    options.splice(index, 1);\r\n                }\r\n            });\r\n            if (options && !options.length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if (isDetached(ref) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.reduce((previous, { ref: { checked, value } }) => checked\r\n        ? {\r\n            isValid: true,\r\n            value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (type) => type === FILE_INPUT;\n\nvar isMultipleSelect = (type) => type === 'select-multiple';\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter(({ ref: { checked } }) => checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { type, name, options, value, files } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(type)) {\r\n        return files;\r\n    }\r\n    if (isRadioInput(type)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(type)) {\r\n        return getMultipleSelectValue(options);\r\n    }\r\n    if (isCheckBoxInput(type)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\r\n    const output = {};\r\n    const isSearchString = isString(search);\r\n    const isSearchArray = isArray(search);\r\n    const isNest = search && search.nest;\r\n    for (const name in fields) {\r\n        if (isUndefined(search) ||\r\n            isNest ||\r\n            (isSearchString && name.startsWith(search)) ||\r\n            (isSearchArray &&\r\n                search.find((data) => name.startsWith(data)))) {\r\n            output[name] = getFieldValue(fields, fields[name].ref);\r\n        }\r\n    }\r\n    return output;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar compareObject = (objectA = {}, objectB = {}) => Object.entries(objectA).reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true);\n\nvar isSameError = (error, { type, types, message, }) => {\r\n    return (isObject(error) &&\r\n        error.type === type &&\r\n        error.message === message &&\r\n        compareObject(error.types, types));\r\n};\n\nfunction shouldUpdateWithError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return currentFieldError && !isSameError(existFieldError, currentFieldError);\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isPureObject = isObject(validationData) && !isRegex(validationData);\r\n    return {\r\n        value: isPureObject\r\n            ? validationData.value\r\n            : validationData,\r\n        message: isPureObject\r\n            ? validationData.message\r\n            : '',\r\n    };\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    const isStringValue = isString(result);\r\n    if (isStringValue || (isBoolean(result) && !result)) {\r\n        const message = isStringValue ? result : '';\r\n        return {\r\n            type,\r\n            message,\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (!validateAllFieldCriteria) {\r\n        return {};\r\n    }\r\n    const error = errors[name];\r\n    return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name, valueAsNumber, valueAsDate }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(type);\r\n    const isCheckBox = isCheckBoxInput(type);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const message = isString(required)\r\n            ? required\r\n            : getValueAndMessage(required).message;\r\n        error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message, ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = maxLength && inputLength > maxLengthValue;\r\n        const exceedMin = minLength && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            const validateFunctions = Object.entries(validate);\r\n            const validationResult = await new Promise((resolve) => {\r\n                validateFunctions.reduce(async (previous, [key, validate], index) => {\r\n                    if ((!isEmptyObject(await previous) && !validateAllFieldCriteria) ||\r\n                        !isFunction(validate)) {\r\n                        return resolve(previous);\r\n                    }\r\n                    let result;\r\n                    const validateResult = await validate(fieldValue);\r\n                    const validateError = getValidateError(validateResult, validateRef, key);\r\n                    if (validateError) {\r\n                        result = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                        if (validateAllFieldCriteria) {\r\n                            error[name] = result;\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = previous;\r\n                    }\r\n                    return validateFunctions.length - 1 === index\r\n                        ? resolve(result)\r\n                        : result;\r\n                }, {});\r\n            });\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (previous[path] && validateAllFieldCriteria\r\n        ? {\r\n            [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n        }\r\n        : {\r\n            [path]: previous[path] || Object.assign({ message,\r\n                type }, (validateAllFieldCriteria\r\n                ? {\r\n                    types: { [type]: message || true },\r\n                }\r\n                : {})),\r\n        }))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data) {\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, { abortEarly: false }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name])\r\n    ? get(defaultValues, name, defaultValue)\r\n    : defaultValues[name];\n\nfunction flatArray(list) {\r\n    return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues, watchFieldArray) => {\r\n    let value;\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = watchFieldArray ? watchFieldArray : undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        watchFields.add(fieldName);\r\n        value = fieldValues[fieldName];\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (isArray(watchFieldArray) &&\r\n            isArray(value) &&\r\n            value.length !== watchFieldArray.length) {\r\n            value = watchFieldArray;\r\n        }\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach(name => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isObject(combinedDefaultValues)\r\n            ? getDefaultValue(combinedDefaultValues, fieldName)\r\n            : combinedDefaultValues\r\n        : value;\r\n};\n\nvar skipValidation = ({ hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nvar getFieldValueByName = (fields, name) => {\r\n    const results = transformToNestObject(getFieldsValues(fields));\r\n    return name ? get(results, name, results) : results;\r\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\r\n    let isMatch = false;\r\n    if (!isArray(referenceArray) ||\r\n        !isArray(differenceArray) ||\r\n        referenceArray.length !== differenceArray.length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < referenceArray.length; i++) {\r\n        if (isMatch) {\r\n            break;\r\n        }\r\n        const dataA = referenceArray[i];\r\n        const dataB = differenceArray[i];\r\n        if (!dataB || Object.keys(dataA).length !== Object.keys(dataB).length) {\r\n            isMatch = true;\r\n            break;\r\n        }\r\n        for (const key in dataA) {\r\n            if (!dataB[key] || dataA[key] !== dataB[key]) {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return isMatch;\r\n}\n\nconst isMatchFieldArrayName = (name, searchName) => name.startsWith(`${searchName}[`);\r\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => (isMatchFieldArrayName(name, current) ? true : prev), false);\n\nvar isFileListObject = (data) => typeof FileList !== UNDEFINED && data instanceof FileList;\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nconst unsetObject = (target) => {\r\n    for (const key in target) {\r\n        const data = target[key];\r\n        const isArrayObject = isArray(data);\r\n        if ((isObject(data) || isArrayObject) && !data.ref) {\r\n            unsetObject(data);\r\n        }\r\n        if ((isUndefined(data) ||\r\n            isEmptyObject(data) ||\r\n            (isArrayObject && !target[key].filter(Boolean).length)) &&\r\n            !isFileListObject(target)) {\r\n            delete target[key];\r\n        }\r\n    }\r\n    return target;\r\n};\r\nconst unset = (target, paths) => {\r\n    paths.forEach(path => {\r\n        set(target, path, undefined);\r\n    });\r\n    return unsetObject(target);\r\n};\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nconst { useRef, useState, useCallback, useEffect } = React;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const watchFieldArrayRef = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultRenderValuesRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit } = useRef(modeChecker(mode)).current;\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb && 'Proxy' in window;\r\n    const readFormStateRef = useRef({\r\n        dirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldUpdateWithError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) || validationSchema) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender = shouldReRender || !get(errorsRef.current, name);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !skipReRender) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, validationSchema]);\r\n    const setFieldValue = useCallback((name, rawValue) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const ref = field.ref;\r\n        const options = field.options;\r\n        const { type } = ref;\r\n        const value = isWeb &&\r\n            ref instanceof window.HTMLElement &&\r\n            isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(type) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(type)) {\r\n            if (isEmptyString(value) ||\r\n                isFileListObject(value)) {\r\n                ref.files = value;\r\n            }\r\n            else {\r\n                ref.value = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(type)) {\r\n            [...ref.options].forEach(selectRef => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(type) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n        return type;\r\n    }, [isWeb]);\r\n    const setDirty = (name) => {\r\n        if (!fieldsRef.current[name] ||\r\n            (!readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields)) {\r\n            return false;\r\n        }\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\r\n        let isDirty = defaultRenderValuesRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        if (isFieldArray) {\r\n            const fieldArrayName = name.substring(0, name.indexOf('['));\r\n            isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\r\n        }\r\n        const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !==\r\n            isDirty;\r\n        if (isDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\r\n        return readFormStateRef.current.dirty\r\n            ? isDirtyChanged\r\n            : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\r\n    };\r\n    const setInternalValue = useCallback((name, value) => {\r\n        setFieldValue(name, value);\r\n        if (setDirty(name) ||\r\n            (!get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched)) {\r\n            return !!set(touchedFieldsRef.current, name, true);\r\n        }\r\n    }, [setFieldValue]);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n        shouldRenderBaseOnError(name, error, false, skipReRender);\r\n        return isEmptyObject(error);\r\n    }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaValidation = useCallback(async (payload) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current));\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach(name => {\r\n                const error = get(errors, name);\r\n                if (error) {\r\n                    set(errorsRef.current, name, error);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            shouldRenderBaseOnError(payload, (get(errors, payload)\r\n                ? { [payload]: get(errors, payload) }\r\n                : {}), previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [\r\n        reRender,\r\n        shouldRenderBaseOnError,\r\n        validateAllFieldCriteria,\r\n        validationSchema,\r\n    ]);\r\n    const triggerValidation = useCallback(async (payload) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (validationSchema) {\r\n            return executeSchemaValidation(fields);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [executeSchemaValidation, executeValidation, reRender, validationSchema]);\r\n    const setValue = useCallback((name, value, shouldValidate) => {\r\n        const shouldRender = setInternalValue(name, value) ||\r\n            isWatchAllRef.current ||\r\n            watchFieldsRef.current.has(name);\r\n        if (shouldRender) {\r\n            reRender();\r\n        }\r\n        if (shouldValidate) {\r\n            triggerValidation(name);\r\n        }\r\n        return;\r\n    }, [reRender, setInternalValue, triggerValidation]);\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = get(errors, name);\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldUpdateState = isWatchAllRef.current ||\r\n                watchFieldsRef.current.has(name) ||\r\n                shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldUpdateState = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldUpdateState && reRender();\r\n            }\r\n            if (validationSchema) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields));\r\n                const previousFormIsValid = isValidRef.current;\r\n                isValidRef.current = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (previousFormIsValid !== isValidRef.current) {\r\n                    shouldUpdateState = true;\r\n                }\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaIsValid = useCallback(() => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues)).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, [reRender, validateAllFieldCriteria, validationSchema]);\r\n    const resetFieldRef = useCallback((name) => {\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [\r\n            name,\r\n        ]);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach(data => data.current.delete(name));\r\n        if (readFormStateRef.current.isValid ||\r\n            readFormStateRef.current.touched) {\r\n            reRender();\r\n        }\r\n        if (validationSchema) {\r\n            validateSchemaIsValid();\r\n        }\r\n    }, [reRender]);\r\n    const removeFieldEventListener = (field, forceDelete) => {\r\n        if (!isUndefined(handleChangeRef.current) && field) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n    };\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field ||\r\n            (field &&\r\n                isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) &&\r\n                !forceDelete)) {\r\n            return;\r\n        }\r\n        removeFieldEventListener(field, forceDelete);\r\n        resetFieldRef(field.ref.name);\r\n    }, [resetFieldRef]);\r\n    function clearError(name) {\r\n        if (isUndefined(name)) {\r\n            errorsRef.current = {};\r\n        }\r\n        else {\r\n            unset(errorsRef.current, isArray(name) ? name : [name]);\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, preventRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(errorsRef.current[name], {\r\n            type,\r\n            message,\r\n            types,\r\n        })) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (!preventRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), { preventRender: true })));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? isUndefined(defaultValuesRef.current)\r\n                ? {}\r\n                : defaultValuesRef.current\r\n            : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\r\n        const watchFields = watchFieldsRef.current;\r\n        if (isProxyEnabled) {\r\n            readFormStateRef.current.dirty = true;\r\n        }\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues, fieldArrayNamesRef.current.has(fieldNames)\r\n                ? watchFieldArrayRef.current[fieldNames]\r\n                : undefined);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => {\r\n                let value;\r\n                if (isEmptyObject(fieldsRef.current) &&\r\n                    isObject(combinedDefaultValues)) {\r\n                    value = getDefaultValue(combinedDefaultValues, name);\r\n                }\r\n                else {\r\n                    value = assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues);\r\n                }\r\n                return Object.assign(Object.assign({}, previous), { [name]: value });\r\n            }, {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) ||\r\n            defaultValue ||\r\n            defaultValuesRef.current;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(names) {\r\n        if (!isEmptyObject(fieldsRef.current)) {\r\n            (isArray(names) ? names : [names]).forEach(fieldName => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldAttributes = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioInput(type) || isCheckBoxInput(type);\r\n        let currentField = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let isFieldArray = false;\r\n        let defaultValue;\r\n        if (isRadioOrCheckbox\r\n            ? currentField &&\r\n                isArray(currentField.options) &&\r\n                currentField.options.find(({ ref }) => value === ref.value)\r\n            : currentField) {\r\n            fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(fieldAttributes));\r\n            currentField = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...((currentField && currentField.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), { mutationWatcher });\r\n        }\r\n        else {\r\n            currentField = fieldAttributes;\r\n        }\r\n        fields[name] = currentField;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            defaultValue = getDefaultValue(defaultValuesRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(name, defaultValue);\r\n            }\r\n        }\r\n        if (validationSchema && readFormStateRef.current.isValid) {\r\n            validateSchemaIsValid();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, validateAllFieldCriteria, currentField).then(error => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    if (isEmptyObject(error)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    else {\r\n                        isValidRef.current = false;\r\n                    }\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultRenderValuesRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            defaultRenderValuesRef.current[name] = isEmptyDefaultValue\r\n                ? getFieldValue(fields, currentField.ref)\r\n                : defaultValue;\r\n        }\r\n        if (!type) {\r\n            return;\r\n        }\r\n        const fieldToAttachListener = isRadioOrCheckbox && currentField.options\r\n            ? currentField.options[currentField.options.length - 1]\r\n            : currentField;\r\n        attachEventListeners({\r\n            field: fieldToAttachListener,\r\n            isRadioOrCheckbox,\r\n            handleChange: handleChangeRef.current,\r\n        });\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors;\r\n        let fieldValues;\r\n        const fields = fieldsRef.current;\r\n        if (readFormStateRef.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (validationSchema) {\r\n                fieldValues = getFieldsValues(fields);\r\n                const { errors, values } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues));\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                const { errors, values, } = await Object.values(fields).reduce(async (previous, field) => {\r\n                    if (!field) {\r\n                        return previous;\r\n                    }\r\n                    const resolvedPrevious = await previous;\r\n                    const { ref, ref: { name }, } = field;\r\n                    if (!fields[name]) {\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n                    if (fieldError[name]) {\r\n                        set(resolvedPrevious.errors, name, fieldError[name]);\r\n                        validFieldsRef.current.delete(name);\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    if (fieldsWithValidationRef.current.has(name)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    resolvedPrevious.values[name] = getFieldValue(fields, ref);\r\n                    return Promise.resolve(resolvedPrevious);\r\n                }, Promise.resolve({\r\n                    errors: {},\r\n                    values: {},\r\n                }));\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                if (submitFocusError) {\r\n                    focusErrorField(fields, fieldErrors);\r\n                }\r\n                errorsRef.current = fieldErrors;\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [reRender, submitFocusError, validateAllFieldCriteria, validationSchema]);\r\n    const resetRefs = () => {\r\n        errorsRef.current = {};\r\n        fieldsRef.current = {};\r\n        touchedFieldsRef.current = {};\r\n        validFieldsRef.current = new Set();\r\n        fieldsWithValidationRef.current = new Set();\r\n        defaultRenderValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        dirtyFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n        isSubmittedRef.current = false;\r\n        isDirtyRef.current = false;\r\n        isValidRef.current = true;\r\n        submitCountRef.current = 0;\r\n    };\r\n    const reset = (values) => {\r\n        for (const value of Object.values(fieldsRef.current)) {\r\n            if (value && value.ref && value.ref.closest) {\r\n                try {\r\n                    value.ref.closest('form').reset();\r\n                    break;\r\n                }\r\n                catch (_a) { }\r\n            }\r\n        }\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());\r\n        resetRefs();\r\n        reRender();\r\n    };\r\n    const getValues = (payload) => {\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const outputValues = isEmptyObject(fieldValues)\r\n            ? defaultValuesRef.current\r\n            : fieldValues;\r\n        return payload && payload.nest\r\n            ? transformToNestObject(outputValues)\r\n            : outputValues;\r\n    };\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, [removeFieldEventListenerAndRef]);\r\n    if (!validationSchema) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        dirtyFields: dirtyFieldsRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isEmptyObject(fieldsRef.current) || isValidRef.current,\r\n    };\r\n    const control = {\r\n        register,\r\n        unregister,\r\n        removeFieldEventListener,\r\n        getValues,\r\n        setValue,\r\n        triggerValidation,\r\n        formState,\r\n        mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n        },\r\n        reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        },\r\n        errorsRef,\r\n        touchedFieldsRef,\r\n        fieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        watchFieldArrayRef,\r\n        fieldArrayNamesRef,\r\n        isDirtyRef,\r\n        readFormStateRef,\r\n        defaultValuesRef,\r\n    };\r\n    return {\r\n        watch,\r\n        control,\r\n        handleSubmit,\r\n        setValue,\r\n        triggerValidation,\r\n        getValues: useCallback(getValues, []),\r\n        reset: useCallback(reset, []),\r\n        register: useCallback(register, [\r\n            defaultValuesRef.current,\r\n            defaultRenderValuesRef.current,\r\n        ]),\r\n        unregister: useCallback(unregister, []),\r\n        clearError: useCallback(clearError, []),\r\n        setError: useCallback(setError, []),\r\n        errors: errorsRef.current,\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return {};\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    return useContext(FormGlobalContext);\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value) => (Object.assign(Object.assign({}, (isObject(value) ? value : { value })), { id: generateId() }));\r\nconst mapIds = (data) => (isArray(data) ? data : []).map(value => appendId(value));\n\nvar removeArrayAt = (data, index) => !isUndefined(index) && isArray(data)\r\n    ? [...data.slice(0, index), ...data.slice(index + 1)]\r\n    : [];\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (fields, indexA, indexB) => isArray(fields) &&\r\n    ([fields[indexA], fields[indexB]] = [fields[indexB], fields[indexA]]);\n\nvar prependAt = (data, value) => [\r\n    ...(isArray(value) ? value : [value || null]),\r\n    ...data,\r\n];\n\nvar insertAt = (data, index, value) => [\r\n    ...data.slice(0, index),\r\n    ...(isArray(value) ? value : [value || null]),\r\n    ...data.slice(index),\r\n];\n\nvar fillEmptyArray = (value) => isArray(value) ? Array(value.length).fill(null) : undefined;\n\nconst { useEffect: useEffect$1, useRef: useRef$1, useState: useState$1 } = React;\r\nfunction useFieldArray({ control, name }) {\r\n    const methods = useFormContext();\r\n    const { resetFieldArrayFunctionRef, fieldArrayNamesRef, fieldsRef, getValues, defaultValuesRef, removeFieldEventListener, errorsRef, isDirtyRef, touchedFieldsRef, readFormStateRef, watchFieldArrayRef, } = control || methods.control;\r\n    const memoizedDefaultValues = useRef$1(get(defaultValuesRef.current, name, []));\r\n    const [fields, setField] = useState$1(mapIds(memoizedDefaultValues.current));\r\n    const resetFields = (flagOrFields) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = isUndefined(flagOrFields)\r\n                ? true\r\n                : getIsFieldsDifferent(flagOrFields, memoizedDefaultValues.current);\r\n        }\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n            }\r\n        }\r\n    };\r\n    const mapCurrentFieldsValueWithState = () => {\r\n        const currentFieldsValue = getValues({ nest: true })[name];\r\n        if (isArray(currentFieldsValue)) {\r\n            for (let i = 0; i < currentFieldsValue.length; i++) {\r\n                fields[i] = Object.assign(Object.assign({}, fields[i]), currentFieldsValue[i]);\r\n            }\r\n        }\r\n    };\r\n    const append = (value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = true;\r\n        }\r\n        watchFieldArrayRef.current[name] = [\r\n            ...fields,\r\n            ...(isArray(value) ? value.map(appendId) : [appendId(value)]),\r\n        ];\r\n        setField(watchFieldArrayRef.current[name]);\r\n    };\r\n    const prepend = (value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields();\r\n        watchFieldArrayRef.current[name] = prependAt(fields, isArray(value) ? value.map(appendId) : [appendId(value)]);\r\n        setField(watchFieldArrayRef.current[name]);\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = prependAt(errorsRef.current[name], fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = prependAt(touchedFieldsRef.current[name], fillEmptyArray(value));\r\n        }\r\n    };\r\n    const remove = (index) => {\r\n        if (!isUndefined(index)) {\r\n            mapCurrentFieldsValueWithState();\r\n        }\r\n        resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        watchFieldArrayRef.current[name] = removeArrayAt(fields, index);\r\n        setField(watchFieldArrayRef.current[name]);\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\r\n        }\r\n    };\r\n    const insert = (index, value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields(insertAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        watchFieldArrayRef.current[name] = insertAt(fields, index, isArray(value) ? value.map(appendId) : [appendId(value)]);\r\n        setField(watchFieldArrayRef.current[name]);\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = insertAt(errorsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = insertAt(touchedFieldsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields(fieldValues);\r\n        swapArrayAt(fields, indexA, indexB);\r\n        setField([...fields]);\r\n        watchFieldArrayRef.current[name] = fields;\r\n        if (errorsRef.current[name]) {\r\n            swapArrayAt(errorsRef.current[name], indexA, indexB);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\r\n        }\r\n    };\r\n    const move = (from, to) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields(fieldValues);\r\n        moveArrayAt(fields, from, to);\r\n        setField([...fields]);\r\n        watchFieldArrayRef.current[name] = fields;\r\n        if (errorsRef.current[name]) {\r\n            moveArrayAt(errorsRef.current[name], from, to);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            moveArrayAt(touchedFieldsRef.current[name], from, to);\r\n        }\r\n    };\r\n    const reset = () => {\r\n        resetFields();\r\n        memoizedDefaultValues.current = get(defaultValuesRef.current, name, []);\r\n        setField(mapIds(memoizedDefaultValues.current));\r\n    };\r\n    useEffect$1(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        watchFieldArrayRef.current[name] = {};\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [name]);\r\n    return {\r\n        swap,\r\n        move,\r\n        prepend,\r\n        append,\r\n        remove,\r\n        insert,\r\n        fields,\r\n    };\r\n}\n\nvar getInputValue = (target, isCheckbox) => {\r\n    if (isNullOrUndefined(target)) {\r\n        return target;\r\n    }\r\n    return isCheckbox\r\n        ? isUndefined(target.checked)\r\n            ? target\r\n            : target.checked\r\n        : isUndefined(target.value)\r\n            ? target\r\n            : target.value;\r\n};\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, fieldsRef, fieldArrayNamesRef, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState$2(isUndefined(defaultValue)\r\n        ? get(defaultValuesRef.current, name)\r\n        : defaultValue);\r\n    const valueRef = useRef$2(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldValidate = () => !skipValidation({\r\n        hasError: !!get(errorsRef.current, name),\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (target) => {\r\n        const data = getInputValue(target, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\r\n    const handleChange = (e) => {\r\n        const data = commonTask(e && e.target ? e.target : e);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const registerField = () => {\r\n        if (isNameInFieldArray(fieldArrayNamesRef.current, name) &&\r\n            fieldsRef.current[name]) {\r\n            removeFieldEventListener(fieldsRef.current[name], true);\r\n        }\r\n        register(Object.defineProperty({\r\n            name,\r\n        }, VALUE, {\r\n            set(data) {\r\n                setInputStateValue(data);\r\n                valueRef.current = data;\r\n            },\r\n            get() {\r\n                return valueRef.current;\r\n            },\r\n        }), Object.assign({}, rules));\r\n    };\r\n    if (!fieldsRef.current[name]) {\r\n        registerField();\r\n    }\r\n    useEffect$2(() => {\r\n        registerField();\r\n        return () => {\r\n            if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\r\n                unregister(name);\r\n            }\r\n        };\r\n    }, [name]);\r\n    const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange) }\r\n        : { [onChangeName]: handleChange })), (onBlur || shouldReValidateOnBlur\r\n        ? {\r\n            [onBlurName]: (...args) => {\r\n                if (onBlur) {\r\n                    onBlur(args);\r\n                }\r\n                if (shouldReValidateOnBlur) {\r\n                    triggerValidation(name);\r\n                }\r\n            },\r\n        }\r\n        : {})), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, Object.assign({}, props)));\r\n};\n\nfunction ErrorMessage(_a) {\r\n    var { as: InnerComponent, errors, name, message, children } = _a, rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\r\n    const methods = useFormContext();\r\n    const error = get(errors || methods.errors, name);\r\n    if (!error) {\r\n        return null;\r\n    }\r\n    const { message: messageFromRegister, types } = error;\r\n    const props = Object.assign(Object.assign({}, (InnerComponent ? rest : {})), { children: children\r\n            ? children({ message: messageFromRegister || message, messages: types })\r\n            : messageFromRegister || message });\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, props))) : (createElement(Fragment, Object.assign({}, props)));\r\n}\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n"]},"metadata":{},"sourceType":"module"}