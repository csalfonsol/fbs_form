{"ast":null,"code":"import React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport HeaderRow from './HeaderRow';\nimport { getScrollbarSize, isPositionStickySupported } from './utils';\nexport default forwardRef(function Header(props, ref) {\n  var headerRef = useRef(null);\n  var rowRef = useRef(null);\n  var filterRowRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      setScrollLeft: function (scrollLeft) {\n        headerRef.current.scrollLeft = scrollLeft;\n        if (isPositionStickySupported()) return;\n        rowRef.current.setScrollLeft(scrollLeft);\n\n        if (filterRowRef.current) {\n          filterRowRef.current.setScrollLeft(scrollLeft);\n        }\n      }\n    };\n  }, []);\n\n  function handleAllRowsSelectionChange(checked) {\n    if (!props.onSelectedRowsChange) return;\n    var newSelectedRows = new Set();\n\n    if (checked) {\n      for (var i = 0; i < props.rowsCount; i++) {\n        newSelectedRows.add(props.rowGetter(i)[props.rowKey]);\n      }\n    }\n\n    props.onSelectedRowsChange(newSelectedRows);\n  }\n\n  function getHeaderRow(row, ref) {\n    return React.createElement(HeaderRow, {\n      key: row.rowType,\n      ref: ref,\n      rowType: row.rowType,\n      onColumnResize: props.onColumnResize,\n      width: props.columnMetrics.totalColumnWidth + getScrollbarSize(),\n      height: row.height,\n      columns: props.columnMetrics.columns,\n      lastFrozenColumnIndex: props.columnMetrics.lastFrozenColumnIndex,\n      draggableHeaderCell: props.draggableHeaderCell,\n      filterable: row.filterable,\n      onFilterChange: row.onFilterChange,\n      onHeaderDrop: props.onHeaderDrop,\n      allRowsSelected: props.allRowsSelected,\n      onAllRowsSelectionChange: handleAllRowsSelectionChange,\n      sortColumn: props.sortColumn,\n      sortDirection: props.sortDirection,\n      onSort: props.onSort,\n      getValidFilterValues: props.getValidFilterValues\n    });\n  }\n\n  function getHeaderRows() {\n    var setRef = !isPositionStickySupported();\n    var headerRows = props.headerRows;\n    var rows = [getHeaderRow(headerRows[0], setRef ? rowRef : undefined)];\n\n    if (headerRows[1]) {\n      rows.push(getHeaderRow(headerRows[1], setRef ? filterRowRef : undefined));\n    }\n\n    return rows;\n  } // Set the cell selection to -1 x -1 when clicking on the header\n\n\n  function onHeaderClick() {\n    props.cellMetaData.onCellClick({\n      rowIdx: -1,\n      idx: -1\n    });\n  }\n\n  return React.createElement(\"div\", {\n    ref: headerRef,\n    className: \"rdg-header\",\n    onClick: onHeaderClick\n  }, getHeaderRows());\n});","map":{"version":3,"sources":["../src/Header.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { forwardRef, useRef, useImperativeHandle } from 'react';\n\nimport HeaderRow from './HeaderRow';\nimport { getScrollbarSize, isPositionStickySupported } from './utils';\nimport { CalculatedColumn, HeaderRowData, ColumnMetrics, CellMetaData } from './common/types';\nimport { DEFINE_SORT } from './common/enums';\nimport { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, K extends keyof R> = Pick<DataGridProps<R, K>,\n| 'draggableHeaderCell'\n| 'getValidFilterValues'\n| 'rowGetter'\n| 'rowsCount'\n| 'onHeaderDrop'\n| 'onSelectedRowsChange'\n| 'sortColumn'\n| 'sortDirection'\n> & Required<Pick<DataGridProps<R, K>,\n| 'rowKey'\n>>;\n\nexport interface HeaderProps<R, K extends keyof R> extends SharedDataGridProps<R, K> {\n  allRowsSelected: boolean;\n  columnMetrics: ColumnMetrics<R>;\n  headerRows: [HeaderRowData<R>, HeaderRowData<R> | undefined];\n  cellMetaData: CellMetaData<R>;\n  onSort?(columnKey: keyof R, direction: DEFINE_SORT): void;\n  onColumnResize(column: CalculatedColumn<R>, width: number): void;\n}\n\nexport interface HeaderHandle {\n  setScrollLeft(scrollLeft: number): void;\n}\n\nexport default forwardRef(function Header<R, K extends keyof R>(props: HeaderProps<R, K>, ref: React.Ref<HeaderHandle>) {\n  const headerRef = useRef<HTMLDivElement>(null);\n  const rowRef = useRef<HeaderRow<R, K>>(null);\n  const filterRowRef = useRef<HeaderRow<R, K>>(null);\n\n  useImperativeHandle(ref, () => ({\n    setScrollLeft(scrollLeft: number): void {\n      headerRef.current!.scrollLeft = scrollLeft;\n      if (isPositionStickySupported()) return;\n      rowRef.current!.setScrollLeft(scrollLeft);\n      if (filterRowRef.current) {\n        filterRowRef.current.setScrollLeft(scrollLeft);\n      }\n    }\n  }), []);\n\n  function handleAllRowsSelectionChange(checked: boolean) {\n    if (!props.onSelectedRowsChange) return;\n\n    const newSelectedRows = new Set<R[K]>();\n    if (checked) {\n      for (let i = 0; i < props.rowsCount; i++) {\n        newSelectedRows.add(props.rowGetter(i)[props.rowKey]);\n      }\n    }\n\n    props.onSelectedRowsChange(newSelectedRows);\n  }\n\n  function getHeaderRow(row: HeaderRowData<R>, ref?: React.RefObject<HeaderRow<R, K>>) {\n    return (\n      <HeaderRow<R, K>\n        key={row.rowType}\n        ref={ref}\n        rowType={row.rowType}\n        onColumnResize={props.onColumnResize}\n        width={props.columnMetrics.totalColumnWidth + getScrollbarSize()}\n        height={row.height}\n        columns={props.columnMetrics.columns}\n        lastFrozenColumnIndex={props.columnMetrics.lastFrozenColumnIndex}\n        draggableHeaderCell={props.draggableHeaderCell}\n        filterable={row.filterable}\n        onFilterChange={row.onFilterChange}\n        onHeaderDrop={props.onHeaderDrop}\n        allRowsSelected={props.allRowsSelected}\n        onAllRowsSelectionChange={handleAllRowsSelectionChange}\n        sortColumn={props.sortColumn}\n        sortDirection={props.sortDirection}\n        onSort={props.onSort}\n        getValidFilterValues={props.getValidFilterValues}\n      />\n    );\n  }\n\n  function getHeaderRows() {\n    const setRef = !isPositionStickySupported();\n    const { headerRows } = props;\n    const rows = [getHeaderRow(headerRows[0], setRef ? rowRef : undefined)];\n    if (headerRows[1]) {\n      rows.push(getHeaderRow(headerRows[1], setRef ? filterRowRef : undefined));\n    }\n\n    return rows;\n  }\n\n  // Set the cell selection to -1 x -1 when clicking on the header\n  function onHeaderClick(): void {\n    props.cellMetaData.onCellClick({ rowIdx: -1, idx: -1 });\n  }\n\n  return (\n    <div\n      ref={headerRef}\n      className=\"rdg-header\"\n      onClick={onHeaderClick}\n    >\n      {getHeaderRows()}\n    </div>\n  );\n} as React.RefForwardingComponent<HeaderHandle, HeaderProps<{ [key: string]: unknown }, string>>) as <R, K extends keyof R>(props: HeaderProps<R, K> & { ref?: React.Ref<HeaderHandle> }) => JSX.Element;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}