{"ast":null,"code":"var _jsxFileName = \"/home/snw/Documentos/React projects/fbs/src/form/main.js\";\n// Librerias\nimport React, { useState } from 'react';\nimport { useForm, FormContext } from 'react-hook-form';\nimport axios from 'axios'; // Layout\n\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form'; // Elementos\n\nimport Button from 'react-bootstrap/Button'; // Estilos\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../styles/app.css'; // Componentes formulario\n\nimport InformacionPersonalFuncionario from './section1';\nimport ReferenciasFamiliares from './section2';\nimport InformacionLaboralFuncionario from './section3';\nimport InformacionSolicitudDelCredito from './section4';\nimport DeclaracionAutorizacionFirma from './section5'; // URL del servidor que recibirá los datos\n\nconst URL_envio = 'http://3.80.200.194/ords/snw_fonviv/solicitud/crear'; // URL del servidor para obtener el monto máximo de una solicitud\n\nconst URL_monto_maximo = 'http://3.80.200.194/ords/snw_fonviv/solicitud/monto';\n\nfunction Main() {\n  // Metodos principales de React-hook-form para capturar los datos, manejar validaciones y crear el contexto del formulario\n  const methods = useForm();\n  const {\n    register,\n    errors,\n    handleSubmit,\n    watch\n  } = methods; // Variables de estado (hooks) y sus Setters\n\n  const [fechaNacimiento, setFechaNacimiento] = useState();\n  const [fechaIngreso, setFechaIngreso] = useState();\n  const [personasaCargo, setPersonasaCargo] = useState([// Datagrid de personas a cargo\n  [, \"\", \"\"]]);\n  const [referenciasFamiliares, setReferenciasFamiliares] = useState([// Datagrid de referencias familiares\n  [, \"\", \"\"]]);\n  const [categoria, setCategoria] = useState();\n  const [vez, setVez] = useState();\n  const [subcategoria, setSubcategoria] = useState();\n  const [cardinalidadVivienda, setCardinalidadVivienda] = useState();\n  const [primas, setPrimas] = useState();\n  const [montoEspecifico, setMontoEspecifico] = useState();\n  const [montoMaximo, setMontoMaximo] = useState(); // Funciones para llamar los Setters de los hooks de las variables de estado\n\n  function cambiarFechaNacimiento(nuevaFecha) {\n    setFechaNacimiento(nuevaFecha);\n  }\n\n  function cambiarFechaIngreso(nuevaFecha) {\n    setFechaIngreso(nuevaFecha);\n  }\n\n  function cambiarPersonasaCargo(nuevasPersonas) {\n    setPersonasaCargo(nuevasPersonas);\n  } // TODO: Buscar la manera de eliminar la primera posicion vacia (Se requiere para que encaje con las columnas del datagrid \n\n\n  function cambiarReferenciasFamiliares(nuevasReferencias) {\n    setReferenciasFamiliares(nuevasReferencias);\n  }\n\n  function cambiarCategoria(nuevaCategoria) {\n    setCategoria(nuevaCategoria);\n    recalcularMontoMaximo(nuevaCategoria);\n  }\n\n  function cambiarVez(nuevaVez) {\n    setVez(nuevaVez);\n  }\n\n  function cambiarSubcategoria(nuevaSubcategoria) {\n    setSubcategoria(nuevaSubcategoria);\n  }\n\n  function cambiarCardinalidadVivienda(nuevaCardinalidad) {\n    setCardinalidadVivienda(nuevaCardinalidad);\n  }\n\n  function cambiarPrimas(nuevaPrima) {\n    setPrimas(nuevaPrima);\n  }\n\n  function cambiarMontoEspecifico(nuevoMonto) {\n    setMontoEspecifico(nuevoMonto);\n  }\n\n  function cambiarMontoMaximo(nuevoMontoMaximo) {\n    setMontoMaximo(nuevoMontoMaximo);\n  } // Funcion que intenta recalcular el monto máximo cada vez que cambia alguno de los campos que lo determinan\n  // (Entidad, cargo y grado, o Categoria) \n\n\n  function recalcularMontoMaximo(nuevaCategoria) {\n    if (nuevaCategoria === undefined) {\n      // Se verifica si se tienen los parámetros necesarios para hacer el cálculo\n      if (watch('entidad') !== '0' && watch('cargo_grado') !== '0' && categoria !== undefined) {\n        let data = JSON.stringify({\n          categoria: categoria,\n          cargo_grado: watch('cargo_grado'),\n          entidad: watch('entidad')\n        });\n        axios.post(URL_monto_maximo, data, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(response => {\n          cambiarMontoMaximo(response.data.monto);\n\n          if (montoEspecifico > response.data.monto) {\n            cambiarMontoEspecifico(response.data.monto);\n          }\n        }).catch(error => {\n          cambiarMontoMaximo('No especificado'); // console.log(error)\n        });\n      }\n    } else {\n      // Se verifica si se tienen los parámetros necesarios para hacer el cálculo (ya se tiene categoria)\n      if (watch('entidad') !== '0' && watch('cargo_grado') !== '0') {\n        let data = JSON.stringify({\n          categoria: nuevaCategoria,\n          cargo_grado: watch('cargo_grado'),\n          entidad: watch('entidad')\n        });\n        axios.post(URL_monto_maximo, data, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(response => {\n          cambiarMontoMaximo(response.data.monto);\n\n          if (montoEspecifico > response.data.monto) {\n            cambiarMontoEspecifico(response.data.monto);\n          } // console.log(response);\n\n        }).catch(error => {\n          cambiarMontoMaximo('No especificado'); // console.log(error)\n        });\n      }\n    }\n  } // Funcion que se ejecuta al enviar el formulario, si las validaciones son exitosas\n\n\n  const onSubmit = data => {\n    let fechaFormateada = fechaNacimiento.getDate().toString() + '/' + (fechaNacimiento.getMonth() + 1).toString() + '/' + fechaNacimiento.getFullYear().toString();\n    data.fechaNacimiento = fechaFormateada;\n    fechaFormateada = fechaIngreso.getDate().toString() + '/' + (fechaIngreso.getMonth() + 1).toString() + '/' + fechaIngreso.getFullYear().toString();\n    data.fechaIngreso = fechaFormateada; // Se acoplan los datos de los datagrids NO implícitos por el register de react-hook-form\n\n    data.personasaCargo = personasaCargo;\n    data.referenciasFamiliares = referenciasFamiliares;\n    data.categoria = categoria;\n    data.vez = vez;\n    data.subcategoria = subcategoria;\n    data.cardinalidadvivienda = cardinalidadVivienda;\n    data.primas = primas;\n    data.montoEspecifico = montoEspecifico;\n    console.log(data);\n    axios.post(URL_envio, data).then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  return React.createElement(Container, {\n    fluid: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"text-center mb-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, \"SOLICITUD DE CR\\xC9DITO\"), \" \", React.createElement(FormContext, Object.assign({}, methods, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }), React.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(InformacionPersonalFuncionario, {\n    fechaNacimiento: fechaNacimiento,\n    cambiarFechaNacimiento: cambiarFechaNacimiento,\n    personasaCargo: personasaCargo,\n    cambiarPersonasaCargo: cambiarPersonasaCargo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }), React.createElement(ReferenciasFamiliares, {\n    referenciasFamiliares: referenciasFamiliares,\n    cambiarReferenciasFamiliares: cambiarReferenciasFamiliares,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }), React.createElement(InformacionLaboralFuncionario, {\n    fechaIngreso: fechaIngreso,\n    cambiarFechaIngreso: cambiarFechaIngreso,\n    recalcularMontoMaximo: recalcularMontoMaximo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }), React.createElement(InformacionSolicitudDelCredito, {\n    categoria: categoria,\n    cambiarCategoria: cambiarCategoria,\n    vez: vez,\n    cambiarVez: cambiarVez,\n    subcategoria: subcategoria,\n    cambiarSubcategoria: cambiarSubcategoria,\n    cardinalidadVivienda: cardinalidadVivienda,\n    cambiarCardinalidadVivienda: cambiarCardinalidadVivienda,\n    primas: primas,\n    cambiarPrimas: cambiarPrimas,\n    montoEspecifico: montoEspecifico,\n    cambiarMontoEspecifico: cambiarMontoEspecifico,\n    montoMaximo: montoMaximo,\n    cambiarMontoMaximo: cambiarMontoMaximo,\n    recalcularMontoMaximo: recalcularMontoMaximo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }), React.createElement(Button, {\n    size: \"lg\",\n    variant: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, \"Enviar\"))));\n}\n\nexport default Main;","map":{"version":3,"sources":["/home/snw/Documentos/React projects/fbs/src/form/main.js"],"names":["React","useState","useForm","FormContext","axios","Container","Form","Button","InformacionPersonalFuncionario","ReferenciasFamiliares","InformacionLaboralFuncionario","InformacionSolicitudDelCredito","DeclaracionAutorizacionFirma","URL_envio","URL_monto_maximo","Main","methods","register","errors","handleSubmit","watch","fechaNacimiento","setFechaNacimiento","fechaIngreso","setFechaIngreso","personasaCargo","setPersonasaCargo","referenciasFamiliares","setReferenciasFamiliares","categoria","setCategoria","vez","setVez","subcategoria","setSubcategoria","cardinalidadVivienda","setCardinalidadVivienda","primas","setPrimas","montoEspecifico","setMontoEspecifico","montoMaximo","setMontoMaximo","cambiarFechaNacimiento","nuevaFecha","cambiarFechaIngreso","cambiarPersonasaCargo","nuevasPersonas","cambiarReferenciasFamiliares","nuevasReferencias","cambiarCategoria","nuevaCategoria","recalcularMontoMaximo","cambiarVez","nuevaVez","cambiarSubcategoria","nuevaSubcategoria","cambiarCardinalidadVivienda","nuevaCardinalidad","cambiarPrimas","nuevaPrima","cambiarMontoEspecifico","nuevoMonto","cambiarMontoMaximo","nuevoMontoMaximo","undefined","data","JSON","stringify","cargo_grado","entidad","post","headers","then","response","monto","catch","error","onSubmit","fechaFormateada","getDate","toString","getMonth","getFullYear","cardinalidadvivienda","console","log"],"mappings":"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","sourcesContent":["// Librerias\nimport React, { useState } from 'react';\nimport { useForm, FormContext } from 'react-hook-form'\nimport axios from 'axios';\n\n// Layout\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\n\n// Elementos\nimport Button from 'react-bootstrap/Button';\n\n// Estilos\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../styles/app.css';\n\n// Componentes formulario\nimport InformacionPersonalFuncionario from './section1';\nimport ReferenciasFamiliares from './section2';\nimport InformacionLaboralFuncionario from './section3';\nimport InformacionSolicitudDelCredito from './section4';\nimport DeclaracionAutorizacionFirma from './section5';\n\n\n\n// URL del servidor que recibirá los datos\nconst URL_envio = 'http://3.80.200.194/ords/snw_fonviv/solicitud/crear'\n\n// URL del servidor para obtener el monto máximo de una solicitud\nconst URL_monto_maximo = 'http://3.80.200.194/ords/snw_fonviv/solicitud/monto'\n\n\nfunction Main() {\n\n  // Metodos principales de React-hook-form para capturar los datos, manejar validaciones y crear el contexto del formulario\n  const methods = useForm();\n  const { register, errors, handleSubmit, watch } = methods;\n  \n  // Variables de estado (hooks) y sus Setters\n  const [fechaNacimiento, setFechaNacimiento] = useState(); \n  const [fechaIngreso, setFechaIngreso] = useState(); \n  const [personasaCargo, setPersonasaCargo] = useState([ // Datagrid de personas a cargo\n    [,\"\", \"\",]\n  ]);\n  const [referenciasFamiliares, setReferenciasFamiliares] = useState([ // Datagrid de referencias familiares\n    [,\"\", \"\",]\n  ]);  \n  const [categoria, setCategoria] = useState();  \n  const [vez, setVez] = useState();  \n  const [subcategoria, setSubcategoria] = useState();  \n  const [cardinalidadVivienda, setCardinalidadVivienda] = useState();  \n  const [primas, setPrimas] = useState();  \n  const [montoEspecifico, setMontoEspecifico] = useState();\n  const [montoMaximo, setMontoMaximo] = useState();\n  \n \n  // Funciones para llamar los Setters de los hooks de las variables de estado\n  function cambiarFechaNacimiento(nuevaFecha) { setFechaNacimiento(nuevaFecha); }\n  function cambiarFechaIngreso(nuevaFecha) { setFechaIngreso(nuevaFecha); }\n  function cambiarPersonasaCargo(nuevasPersonas) { setPersonasaCargo(nuevasPersonas); } // TODO: Buscar la manera de eliminar la primera posicion vacia (Se requiere para que encaje con las columnas del datagrid \n  function cambiarReferenciasFamiliares(nuevasReferencias) { setReferenciasFamiliares(nuevasReferencias); } \n  function cambiarCategoria(nuevaCategoria) { setCategoria(nuevaCategoria); recalcularMontoMaximo(nuevaCategoria) }\n  function cambiarVez(nuevaVez) { setVez(nuevaVez); }\n  function cambiarSubcategoria(nuevaSubcategoria) { setSubcategoria(nuevaSubcategoria); } \n  function cambiarCardinalidadVivienda(nuevaCardinalidad) { setCardinalidadVivienda(nuevaCardinalidad); } \n  function cambiarPrimas(nuevaPrima) { setPrimas(nuevaPrima); }   \n  function cambiarMontoEspecifico(nuevoMonto) { setMontoEspecifico(nuevoMonto); } \n  function cambiarMontoMaximo(nuevoMontoMaximo) { setMontoMaximo(nuevoMontoMaximo); } \n  \n\n  // Funcion que intenta recalcular el monto máximo cada vez que cambia alguno de los campos que lo determinan\n  // (Entidad, cargo y grado, o Categoria) \n  function recalcularMontoMaximo(nuevaCategoria) { \n    if (nuevaCategoria === undefined){\n\n      // Se verifica si se tienen los parámetros necesarios para hacer el cálculo\n      if (watch('entidad') !== '0' && watch('cargo_grado') !== '0' && categoria !== undefined){\n        let data = JSON.stringify({\n          categoria: categoria,\n          cargo_grado: watch('cargo_grado'),\n          entidad: watch('entidad')\n        })\n\n        axios.post(URL_monto_maximo, data, {\n          headers: {\n              'Content-Type': 'application/json',\n          }\n        })\n        .then(response => {\n          cambiarMontoMaximo(response.data.monto)\n          if (montoEspecifico > response.data.monto){ \n            cambiarMontoEspecifico(response.data.monto)          \n          }\n        })\n        .catch(error => {          \n          cambiarMontoMaximo('No especificado')\n          // console.log(error)\n        });  \n      }      \n    }\n    else {\n\n      // Se verifica si se tienen los parámetros necesarios para hacer el cálculo (ya se tiene categoria)\n      if (watch('entidad') !== '0' && watch('cargo_grado') !== '0'){\n        let data = JSON.stringify({\n          categoria: nuevaCategoria,\n          cargo_grado: watch('cargo_grado'),\n          entidad: watch('entidad')\n        })\n\n        axios.post(URL_monto_maximo, data, {\n          headers: {\n              'Content-Type': 'application/json',\n          }\n        })\n        .then(response => {\n          cambiarMontoMaximo(response.data.monto)\n          if (montoEspecifico > response.data.monto){ \n            cambiarMontoEspecifico(response.data.monto)          \n          }\n          // console.log(response);\n        })\n        .catch(error => {          \n          cambiarMontoMaximo('No especificado')\n          // console.log(error)\n        });  \n      }      \n    }\n  } \n\n  \n\n  \n  // Funcion que se ejecuta al enviar el formulario, si las validaciones son exitosas\n  const onSubmit = data => {\n         \n    let fechaFormateada = \n      (fechaNacimiento.getDate()).toString() + '/' +\n      (fechaNacimiento.getMonth()+1).toString() + '/' + \n      (fechaNacimiento.getFullYear()).toString();\n\n    data.fechaNacimiento = fechaFormateada;\n      \n      fechaFormateada = \n      (fechaIngreso.getDate()).toString() + '/' +\n      (fechaIngreso.getMonth()+1).toString() + '/' + \n      (fechaIngreso.getFullYear()).toString();\n\n    data.fechaIngreso = fechaFormateada;\n\n    // Se acoplan los datos de los datagrids NO implícitos por el register de react-hook-form\n    data.personasaCargo = personasaCargo;\n    data.referenciasFamiliares = referenciasFamiliares;  \n    data.categoria = categoria\n    data.vez = vez\n    data.subcategoria = subcategoria\n    data.cardinalidadvivienda = cardinalidadVivienda\n    data.primas = primas\n    data.montoEspecifico = montoEspecifico\n\n\n    console.log(data);\n    \n    axios.post(URL_envio, data)\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => {          \n          console.log(error)\n        });         \n\n    \n  };   \n\n\n  return (    \n\n    <Container fluid>\n      \n      <h2 className=\"text-center mb-5\">SOLICITUD DE CRÉDITO</h2> {/*Encabezado del formulario*/}    \n    \n      <FormContext {...methods}>\n        <Form onSubmit = {handleSubmit(onSubmit)} >          \n                    \n          <InformacionPersonalFuncionario \n            fechaNacimiento={fechaNacimiento} cambiarFechaNacimiento={cambiarFechaNacimiento} \n            personasaCargo={personasaCargo} cambiarPersonasaCargo={cambiarPersonasaCargo}/>\n\n          <ReferenciasFamiliares \n            referenciasFamiliares={referenciasFamiliares} cambiarReferenciasFamiliares={cambiarReferenciasFamiliares}/>\n\n          <InformacionLaboralFuncionario             \n            fechaIngreso={fechaIngreso} cambiarFechaIngreso={cambiarFechaIngreso}\n            recalcularMontoMaximo={recalcularMontoMaximo}/>\n  \n          <InformacionSolicitudDelCredito \n            categoria={categoria} cambiarCategoria={cambiarCategoria}\n            vez={vez} cambiarVez={cambiarVez}\n            subcategoria={subcategoria} cambiarSubcategoria={cambiarSubcategoria}\n            cardinalidadVivienda={cardinalidadVivienda} cambiarCardinalidadVivienda={cambiarCardinalidadVivienda}\n            primas={primas} cambiarPrimas={cambiarPrimas}\n            montoEspecifico={montoEspecifico} cambiarMontoEspecifico={cambiarMontoEspecifico}\n            montoMaximo={montoMaximo} cambiarMontoMaximo={cambiarMontoMaximo}\n            recalcularMontoMaximo={recalcularMontoMaximo}/>\n\n\n          <Button size=\"lg\" variant=\"primary\" type=\"submit\">{/*Enviar formulario*/}\n            Enviar  \n          </Button>   \n\n          {/* Seccion de firma y autorizacion\n             <DeclaracionAutorizacionFirma />\n          */} \n          \n          {/*Aqui va el boton enviar */}                \n\n        </Form>\n      </FormContext>\n\n    </Container>\n  );\n}\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}