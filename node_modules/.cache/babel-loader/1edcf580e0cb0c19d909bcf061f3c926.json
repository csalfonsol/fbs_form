{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React, { memo } from 'react';\nimport classNames from 'classnames';\nimport { isFrozen } from './utils/columnUtils';\n\nfunction Cell(_a) {\n  var cellMetaData = _a.cellMetaData,\n      children = _a.children,\n      className = _a.className,\n      column = _a.column,\n      expandableOptions = _a.expandableOptions,\n      idx = _a.idx,\n      isRowSelected = _a.isRowSelected,\n      isSummaryRow = _a.isSummaryRow,\n      lastFrozenColumnIndex = _a.lastFrozenColumnIndex,\n      onRowSelectionChange = _a.onRowSelectionChange,\n      rowData = _a.rowData,\n      rowIdx = _a.rowIdx,\n      scrollLeft = _a.scrollLeft;\n\n  function handleCellClick() {\n    cellMetaData.onCellClick({\n      idx: idx,\n      rowIdx: rowIdx\n    });\n  }\n\n  function handleCellMouseDown() {\n    if (cellMetaData.onCellMouseDown) {\n      cellMetaData.onCellMouseDown({\n        idx: idx,\n        rowIdx: rowIdx\n      });\n    }\n  }\n\n  function handleCellMouseEnter() {\n    if (cellMetaData.onCellMouseEnter) {\n      cellMetaData.onCellMouseEnter({\n        idx: idx,\n        rowIdx: rowIdx\n      });\n    }\n  }\n\n  function handleCellContextMenu() {\n    cellMetaData.onCellContextMenu({\n      idx: idx,\n      rowIdx: rowIdx\n    });\n  }\n\n  function handleCellDoubleClick(e) {\n    e.stopPropagation();\n    cellMetaData.onCellDoubleClick({\n      idx: idx,\n      rowIdx: rowIdx\n    });\n  }\n\n  function handleDragOver(e) {\n    e.preventDefault();\n  }\n\n  function getEvents() {\n    if (isSummaryRow) return null;\n    var columnEvents = column.events;\n    var allEvents = {\n      onClick: handleCellClick,\n      onMouseDown: handleCellMouseDown,\n      onMouseEnter: handleCellMouseEnter,\n      onDoubleClick: handleCellDoubleClick,\n      onContextMenu: handleCellContextMenu,\n      onDragOver: handleDragOver\n    };\n\n    if (!columnEvents) {\n      return allEvents;\n    }\n\n    var eventInfo = {\n      idx: idx,\n      rowIdx: rowIdx,\n      column: column,\n      rowId: rowData[cellMetaData.rowKey]\n    };\n\n    var _loop_1 = function (event_1) {\n      var columnEventHandler = columnEvents[event_1];\n\n      if (columnEventHandler) {\n        if (allEvents.hasOwnProperty(event_1)) {\n          var existingEvent_1 = allEvents[event_1];\n\n          allEvents[event_1] = function (e) {\n            existingEvent_1(e);\n            columnEventHandler(e, eventInfo);\n          };\n        } else {\n          allEvents[event_1] = function (e) {\n            columnEventHandler(e, eventInfo);\n          };\n        }\n      }\n    };\n\n    for (var event_1 in columnEvents) {\n      _loop_1(event_1);\n    }\n\n    return allEvents;\n  }\n\n  var colIsFrozen = isFrozen(column);\n  className = classNames(column.cellClass, 'rdg-cell', className, {\n    'rdg-cell-frozen': colIsFrozen,\n    'rdg-cell-frozen-last': colIsFrozen && column.idx === lastFrozenColumnIndex,\n    'rdg-child-cell': expandableOptions && expandableOptions.subRowDetails && expandableOptions.treeDepth > 0\n  });\n  var style = {\n    width: column.width,\n    left: column.left\n  };\n\n  if (scrollLeft !== undefined) {\n    style.transform = \"translateX(\" + scrollLeft + \"px)\";\n  }\n\n  return React.createElement(\"div\", __assign({\n    className: className,\n    style: style\n  }, getEvents()), children || column.cellContentRenderer({\n    idx: idx,\n    rowIdx: rowIdx,\n    rowData: rowData,\n    column: column,\n    cellMetaData: cellMetaData,\n    expandableOptions: expandableOptions,\n    isRowSelected: isRowSelected,\n    onRowSelectionChange: onRowSelectionChange,\n    isSummaryRow: isSummaryRow\n  }));\n}\n\nexport default memo(Cell);","map":{"version":3,"sources":["../src/Cell.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAP,IAAgB,IAAhB,QAA4B,OAA5B;AACA,OAAO,UAAP,MAAuB,YAAvB;AAGA,SAAS,QAAT,QAAyB,qBAAzB;;AAQA,SAAS,IAAT,CAAiB,EAAjB,EAce;MAbb,YAAA,GAAA,EAAA,CAAA,Y;MACA,QAAA,GAAA,EAAA,CAAA,Q;MACA,SAAA,GAAA,EAAA,CAAA,S;MACA,MAAA,GAAA,EAAA,CAAA,M;MACA,iBAAA,GAAA,EAAA,CAAA,iB;MACA,GAAA,GAAA,EAAA,CAAA,G;MACA,aAAA,GAAA,EAAA,CAAA,a;MACA,YAAA,GAAA,EAAA,CAAA,Y;MACA,qBAAA,GAAA,EAAA,CAAA,qB;MACA,oBAAA,GAAA,EAAA,CAAA,oB;MACA,OAAA,GAAA,EAAA,CAAA,O;MACA,MAAA,GAAA,EAAA,CAAA,M;MACA,UAAA,GAAA,EAAA,CAAA,U;;AAEA,WAAS,eAAT,GAAwB;AACtB,IAAA,YAAY,CAAC,WAAb,CAAyB;AAAE,MAAA,GAAG,EAAA,GAAL;AAAO,MAAA,MAAM,EAAA;AAAb,KAAzB;AACD;;AAED,WAAS,mBAAT,GAA4B;AAC1B,QAAI,YAAY,CAAC,eAAjB,EAAkC;AAChC,MAAA,YAAY,CAAC,eAAb,CAA6B;AAAE,QAAA,GAAG,EAAA,GAAL;AAAO,QAAA,MAAM,EAAA;AAAb,OAA7B;AACD;AACF;;AAED,WAAS,oBAAT,GAA6B;AAC3B,QAAI,YAAY,CAAC,gBAAjB,EAAmC;AACjC,MAAA,YAAY,CAAC,gBAAb,CAA8B;AAAE,QAAA,GAAG,EAAA,GAAL;AAAO,QAAA,MAAM,EAAA;AAAb,OAA9B;AACD;AACF;;AAED,WAAS,qBAAT,GAA8B;AAC5B,IAAA,YAAY,CAAC,iBAAb,CAA+B;AAAE,MAAA,GAAG,EAAA,GAAL;AAAO,MAAA,MAAM,EAAA;AAAb,KAA/B;AACD;;AAED,WAAS,qBAAT,CAA+B,CAA/B,EAAkE;AAChE,IAAA,CAAC,CAAC,eAAF;AACA,IAAA,YAAY,CAAC,iBAAb,CAA+B;AAAE,MAAA,GAAG,EAAA,GAAL;AAAO,MAAA,MAAM,EAAA;AAAb,KAA/B;AACD;;AAED,WAAS,cAAT,CAAwB,CAAxB,EAA0D;AACxD,IAAA,CAAC,CAAC,cAAF;AACD;;AAED,WAAS,SAAT,GAAkB;AAChB,QAAI,YAAJ,EAAkB,OAAO,IAAP;AAElB,QAAM,YAAY,GAAG,MAAM,CAAC,MAA5B;AACA,QAAM,SAAS,GAAgC;AAC7C,MAAA,OAAO,EAAE,eADoC;AAE7C,MAAA,WAAW,EAAE,mBAFgC;AAG7C,MAAA,YAAY,EAAE,oBAH+B;AAI7C,MAAA,aAAa,EAAE,qBAJ8B;AAK7C,MAAA,aAAa,EAAE,qBAL8B;AAM7C,MAAA,UAAU,EAAE;AANiC,KAA/C;;AASA,QAAI,CAAC,YAAL,EAAmB;AACjB,aAAO,SAAP;AACD;;AAED,QAAM,SAAS,GAAuB;AACpC,MAAA,GAAG,EAAA,GADiC;AAEpC,MAAA,MAAM,EAAA,MAF8B;AAGpC,MAAA,MAAM,EAAA,MAH8B;AAIpC,MAAA,KAAK,EAAE,OAAO,CAAC,YAAY,CAAC,MAAd;AAJsB,KAAtC;;4BAOW,O,EAAK;AACd,UAAM,kBAAkB,GAAG,YAAY,CAAC,OAAD,CAAvC;;AACA,UAAI,kBAAJ,EAAwB;AACtB,YAAI,SAAS,CAAC,cAAV,CAAyB,OAAzB,CAAJ,EAAqC;AACnC,cAAM,eAAa,GAAG,SAAS,CAAC,OAAD,CAA/B;;AACA,UAAA,SAAS,CAAC,OAAD,CAAT,GAAmB,UAAC,CAAD,EAAS;AAC1B,YAAA,eAAa,CAAC,CAAD,CAAb;AACA,YAAA,kBAAkB,CAAC,CAAD,EAAI,SAAJ,CAAlB;AACD,WAHD;AAID,SAND,MAMO;AACL,UAAA,SAAS,CAAC,OAAD,CAAT,GAAmB,UAAC,CAAD,EAAS;AAC1B,YAAA,kBAAkB,CAAC,CAAD,EAAI,SAAJ,CAAlB;AACD,WAFD;AAGD;AACF;;;AAdH,SAAK,IAAM,OAAX,IAAoB,YAApB,EAAgC;cAArB,O;AAeV;;AAED,WAAO,SAAP;AACD;;AAED,MAAM,WAAW,GAAG,QAAQ,CAAC,MAAD,CAA5B;AACA,EAAA,SAAS,GAAG,UAAU,CACpB,MAAM,CAAC,SADa,EAEpB,UAFoB,EAGpB,SAHoB,EAGT;AACT,uBAAmB,WADV;AAET,4BAAwB,WAAW,IAAI,MAAM,CAAC,GAAP,KAAe,qBAF7C;AAGT,sBAAkB,iBAAiB,IAAI,iBAAiB,CAAC,aAAvC,IAAwD,iBAAiB,CAAC,SAAlB,GAA8B;AAH/F,GAHS,CAAtB;AAUA,MAAM,KAAK,GAAwB;AACjC,IAAA,KAAK,EAAE,MAAM,CAAC,KADmB;AAEjC,IAAA,IAAI,EAAE,MAAM,CAAC;AAFoB,GAAnC;;AAKA,MAAI,UAAU,KAAK,SAAnB,EAA8B;AAC5B,IAAA,KAAK,CAAC,SAAN,GAAkB,gBAAc,UAAd,GAAwB,KAA1C;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AACE,IAAA,SAAS,EAAE,SADb;AAEE,IAAA,KAAK,EAAE;AAFT,GAAA,EAGM,SAAS,EAHf,CAAA,EAKG,QAAQ,IAAI,MAAM,CAAC,mBAAP,CAA2B;AACtC,IAAA,GAAG,EAAA,GADmC;AAEtC,IAAA,MAAM,EAAA,MAFgC;AAGtC,IAAA,OAAO,EAAA,OAH+B;AAItC,IAAA,MAAM,EAAA,MAJgC;AAKtC,IAAA,YAAY,EAAA,YAL0B;AAMtC,IAAA,iBAAiB,EAAA,iBANqB;AAOtC,IAAA,aAAa,EAAA,aAPyB;AAQtC,IAAA,oBAAoB,EAAA,oBARkB;AAStC,IAAA,YAAY,EAAA;AAT0B,GAA3B,CALf,CADF;AAmBD;;AAED,eAAe,IAAI,CAAC,IAAD,CAAnB","sourcesContent":["import React, { memo } from 'react';\nimport classNames from 'classnames';\n\nimport { CellRendererProps, ColumnEventInfo } from './common/types';\nimport { isFrozen } from './utils/columnUtils';\n\nexport interface CellProps<R> extends CellRendererProps<R> {\n  // TODO: Check if these props are required or not. These are most likely set by custom cell renderer\n  children?: React.ReactNode;\n  className?: string;\n}\n\nfunction Cell<R>({\n  cellMetaData,\n  children,\n  className,\n  column,\n  expandableOptions,\n  idx,\n  isRowSelected,\n  isSummaryRow,\n  lastFrozenColumnIndex,\n  onRowSelectionChange,\n  rowData,\n  rowIdx,\n  scrollLeft\n}: CellProps<R>) {\n  function handleCellClick() {\n    cellMetaData.onCellClick({ idx, rowIdx });\n  }\n\n  function handleCellMouseDown() {\n    if (cellMetaData.onCellMouseDown) {\n      cellMetaData.onCellMouseDown({ idx, rowIdx });\n    }\n  }\n\n  function handleCellMouseEnter() {\n    if (cellMetaData.onCellMouseEnter) {\n      cellMetaData.onCellMouseEnter({ idx, rowIdx });\n    }\n  }\n\n  function handleCellContextMenu() {\n    cellMetaData.onCellContextMenu({ idx, rowIdx });\n  }\n\n  function handleCellDoubleClick(e: React.MouseEvent<HTMLDivElement>) {\n    e.stopPropagation();\n    cellMetaData.onCellDoubleClick({ idx, rowIdx });\n  }\n\n  function handleDragOver(e: React.DragEvent<HTMLDivElement>) {\n    e.preventDefault();\n  }\n\n  function getEvents() {\n    if (isSummaryRow) return null;\n\n    const columnEvents = column.events;\n    const allEvents: { [key: string]: Function } = {\n      onClick: handleCellClick,\n      onMouseDown: handleCellMouseDown,\n      onMouseEnter: handleCellMouseEnter,\n      onDoubleClick: handleCellDoubleClick,\n      onContextMenu: handleCellContextMenu,\n      onDragOver: handleDragOver\n    };\n\n    if (!columnEvents) {\n      return allEvents;\n    }\n\n    const eventInfo: ColumnEventInfo<R> = {\n      idx,\n      rowIdx,\n      column,\n      rowId: rowData[cellMetaData.rowKey]\n    };\n\n    for (const event in columnEvents) {\n      const columnEventHandler = columnEvents[event];\n      if (columnEventHandler) {\n        if (allEvents.hasOwnProperty(event)) {\n          const existingEvent = allEvents[event];\n          allEvents[event] = (e: Event) => {\n            existingEvent(e);\n            columnEventHandler(e, eventInfo);\n          };\n        } else {\n          allEvents[event] = (e: Event) => {\n            columnEventHandler(e, eventInfo);\n          };\n        }\n      }\n    }\n\n    return allEvents;\n  }\n\n  const colIsFrozen = isFrozen(column);\n  className = classNames(\n    column.cellClass,\n    'rdg-cell',\n    className, {\n      'rdg-cell-frozen': colIsFrozen,\n      'rdg-cell-frozen-last': colIsFrozen && column.idx === lastFrozenColumnIndex,\n      'rdg-child-cell': expandableOptions && expandableOptions.subRowDetails && expandableOptions.treeDepth > 0\n    }\n  );\n\n  const style: React.CSSProperties = {\n    width: column.width,\n    left: column.left\n  };\n\n  if (scrollLeft !== undefined) {\n    style.transform = `translateX(${scrollLeft}px)`;\n  }\n\n  return (\n    <div\n      className={className}\n      style={style}\n      {...getEvents()}\n    >\n      {children || column.cellContentRenderer({\n        idx,\n        rowIdx,\n        rowData,\n        column,\n        cellMetaData,\n        expandableOptions,\n        isRowSelected,\n        onRowSelectionChange,\n        isSummaryRow\n      })}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R>(props: CellProps<R>) => JSX.Element;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}