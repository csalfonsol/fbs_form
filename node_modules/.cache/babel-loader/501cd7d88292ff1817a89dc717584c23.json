{"ast":null,"code":"import React, { createElement, cloneElement } from 'react';\nimport { isElement, isValidElementType } from 'react-is';\nimport CellActions from './CellActions';\nimport CellExpand from './CellExpander';\nimport { SimpleCellFormatter } from '../formatters';\nimport ChildRowDeleteButton from '../ChildRowDeleteButton';\nexport default function CellContent(_a) {\n  var idx = _a.idx,\n      rowIdx = _a.rowIdx,\n      column = _a.column,\n      rowData = _a.rowData,\n      cellMetaData = _a.cellMetaData,\n      expandableOptions = _a.expandableOptions,\n      isRowSelected = _a.isRowSelected,\n      isSummaryRow = _a.isSummaryRow,\n      onRowSelectionChange = _a.onRowSelectionChange;\n  var isExpandCell = expandableOptions ? expandableOptions.field === column.key : false;\n  var treeDepth = expandableOptions ? expandableOptions.treeDepth : 0;\n  var style = expandableOptions && isExpandCell ? {\n    marginLeft: expandableOptions.treeDepth * 30\n  } : undefined;\n\n  function getFormatterDependencies(row) {\n    // convention based method to get corresponding Id or Name of any Name or Id property\n    var getRowMetaData = column.getRowMetaData;\n\n    if (getRowMetaData) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn('getRowMetaData for formatters is deprecated and will be removed in a future version of react-data-grid. Instead access row prop of formatter');\n      }\n\n      return getRowMetaData(row, column);\n    }\n  }\n\n  function getFormatterProps() {\n    return {\n      value: rowData[column.key],\n      column: column,\n      rowIdx: rowIdx,\n      row: rowData,\n      isRowSelected: isRowSelected,\n      onRowSelectionChange: onRowSelectionChange,\n      dependentValues: getFormatterDependencies(rowData),\n      isSummaryRow: isSummaryRow\n    };\n  }\n\n  function getFormattedValue(formatter) {\n    if (formatter === undefined) {\n      return React.createElement(SimpleCellFormatter, {\n        value: rowData[column.key]\n      });\n    }\n\n    if (isValidElementType(formatter)) {\n      return createElement(formatter, getFormatterProps());\n    }\n\n    if (isElement(formatter)) {\n      return cloneElement(formatter, getFormatterProps());\n    }\n\n    return null;\n  }\n\n  function handleDeleteSubRow() {\n    if (cellMetaData.onDeleteSubRow) {\n      cellMetaData.onDeleteSubRow({\n        idx: idx,\n        rowIdx: rowIdx,\n        rowData: rowData,\n        expandArgs: expandableOptions\n      });\n    }\n  }\n\n  function handleCellExpand() {\n    if (cellMetaData.onCellExpand) {\n      cellMetaData.onCellExpand({\n        rowIdx: rowIdx,\n        idx: idx,\n        rowData: rowData,\n        expandArgs: expandableOptions\n      });\n    }\n  }\n\n  return React.createElement(React.Fragment, null, cellMetaData.getCellActions && React.createElement(CellActions, {\n    column: column,\n    rowData: rowData,\n    getCellActions: cellMetaData.getCellActions\n  }), expandableOptions && expandableOptions.canExpand && React.createElement(CellExpand, {\n    expanded: expandableOptions.expanded,\n    onCellExpand: handleCellExpand\n  }), React.createElement(\"div\", {\n    className: \"rdg-cell-value\"\n  }, expandableOptions && treeDepth > 0 && isExpandCell && React.createElement(ChildRowDeleteButton, {\n    treeDepth: treeDepth,\n    onDeleteSubRow: handleDeleteSubRow,\n    isDeleteSubRowEnabled: !!cellMetaData.onDeleteSubRow\n  }), React.createElement(\"div\", {\n    style: style\n  }, getFormattedValue(column.formatter))));\n}","map":{"version":3,"sources":["../../src/Cell/CellContent.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { createElement, cloneElement } from 'react';\nimport { isElement, isValidElementType } from 'react-is';\n\nimport CellActions from './CellActions';\nimport CellExpand from './CellExpander';\nimport { SimpleCellFormatter } from '../formatters';\nimport ChildRowDeleteButton from '../ChildRowDeleteButton';\nimport { CellContentRendererProps } from '../common/types';\n\nexport default function CellContent<R>({\n  idx,\n  rowIdx,\n  column,\n  rowData,\n  cellMetaData,\n  expandableOptions,\n  isRowSelected,\n  isSummaryRow,\n  onRowSelectionChange\n}: CellContentRendererProps<R>): JSX.Element {\n  const isExpandCell = expandableOptions ? expandableOptions.field === column.key : false;\n  const treeDepth = expandableOptions ? expandableOptions.treeDepth : 0;\n  const style = expandableOptions && isExpandCell ? { marginLeft: expandableOptions.treeDepth * 30 } : undefined;\n\n  function getFormatterDependencies(row: R) {\n    // convention based method to get corresponding Id or Name of any Name or Id property\n    const { getRowMetaData } = column;\n    if (getRowMetaData) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn('getRowMetaData for formatters is deprecated and will be removed in a future version of react-data-grid. Instead access row prop of formatter');\n      }\n      return getRowMetaData(row, column);\n    }\n  }\n\n  function getFormatterProps() {\n    return {\n      value: rowData[column.key],\n      column,\n      rowIdx,\n      row: rowData,\n      isRowSelected,\n      onRowSelectionChange,\n      dependentValues: getFormatterDependencies(rowData),\n      isSummaryRow\n    };\n  }\n\n  function getFormattedValue(formatter: typeof column['formatter']) {\n    if (formatter === undefined) {\n      return <SimpleCellFormatter value={rowData[column.key] as unknown as string} />;\n    }\n\n    if (isValidElementType(formatter)) {\n      return createElement<ReturnType<typeof getFormatterProps>>(formatter, getFormatterProps());\n    }\n\n    if (isElement(formatter)) {\n      return cloneElement(formatter, getFormatterProps());\n    }\n\n    return null;\n  }\n\n  function handleDeleteSubRow() {\n    if (cellMetaData.onDeleteSubRow) {\n      cellMetaData.onDeleteSubRow({\n        idx,\n        rowIdx,\n        rowData,\n        expandArgs: expandableOptions\n      });\n    }\n  }\n\n  function handleCellExpand() {\n    if (cellMetaData.onCellExpand) {\n      cellMetaData.onCellExpand({ rowIdx, idx, rowData, expandArgs: expandableOptions });\n    }\n  }\n\n  return (\n    <>\n      {cellMetaData.getCellActions && (\n        <CellActions<R>\n          column={column}\n          rowData={rowData}\n          getCellActions={cellMetaData.getCellActions}\n        />\n      )}\n      {expandableOptions && expandableOptions.canExpand && (\n        <CellExpand\n          expanded={expandableOptions.expanded}\n          onCellExpand={handleCellExpand}\n        />\n      )}\n      <div className=\"rdg-cell-value\">\n        {expandableOptions && treeDepth > 0 && isExpandCell && (\n          <ChildRowDeleteButton\n            treeDepth={treeDepth}\n            onDeleteSubRow={handleDeleteSubRow}\n            isDeleteSubRowEnabled={!!cellMetaData.onDeleteSubRow}\n          />\n        )}\n        <div style={style}>\n          {getFormattedValue(column.formatter)}\n        </div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}