{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport React, { memo } from 'react';\nimport { isElement } from 'react-is';\nimport Row from './Row';\nimport RowGroup from './RowGroup';\n\nfunction RowRenderer(_a) {\n  var cellMetaData = _a.cellMetaData,\n      colOverscanEndIdx = _a.colOverscanEndIdx,\n      colOverscanStartIdx = _a.colOverscanStartIdx,\n      columnMetrics = _a.columnMetrics,\n      eventBus = _a.eventBus,\n      getSubRowDetails = _a.getSubRowDetails,\n      idx = _a.idx,\n      onRowSelectionChange = _a.onRowSelectionChange,\n      rowData = _a.rowData,\n      rowGroupRenderer = _a.rowGroupRenderer,\n      rowHeight = _a.rowHeight,\n      rowKey = _a.rowKey,\n      rowRenderer = _a.rowRenderer,\n      scrollLeft = _a.scrollLeft,\n      selectedRows = _a.selectedRows,\n      setRowRef = _a.setRowRef;\n  var __metaData = rowData.__metaData;\n  var rendererProps = {\n    ref: function (row) {\n      setRowRef(row, idx);\n    },\n    idx: idx,\n    row: rowData,\n    width: columnMetrics.totalColumnWidth,\n    height: rowHeight,\n    columns: columnMetrics.columns,\n    isRowSelected: selectedRows !== undefined && selectedRows.has(rowData[rowKey]),\n    onRowSelectionChange: onRowSelectionChange,\n    cellMetaData: cellMetaData,\n    subRowDetails: getSubRowDetails ? getSubRowDetails(rowData) : undefined,\n    colOverscanStartIdx: colOverscanStartIdx,\n    colOverscanEndIdx: colOverscanEndIdx,\n    lastFrozenColumnIndex: columnMetrics.lastFrozenColumnIndex,\n    scrollLeft: scrollLeft,\n    isSummaryRow: false\n  };\n\n  function renderCustomRowRenderer() {\n    var ref = rendererProps.ref,\n        otherProps = __rest(rendererProps, [\"ref\"]);\n\n    var CustomRowRenderer = rowRenderer;\n\n    var customRowRendererProps = __assign(__assign({}, otherProps), {\n      renderBaseRow: function (p) {\n        return React.createElement(Row, __assign({\n          ref: ref\n        }, p));\n      }\n    });\n\n    if (isElement(CustomRowRenderer)) {\n      if (CustomRowRenderer.type === Row) {\n        // In the case where Row is specified as the custom render, ensure the correct ref is passed\n        return React.createElement(Row, __assign({}, rendererProps));\n      }\n\n      return React.cloneElement(CustomRowRenderer, customRowRendererProps);\n    }\n\n    return React.createElement(CustomRowRenderer, __assign({}, customRowRendererProps));\n  }\n\n  function renderGroupRow() {\n    var ref = rendererProps.ref,\n        columns = rendererProps.columns,\n        rowGroupProps = __rest(rendererProps, [\"ref\", \"columns\"]);\n\n    return React.createElement(RowGroup, __assign({}, rowGroupProps, __metaData, {\n      columns: columns,\n      name: rowData.name,\n      eventBus: eventBus,\n      renderer: rowGroupRenderer,\n      renderBaseRow: function (p) {\n        return React.createElement(Row, __assign({\n          ref: ref\n        }, p));\n      }\n    }));\n  }\n\n  if (__metaData) {\n    if (__metaData.getRowRenderer) {\n      return __metaData.getRowRenderer(rendererProps, idx);\n    }\n\n    if (__metaData.isGroup) {\n      return renderGroupRow();\n    }\n  }\n\n  if (rowRenderer) {\n    return renderCustomRowRenderer();\n  }\n\n  return React.createElement(Row, __assign({}, rendererProps));\n}\n\nexport default memo(RowRenderer);","map":{"version":3,"sources":["../src/RowRenderer.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { memo } from 'react';\nimport { isElement } from 'react-is';\n\nimport Row from './Row';\nimport RowGroup from './RowGroup';\nimport { CanvasProps } from './Canvas';\nimport { IRowRendererProps, CalculatedColumn, SubRowDetails, RowData } from './common/types';\n\ntype SharedCanvasProps<R, K extends keyof R> = Pick<CanvasProps<R, K>,\n| 'cellMetaData'\n| 'columnMetrics'\n| 'eventBus'\n| 'getSubRowDetails'\n| 'onRowSelectionChange'\n| 'rowGroupRenderer'\n| 'rowHeight'\n| 'rowKey'\n| 'rowRenderer'\n| 'selectedRows'\n>;\n\nexport interface RowRendererProps<R, K extends keyof R> extends SharedCanvasProps<R, K> {\n  idx: number;\n  rowData: R;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  scrollLeft: number | undefined;\n  setRowRef(row: Row<R> | null, idx: number): void;\n}\n\ntype SharedActualRowRendererProps<R, K extends keyof R> = Pick<RowRendererProps<R, K>,\n| 'idx'\n| 'cellMetaData'\n| 'onRowSelectionChange'\n| 'colOverscanStartIdx'\n| 'colOverscanEndIdx'\n| 'scrollLeft'\n>;\n\ninterface RendererProps<R, K extends keyof R> extends SharedActualRowRendererProps<R, K> {\n  ref: React.Ref<Row<R>>;\n  row: R;\n  columns: CalculatedColumn<R>[];\n  lastFrozenColumnIndex: number;\n  subRowDetails?: SubRowDetails;\n  width: number;\n  height: number;\n  isRowSelected: boolean;\n  isSummaryRow: boolean;\n}\n\nfunction RowRenderer<R, K extends keyof R>({\n  cellMetaData,\n  colOverscanEndIdx,\n  colOverscanStartIdx,\n  columnMetrics,\n  eventBus,\n  getSubRowDetails,\n  idx,\n  onRowSelectionChange,\n  rowData,\n  rowGroupRenderer,\n  rowHeight,\n  rowKey,\n  rowRenderer,\n  scrollLeft,\n  selectedRows,\n  setRowRef\n}: RowRendererProps<R, K>) {\n  const { __metaData } = rowData as RowData;\n  const rendererProps: RendererProps<R, K> = {\n    ref(row) {\n      setRowRef(row, idx);\n    },\n    idx,\n    row: rowData,\n    width: columnMetrics.totalColumnWidth,\n    height: rowHeight,\n    columns: columnMetrics.columns,\n    isRowSelected: selectedRows !== undefined && selectedRows.has(rowData[rowKey]),\n    onRowSelectionChange,\n    cellMetaData,\n    subRowDetails: getSubRowDetails ? getSubRowDetails(rowData) : undefined,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex: columnMetrics.lastFrozenColumnIndex,\n    scrollLeft,\n    isSummaryRow: false\n  };\n\n  function renderCustomRowRenderer() {\n    const { ref, ...otherProps } = rendererProps;\n    const CustomRowRenderer = rowRenderer!;\n    const customRowRendererProps = { ...otherProps, renderBaseRow: (p: IRowRendererProps<R>) => <Row ref={ref} {...p} /> };\n\n    if (isElement(CustomRowRenderer)) {\n      if (CustomRowRenderer.type === Row) {\n        // In the case where Row is specified as the custom render, ensure the correct ref is passed\n        return <Row<R> {...rendererProps} />;\n      }\n      return React.cloneElement(CustomRowRenderer, customRowRendererProps);\n    }\n\n    return <CustomRowRenderer {...customRowRendererProps} />;\n  }\n\n  function renderGroupRow() {\n    const { ref, columns, ...rowGroupProps } = rendererProps;\n\n    return (\n      <RowGroup\n        {...rowGroupProps}\n        {...__metaData!}\n        columns={columns as CalculatedColumn<unknown>[]}\n        name={(rowData as RowData).name!}\n        eventBus={eventBus}\n        renderer={rowGroupRenderer}\n        renderBaseRow={(p: IRowRendererProps<R>) => <Row ref={ref} {...p} />}\n      />\n    );\n  }\n\n  if (__metaData) {\n    if (__metaData.getRowRenderer) {\n      return __metaData.getRowRenderer(rendererProps, idx);\n    }\n    if (__metaData.isGroup) {\n      return renderGroupRow();\n    }\n  }\n\n  if (rowRenderer) {\n    return renderCustomRowRenderer();\n  }\n\n  return <Row<R> {...rendererProps} />;\n}\n\nexport default memo(RowRenderer) as <R, K extends keyof R>(props: RowRendererProps<R, K>) => JSX.Element;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}