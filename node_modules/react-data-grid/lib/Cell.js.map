{"version":3,"file":"Cell.js","sourceRoot":"","sources":["../src/Cell.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { memo } from 'react';\nimport classNames from 'classnames';\n\nimport { CellRendererProps, ColumnEventInfo } from './common/types';\nimport { isFrozen } from './utils/columnUtils';\n\nexport interface CellProps<R> extends CellRendererProps<R> {\n  // TODO: Check if these props are required or not. These are most likely set by custom cell renderer\n  children?: React.ReactNode;\n  className?: string;\n}\n\nfunction Cell<R>({\n  cellMetaData,\n  children,\n  className,\n  column,\n  expandableOptions,\n  idx,\n  isRowSelected,\n  isSummaryRow,\n  lastFrozenColumnIndex,\n  onRowSelectionChange,\n  rowData,\n  rowIdx,\n  scrollLeft\n}: CellProps<R>) {\n  function handleCellClick() {\n    cellMetaData.onCellClick({ idx, rowIdx });\n  }\n\n  function handleCellMouseDown() {\n    if (cellMetaData.onCellMouseDown) {\n      cellMetaData.onCellMouseDown({ idx, rowIdx });\n    }\n  }\n\n  function handleCellMouseEnter() {\n    if (cellMetaData.onCellMouseEnter) {\n      cellMetaData.onCellMouseEnter({ idx, rowIdx });\n    }\n  }\n\n  function handleCellContextMenu() {\n    cellMetaData.onCellContextMenu({ idx, rowIdx });\n  }\n\n  function handleCellDoubleClick(e: React.MouseEvent<HTMLDivElement>) {\n    e.stopPropagation();\n    cellMetaData.onCellDoubleClick({ idx, rowIdx });\n  }\n\n  function handleDragOver(e: React.DragEvent<HTMLDivElement>) {\n    e.preventDefault();\n  }\n\n  function getEvents() {\n    if (isSummaryRow) return null;\n\n    const columnEvents = column.events;\n    const allEvents: { [key: string]: Function } = {\n      onClick: handleCellClick,\n      onMouseDown: handleCellMouseDown,\n      onMouseEnter: handleCellMouseEnter,\n      onDoubleClick: handleCellDoubleClick,\n      onContextMenu: handleCellContextMenu,\n      onDragOver: handleDragOver\n    };\n\n    if (!columnEvents) {\n      return allEvents;\n    }\n\n    const eventInfo: ColumnEventInfo<R> = {\n      idx,\n      rowIdx,\n      column,\n      rowId: rowData[cellMetaData.rowKey]\n    };\n\n    for (const event in columnEvents) {\n      const columnEventHandler = columnEvents[event];\n      if (columnEventHandler) {\n        if (allEvents.hasOwnProperty(event)) {\n          const existingEvent = allEvents[event];\n          allEvents[event] = (e: Event) => {\n            existingEvent(e);\n            columnEventHandler(e, eventInfo);\n          };\n        } else {\n          allEvents[event] = (e: Event) => {\n            columnEventHandler(e, eventInfo);\n          };\n        }\n      }\n    }\n\n    return allEvents;\n  }\n\n  const colIsFrozen = isFrozen(column);\n  className = classNames(\n    column.cellClass,\n    'rdg-cell',\n    className, {\n      'rdg-cell-frozen': colIsFrozen,\n      'rdg-cell-frozen-last': colIsFrozen && column.idx === lastFrozenColumnIndex,\n      'rdg-child-cell': expandableOptions && expandableOptions.subRowDetails && expandableOptions.treeDepth > 0\n    }\n  );\n\n  const style: React.CSSProperties = {\n    width: column.width,\n    left: column.left\n  };\n\n  if (scrollLeft !== undefined) {\n    style.transform = `translateX(${scrollLeft}px)`;\n  }\n\n  return (\n    <div\n      className={className}\n      style={style}\n      {...getEvents()}\n    >\n      {children || column.cellContentRenderer({\n        idx,\n        rowIdx,\n        rowData,\n        column,\n        cellMetaData,\n        expandableOptions,\n        isRowSelected,\n        onRowSelectionChange,\n        isSummaryRow\n      })}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R>(props: CellProps<R>) => JSX.Element;\n"]}